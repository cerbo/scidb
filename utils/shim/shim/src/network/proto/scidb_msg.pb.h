// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network/proto/scidb_msg.proto

#ifndef PROTOBUF_network_2fproto_2fscidb_5fmsg_2eproto__INCLUDED
#define PROTOBUF_network_2fproto_2fscidb_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace scidb_msg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();

class Query;
class Fetch;
class Chunk;
class Chunk_Warning;
class QueryResult;
class QueryResult_AttributeDesc;
class QueryResult_DimensionDesc;
class QueryResult_Warning;
class PhysicalPlan;
class PhysicalPlan_InstanceListEntry;
class PhysicalPlan_InstanceList;
class Error;
class Error_ParsingContext;
class DummyQuery;
class ResourcesFileExistsRequest;
class ResourcesFileExistsResponse;
class Control;
class Control_Channel;
class MpiSlaveHandshake;
class MpiSlaveResult;
class MpiSlaveCommand;
class NewClientStart;
class NewClientComplete;
class SecurityMessage;
class SecurityMessageResponse;

// ===================================================================

class Query : public ::google::protobuf::Message {
 public:
  Query();
  virtual ~Query();
  
  Query(const Query& from);
  
  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Query& default_instance();
  
  void Swap(Query* other);
  
  // implements Message ----------------------------------------------
  
  Query* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Query& from);
  void MergeFrom(const Query& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string query = 1;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 1;
  inline const ::std::string& query() const;
  inline void set_query(const ::std::string& value);
  inline void set_query(const char* value);
  inline void set_query(const char* value, size_t size);
  inline ::std::string* mutable_query();
  inline ::std::string* release_query();
  
  // required bool afl = 2 [default = false];
  inline bool has_afl() const;
  inline void clear_afl();
  static const int kAflFieldNumber = 2;
  inline bool afl() const;
  inline void set_afl(bool value);
  
  // optional string program_options = 3 [default = "unknown"];
  inline bool has_program_options() const;
  inline void clear_program_options();
  static const int kProgramOptionsFieldNumber = 3;
  inline const ::std::string& program_options() const;
  inline void set_program_options(const ::std::string& value);
  inline void set_program_options(const char* value);
  inline void set_program_options(const char* value, size_t size);
  inline ::std::string* mutable_program_options();
  inline ::std::string* release_program_options();
  
  // @@protoc_insertion_point(class_scope:scidb_msg.Query)
 private:
  inline void set_has_query();
  inline void clear_has_query();
  inline void set_has_afl();
  inline void clear_has_afl();
  inline void set_has_program_options();
  inline void clear_has_program_options();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* query_;
  ::std::string* program_options_;
  static const ::std::string _default_program_options_;
  bool afl_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();
  
  void InitAsDefaultInstance();
  static Query* default_instance_;
};
// -------------------------------------------------------------------

class Fetch : public ::google::protobuf::Message {
 public:
  Fetch();
  virtual ~Fetch();
  
  Fetch(const Fetch& from);
  
  inline Fetch& operator=(const Fetch& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Fetch& default_instance();
  
  void Swap(Fetch* other);
  
  // implements Message ----------------------------------------------
  
  Fetch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fetch& from);
  void MergeFrom(const Fetch& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 attribute_id = 2;
  inline bool has_attribute_id() const;
  inline void clear_attribute_id();
  static const int kAttributeIdFieldNumber = 2;
  inline ::google::protobuf::uint32 attribute_id() const;
  inline void set_attribute_id(::google::protobuf::uint32 value);
  
  // optional bool position_only = 3;
  inline bool has_position_only() const;
  inline void clear_position_only();
  static const int kPositionOnlyFieldNumber = 3;
  inline bool position_only() const;
  inline void set_position_only(bool value);
  
  // optional uint32 obj_type = 4;
  inline bool has_obj_type() const;
  inline void clear_obj_type();
  static const int kObjTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 obj_type() const;
  inline void set_obj_type(::google::protobuf::uint32 value);
  
  // optional string array_name = 5;
  inline bool has_array_name() const;
  inline void clear_array_name();
  static const int kArrayNameFieldNumber = 5;
  inline const ::std::string& array_name() const;
  inline void set_array_name(const ::std::string& value);
  inline void set_array_name(const char* value);
  inline void set_array_name(const char* value, size_t size);
  inline ::std::string* mutable_array_name();
  inline ::std::string* release_array_name();
  
  // optional uint32 prefetch_size = 6;
  inline bool has_prefetch_size() const;
  inline void clear_prefetch_size();
  static const int kPrefetchSizeFieldNumber = 6;
  inline ::google::protobuf::uint32 prefetch_size() const;
  inline void set_prefetch_size(::google::protobuf::uint32 value);
  
  // optional uint64 fetch_id = 7;
  inline bool has_fetch_id() const;
  inline void clear_fetch_id();
  static const int kFetchIdFieldNumber = 7;
  inline ::google::protobuf::uint64 fetch_id() const;
  inline void set_fetch_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:scidb_msg.Fetch)
 private:
  inline void set_has_attribute_id();
  inline void clear_has_attribute_id();
  inline void set_has_position_only();
  inline void clear_has_position_only();
  inline void set_has_obj_type();
  inline void clear_has_obj_type();
  inline void set_has_array_name();
  inline void clear_has_array_name();
  inline void set_has_prefetch_size();
  inline void clear_has_prefetch_size();
  inline void set_has_fetch_id();
  inline void clear_has_fetch_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 attribute_id_;
  bool position_only_;
  ::std::string* array_name_;
  ::google::protobuf::uint32 obj_type_;
  ::google::protobuf::uint32 prefetch_size_;
  ::google::protobuf::uint64 fetch_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();
  
  void InitAsDefaultInstance();
  static Fetch* default_instance_;
};
// -------------------------------------------------------------------

class Chunk_Warning : public ::google::protobuf::Message {
 public:
  Chunk_Warning();
  virtual ~Chunk_Warning();
  
  Chunk_Warning(const Chunk_Warning& from);
  
  inline Chunk_Warning& operator=(const Chunk_Warning& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Chunk_Warning& default_instance();
  
  void Swap(Chunk_Warning* other);
  
  // implements Message ----------------------------------------------
  
  Chunk_Warning* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chunk_Warning& from);
  void MergeFrom(const Chunk_Warning& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);
  
  // required string file = 2;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 2;
  inline const ::std::string& file() const;
  inline void set_file(const ::std::string& value);
  inline void set_file(const char* value);
  inline void set_file(const char* value, size_t size);
  inline ::std::string* mutable_file();
  inline ::std::string* release_file();
  
  // required string function = 3;
  inline bool has_function() const;
  inline void clear_function();
  static const int kFunctionFieldNumber = 3;
  inline const ::std::string& function() const;
  inline void set_function(const ::std::string& value);
  inline void set_function(const char* value);
  inline void set_function(const char* value, size_t size);
  inline ::std::string* mutable_function();
  inline ::std::string* release_function();
  
  // required int32 line = 4;
  inline bool has_line() const;
  inline void clear_line();
  static const int kLineFieldNumber = 4;
  inline ::google::protobuf::int32 line() const;
  inline void set_line(::google::protobuf::int32 value);
  
  // required string what_str = 5;
  inline bool has_what_str() const;
  inline void clear_what_str();
  static const int kWhatStrFieldNumber = 5;
  inline const ::std::string& what_str() const;
  inline void set_what_str(const ::std::string& value);
  inline void set_what_str(const char* value);
  inline void set_what_str(const char* value, size_t size);
  inline ::std::string* mutable_what_str();
  inline ::std::string* release_what_str();
  
  // required string stringified_code = 6;
  inline bool has_stringified_code() const;
  inline void clear_stringified_code();
  static const int kStringifiedCodeFieldNumber = 6;
  inline const ::std::string& stringified_code() const;
  inline void set_stringified_code(const ::std::string& value);
  inline void set_stringified_code(const char* value);
  inline void set_stringified_code(const char* value, size_t size);
  inline ::std::string* mutable_stringified_code();
  inline ::std::string* release_stringified_code();
  
  // required string strings_namespace = 7;
  inline bool has_strings_namespace() const;
  inline void clear_strings_namespace();
  static const int kStringsNamespaceFieldNumber = 7;
  inline const ::std::string& strings_namespace() const;
  inline void set_strings_namespace(const ::std::string& value);
  inline void set_strings_namespace(const char* value);
  inline void set_strings_namespace(const char* value, size_t size);
  inline ::std::string* mutable_strings_namespace();
  inline ::std::string* release_strings_namespace();
  
  // @@protoc_insertion_point(class_scope:scidb_msg.Chunk.Warning)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_file();
  inline void clear_has_file();
  inline void set_has_function();
  inline void clear_has_function();
  inline void set_has_line();
  inline void clear_has_line();
  inline void set_has_what_str();
  inline void clear_has_what_str();
  inline void set_has_stringified_code();
  inline void clear_has_stringified_code();
  inline void set_has_strings_namespace();
  inline void clear_has_strings_namespace();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* file_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 line_;
  ::std::string* function_;
  ::std::string* what_str_;
  ::std::string* stringified_code_;
  ::std::string* strings_namespace_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();
  
  void InitAsDefaultInstance();
  static Chunk_Warning* default_instance_;
};
// -------------------------------------------------------------------

class Chunk : public ::google::protobuf::Message {
 public:
  Chunk();
  virtual ~Chunk();
  
  Chunk(const Chunk& from);
  
  inline Chunk& operator=(const Chunk& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Chunk& default_instance();
  
  void Swap(Chunk* other);
  
  // implements Message ----------------------------------------------
  
  Chunk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chunk& from);
  void MergeFrom(const Chunk& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Chunk_Warning Warning;
  
  // accessors -------------------------------------------------------
  
  // optional int32 compression_method = 1;
  inline bool has_compression_method() const;
  inline void clear_compression_method();
  static const int kCompressionMethodFieldNumber = 1;
  inline ::google::protobuf::int32 compression_method() const;
  inline void set_compression_method(::google::protobuf::int32 value);
  
  // repeated int64 coordinates = 2;
  inline int coordinates_size() const;
  inline void clear_coordinates();
  static const int kCoordinatesFieldNumber = 2;
  inline ::google::protobuf::int64 coordinates(int index) const;
  inline void set_coordinates(int index, ::google::protobuf::int64 value);
  inline void add_coordinates(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      coordinates() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_coordinates();
  
  // optional uint64 array_id = 3;
  inline bool has_array_id() const;
  inline void clear_array_id();
  static const int kArrayIdFieldNumber = 3;
  inline ::google::protobuf::uint64 array_id() const;
  inline void set_array_id(::google::protobuf::uint64 value);
  
  // optional uint32 attribute_id = 4;
  inline bool has_attribute_id() const;
  inline void clear_attribute_id();
  static const int kAttributeIdFieldNumber = 4;
  inline ::google::protobuf::uint32 attribute_id() const;
  inline void set_attribute_id(::google::protobuf::uint32 value);
  
  // required bool eof = 5;
  inline bool has_eof() const;
  inline void clear_eof();
  static const int kEofFieldNumber = 5;
  inline bool eof() const;
  inline void set_eof(bool value);
  
  // optional bool sparse = 6;
  inline bool has_sparse() const;
  inline void clear_sparse();
  static const int kSparseFieldNumber = 6;
  inline bool sparse() const;
  inline void set_sparse(bool value);
  
  // optional bool rle = 7;
  inline bool has_rle() const;
  inline void clear_rle();
  static const int kRleFieldNumber = 7;
  inline bool rle() const;
  inline void set_rle(bool value);
  
  // optional uint64 decompressed_size = 8;
  inline bool has_decompressed_size() const;
  inline void clear_decompressed_size();
  static const int kDecompressedSizeFieldNumber = 8;
  inline ::google::protobuf::uint64 decompressed_size() const;
  inline void set_decompressed_size(::google::protobuf::uint64 value);
  
  // optional bool has_next = 9;
  inline bool has_has_next() const;
  inline void clear_has_next();
  static const int kHasNextFieldNumber = 9;
  inline bool has_next() const;
  inline void set_has_next(bool value);
  
  // repeated int64 next_coordinates = 10;
  inline int next_coordinates_size() const;
  inline void clear_next_coordinates();
  static const int kNextCoordinatesFieldNumber = 10;
  inline ::google::protobuf::int64 next_coordinates(int index) const;
  inline void set_next_coordinates(int index, ::google::protobuf::int64 value);
  inline void add_next_coordinates(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      next_coordinates() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_next_coordinates();
  
  // optional uint32 obj_type = 11;
  inline bool has_obj_type() const;
  inline void clear_obj_type();
  static const int kObjTypeFieldNumber = 11;
  inline ::google::protobuf::uint32 obj_type() const;
  inline void set_obj_type(::google::protobuf::uint32 value);
  
  // optional uint64 count = 12;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 12;
  inline ::google::protobuf::uint64 count() const;
  inline void set_count(::google::protobuf::uint64 value);
  
  // optional bool tombstone = 13 [default = false];
  inline bool has_tombstone() const;
  inline void clear_tombstone();
  static const int kTombstoneFieldNumber = 13;
  inline bool tombstone() const;
  inline void set_tombstone(bool value);
  
  // optional uint64 dest_instance = 14;
  inline bool has_dest_instance() const;
  inline void clear_dest_instance();
  static const int kDestInstanceFieldNumber = 14;
  inline ::google::protobuf::uint64 dest_instance() const;
  inline void set_dest_instance(::google::protobuf::uint64 value);
  
  // optional uint64 next_dest_instance = 15;
  inline bool has_next_dest_instance() const;
  inline void clear_next_dest_instance();
  static const int kNextDestInstanceFieldNumber = 15;
  inline ::google::protobuf::uint64 next_dest_instance() const;
  inline void set_next_dest_instance(::google::protobuf::uint64 value);
  
  // optional uint64 fetch_id = 16;
  inline bool has_fetch_id() const;
  inline void clear_fetch_id();
  static const int kFetchIdFieldNumber = 16;
  inline ::google::protobuf::uint64 fetch_id() const;
  inline void set_fetch_id(::google::protobuf::uint64 value);
  
  // repeated .scidb_msg.Chunk.Warning warnings = 17;
  inline int warnings_size() const;
  inline void clear_warnings();
  static const int kWarningsFieldNumber = 17;
  inline const ::scidb_msg::Chunk_Warning& warnings(int index) const;
  inline ::scidb_msg::Chunk_Warning* mutable_warnings(int index);
  inline ::scidb_msg::Chunk_Warning* add_warnings();
  inline const ::google::protobuf::RepeatedPtrField< ::scidb_msg::Chunk_Warning >&
      warnings() const;
  inline ::google::protobuf::RepeatedPtrField< ::scidb_msg::Chunk_Warning >*
      mutable_warnings();
  
  // @@protoc_insertion_point(class_scope:scidb_msg.Chunk)
 private:
  inline void set_has_compression_method();
  inline void clear_has_compression_method();
  inline void set_has_array_id();
  inline void clear_has_array_id();
  inline void set_has_attribute_id();
  inline void clear_has_attribute_id();
  inline void set_has_eof();
  inline void clear_has_eof();
  inline void set_has_sparse();
  inline void clear_has_sparse();
  inline void set_has_rle();
  inline void clear_has_rle();
  inline void set_has_decompressed_size();
  inline void clear_has_decompressed_size();
  inline void set_has_has_next();
  inline void clear_has_has_next();
  inline void set_has_obj_type();
  inline void clear_has_obj_type();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_tombstone();
  inline void clear_has_tombstone();
  inline void set_has_dest_instance();
  inline void clear_has_dest_instance();
  inline void set_has_next_dest_instance();
  inline void clear_has_next_dest_instance();
  inline void set_has_fetch_id();
  inline void clear_has_fetch_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > coordinates_;
  ::google::protobuf::int32 compression_method_;
  ::google::protobuf::uint32 attribute_id_;
  ::google::protobuf::uint64 array_id_;
  bool eof_;
  bool sparse_;
  bool rle_;
  bool has_next_;
  ::google::protobuf::uint32 obj_type_;
  ::google::protobuf::uint64 decompressed_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > next_coordinates_;
  ::google::protobuf::uint64 count_;
  ::google::protobuf::uint64 dest_instance_;
  ::google::protobuf::uint64 next_dest_instance_;
  ::google::protobuf::uint64 fetch_id_;
  ::google::protobuf::RepeatedPtrField< ::scidb_msg::Chunk_Warning > warnings_;
  bool tombstone_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();
  
  void InitAsDefaultInstance();
  static Chunk* default_instance_;
};
// -------------------------------------------------------------------

class QueryResult_AttributeDesc : public ::google::protobuf::Message {
 public:
  QueryResult_AttributeDesc();
  virtual ~QueryResult_AttributeDesc();
  
  QueryResult_AttributeDesc(const QueryResult_AttributeDesc& from);
  
  inline QueryResult_AttributeDesc& operator=(const QueryResult_AttributeDesc& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResult_AttributeDesc& default_instance();
  
  void Swap(QueryResult_AttributeDesc* other);
  
  // implements Message ----------------------------------------------
  
  QueryResult_AttributeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResult_AttributeDesc& from);
  void MergeFrom(const QueryResult_AttributeDesc& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  
  // required uint32 flags = 4;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 4;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);
  
  // required uint32 default_compression_method = 5;
  inline bool has_default_compression_method() const;
  inline void clear_default_compression_method();
  static const int kDefaultCompressionMethodFieldNumber = 5;
  inline ::google::protobuf::uint32 default_compression_method() const;
  inline void set_default_compression_method(::google::protobuf::uint32 value);
  
  // required int32 default_missing_reason = 6;
  inline bool has_default_missing_reason() const;
  inline void clear_default_missing_reason();
  static const int kDefaultMissingReasonFieldNumber = 6;
  inline ::google::protobuf::int32 default_missing_reason() const;
  inline void set_default_missing_reason(::google::protobuf::int32 value);
  
  // required bytes default_value = 7;
  inline bool has_default_value() const;
  inline void clear_default_value();
  static const int kDefaultValueFieldNumber = 7;
  inline const ::std::string& default_value() const;
  inline void set_default_value(const ::std::string& value);
  inline void set_default_value(const char* value);
  inline void set_default_value(const void* value, size_t size);
  inline ::std::string* mutable_default_value();
  inline ::std::string* release_default_value();
  
  // @@protoc_insertion_point(class_scope:scidb_msg.QueryResult.AttributeDesc)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_default_compression_method();
  inline void clear_has_default_compression_method();
  inline void set_has_default_missing_reason();
  inline void clear_has_default_missing_reason();
  inline void set_has_default_value();
  inline void clear_has_default_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 flags_;
  ::std::string* type_;
  ::google::protobuf::uint32 default_compression_method_;
  ::google::protobuf::int32 default_missing_reason_;
  ::std::string* default_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();
  
  void InitAsDefaultInstance();
  static QueryResult_AttributeDesc* default_instance_;
};
// -------------------------------------------------------------------

class QueryResult_DimensionDesc : public ::google::protobuf::Message {
 public:
  QueryResult_DimensionDesc();
  virtual ~QueryResult_DimensionDesc();
  
  QueryResult_DimensionDesc(const QueryResult_DimensionDesc& from);
  
  inline QueryResult_DimensionDesc& operator=(const QueryResult_DimensionDesc& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResult_DimensionDesc& default_instance();
  
  void Swap(QueryResult_DimensionDesc* other);
  
  // implements Message ----------------------------------------------
  
  QueryResult_DimensionDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResult_DimensionDesc& from);
  void MergeFrom(const QueryResult_DimensionDesc& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int64 start_min = 2;
  inline bool has_start_min() const;
  inline void clear_start_min();
  static const int kStartMinFieldNumber = 2;
  inline ::google::protobuf::int64 start_min() const;
  inline void set_start_min(::google::protobuf::int64 value);
  
  // required int64 curr_start = 3;
  inline bool has_curr_start() const;
  inline void clear_curr_start();
  static const int kCurrStartFieldNumber = 3;
  inline ::google::protobuf::int64 curr_start() const;
  inline void set_curr_start(::google::protobuf::int64 value);
  
  // required int64 curr_end = 4;
  inline bool has_curr_end() const;
  inline void clear_curr_end();
  static const int kCurrEndFieldNumber = 4;
  inline ::google::protobuf::int64 curr_end() const;
  inline void set_curr_end(::google::protobuf::int64 value);
  
  // required int64 end_max = 5;
  inline bool has_end_max() const;
  inline void clear_end_max();
  static const int kEndMaxFieldNumber = 5;
  inline ::google::protobuf::int64 end_max() const;
  inline void set_end_max(::google::protobuf::int64 value);
  
  // required int64 chunk_interval = 6;
  inline bool has_chunk_interval() const;
  inline void clear_chunk_interval();
  static const int kChunkIntervalFieldNumber = 6;
  inline ::google::protobuf::int64 chunk_interval() const;
  inline void set_chunk_interval(::google::protobuf::int64 value);
  
  // required int64 chunk_overlap = 7;
  inline bool has_chunk_overlap() const;
  inline void clear_chunk_overlap();
  static const int kChunkOverlapFieldNumber = 7;
  inline ::google::protobuf::int64 chunk_overlap() const;
  inline void set_chunk_overlap(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:scidb_msg.QueryResult.DimensionDesc)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_start_min();
  inline void clear_has_start_min();
  inline void set_has_curr_start();
  inline void clear_has_curr_start();
  inline void set_has_curr_end();
  inline void clear_has_curr_end();
  inline void set_has_end_max();
  inline void clear_has_end_max();
  inline void set_has_chunk_interval();
  inline void clear_has_chunk_interval();
  inline void set_has_chunk_overlap();
  inline void clear_has_chunk_overlap();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int64 start_min_;
  ::google::protobuf::int64 curr_start_;
  ::google::protobuf::int64 curr_end_;
  ::google::protobuf::int64 end_max_;
  ::google::protobuf::int64 chunk_interval_;
  ::google::protobuf::int64 chunk_overlap_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();
  
  void InitAsDefaultInstance();
  static QueryResult_DimensionDesc* default_instance_;
};
// -------------------------------------------------------------------

class QueryResult_Warning : public ::google::protobuf::Message {
 public:
  QueryResult_Warning();
  virtual ~QueryResult_Warning();
  
  QueryResult_Warning(const QueryResult_Warning& from);
  
  inline QueryResult_Warning& operator=(const QueryResult_Warning& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResult_Warning& default_instance();
  
  void Swap(QueryResult_Warning* other);
  
  // implements Message ----------------------------------------------
  
  QueryResult_Warning* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResult_Warning& from);
  void MergeFrom(const QueryResult_Warning& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);
  
  // required string file = 2;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 2;
  inline const ::std::string& file() const;
  inline void set_file(const ::std::string& value);
  inline void set_file(const char* value);
  inline void set_file(const char* value, size_t size);
  inline ::std::string* mutable_file();
  inline ::std::string* release_file();
  
  // required string function = 3;
  inline bool has_function() const;
  inline void clear_function();
  static const int kFunctionFieldNumber = 3;
  inline const ::std::string& function() const;
  inline void set_function(const ::std::string& value);
  inline void set_function(const char* value);
  inline void set_function(const char* value, size_t size);
  inline ::std::string* mutable_function();
  inline ::std::string* release_function();
  
  // required int32 line = 4;
  inline bool has_line() const;
  inline void clear_line();
  static const int kLineFieldNumber = 4;
  inline ::google::protobuf::int32 line() const;
  inline void set_line(::google::protobuf::int32 value);
  
  // required string what_str = 5;
  inline bool has_what_str() const;
  inline void clear_what_str();
  static const int kWhatStrFieldNumber = 5;
  inline const ::std::string& what_str() const;
  inline void set_what_str(const ::std::string& value);
  inline void set_what_str(const char* value);
  inline void set_what_str(const char* value, size_t size);
  inline ::std::string* mutable_what_str();
  inline ::std::string* release_what_str();
  
  // required string stringified_code = 6;
  inline bool has_stringified_code() const;
  inline void clear_stringified_code();
  static const int kStringifiedCodeFieldNumber = 6;
  inline const ::std::string& stringified_code() const;
  inline void set_stringified_code(const ::std::string& value);
  inline void set_stringified_code(const char* value);
  inline void set_stringified_code(const char* value, size_t size);
  inline ::std::string* mutable_stringified_code();
  inline ::std::string* release_stringified_code();
  
  // required string strings_namespace = 7;
  inline bool has_strings_namespace() const;
  inline void clear_strings_namespace();
  static const int kStringsNamespaceFieldNumber = 7;
  inline const ::std::string& strings_namespace() const;
  inline void set_strings_namespace(const ::std::string& value);
  inline void set_strings_namespace(const char* value);
  inline void set_strings_namespace(const char* value, size_t size);
  inline ::std::string* mutable_strings_namespace();
  inline ::std::string* release_strings_namespace();
  
  // @@protoc_insertion_point(class_scope:scidb_msg.QueryResult.Warning)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_file();
  inline void clear_has_file();
  inline void set_has_function();
  inline void clear_has_function();
  inline void set_has_line();
  inline void clear_has_line();
  inline void set_has_what_str();
  inline void clear_has_what_str();
  inline void set_has_stringified_code();
  inline void clear_has_stringified_code();
  inline void set_has_strings_namespace();
  inline void clear_has_strings_namespace();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* file_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 line_;
  ::std::string* function_;
  ::std::string* what_str_;
  ::std::string* stringified_code_;
  ::std::string* strings_namespace_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();
  
  void InitAsDefaultInstance();
  static QueryResult_Warning* default_instance_;
};
// -------------------------------------------------------------------

class QueryResult : public ::google::protobuf::Message {
 public:
  QueryResult();
  virtual ~QueryResult();
  
  QueryResult(const QueryResult& from);
  
  inline QueryResult& operator=(const QueryResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResult& default_instance();
  
  void Swap(QueryResult* other);
  
  // implements Message ----------------------------------------------
  
  QueryResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResult& from);
  void MergeFrom(const QueryResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef QueryResult_AttributeDesc AttributeDesc;
  typedef QueryResult_DimensionDesc DimensionDesc;
  typedef QueryResult_Warning Warning;
  
  // accessors -------------------------------------------------------
  
  // optional string array_name = 2;
  inline bool has_array_name() const;
  inline void clear_array_name();
  static const int kArrayNameFieldNumber = 2;
  inline const ::std::string& array_name() const;
  inline void set_array_name(const ::std::string& value);
  inline void set_array_name(const char* value);
  inline void set_array_name(const char* value, size_t size);
  inline ::std::string* mutable_array_name();
  inline ::std::string* release_array_name();
  
  // repeated .scidb_msg.QueryResult.AttributeDesc attributes = 3;
  inline int attributes_size() const;
  inline void clear_attributes();
  static const int kAttributesFieldNumber = 3;
  inline const ::scidb_msg::QueryResult_AttributeDesc& attributes(int index) const;
  inline ::scidb_msg::QueryResult_AttributeDesc* mutable_attributes(int index);
  inline ::scidb_msg::QueryResult_AttributeDesc* add_attributes();
  inline const ::google::protobuf::RepeatedPtrField< ::scidb_msg::QueryResult_AttributeDesc >&
      attributes() const;
  inline ::google::protobuf::RepeatedPtrField< ::scidb_msg::QueryResult_AttributeDesc >*
      mutable_attributes();
  
  // repeated .scidb_msg.QueryResult.DimensionDesc dimensions = 4;
  inline int dimensions_size() const;
  inline void clear_dimensions();
  static const int kDimensionsFieldNumber = 4;
  inline const ::scidb_msg::QueryResult_DimensionDesc& dimensions(int index) const;
  inline ::scidb_msg::QueryResult_DimensionDesc* mutable_dimensions(int index);
  inline ::scidb_msg::QueryResult_DimensionDesc* add_dimensions();
  inline const ::google::protobuf::RepeatedPtrField< ::scidb_msg::QueryResult_DimensionDesc >&
      dimensions() const;
  inline ::google::protobuf::RepeatedPtrField< ::scidb_msg::QueryResult_DimensionDesc >*
      mutable_dimensions();
  
  // optional string explain_physical = 5;
  inline bool has_explain_physical() const;
  inline void clear_explain_physical();
  static const int kExplainPhysicalFieldNumber = 5;
  inline const ::std::string& explain_physical() const;
  inline void set_explain_physical(const ::std::string& value);
  inline void set_explain_physical(const char* value);
  inline void set_explain_physical(const char* value, size_t size);
  inline ::std::string* mutable_explain_physical();
  inline ::std::string* release_explain_physical();
  
  // optional uint64 execution_time = 6;
  inline bool has_execution_time() const;
  inline void clear_execution_time();
  static const int kExecutionTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 execution_time() const;
  inline void set_execution_time(::google::protobuf::uint64 value);
  
  // optional bool selective = 7;
  inline bool has_selective() const;
  inline void clear_selective();
  static const int kSelectiveFieldNumber = 7;
  inline bool selective() const;
  inline void set_selective(bool value);
  
  // optional string explain_logical = 8;
  inline bool has_explain_logical() const;
  inline void clear_explain_logical();
  static const int kExplainLogicalFieldNumber = 8;
  inline const ::std::string& explain_logical() const;
  inline void set_explain_logical(const ::std::string& value);
  inline void set_explain_logical(const char* value);
  inline void set_explain_logical(const char* value, size_t size);
  inline ::std::string* mutable_explain_logical();
  inline ::std::string* release_explain_logical();
  
  // repeated .scidb_msg.QueryResult.Warning warnings = 9;
  inline int warnings_size() const;
  inline void clear_warnings();
  static const int kWarningsFieldNumber = 9;
  inline const ::scidb_msg::QueryResult_Warning& warnings(int index) const;
  inline ::scidb_msg::QueryResult_Warning* mutable_warnings(int index);
  inline ::scidb_msg::QueryResult_Warning* add_warnings();
  inline const ::google::protobuf::RepeatedPtrField< ::scidb_msg::QueryResult_Warning >&
      warnings() const;
  inline ::google::protobuf::RepeatedPtrField< ::scidb_msg::QueryResult_Warning >*
      mutable_warnings();
  
  // repeated string plugins = 10;
  inline int plugins_size() const;
  inline void clear_plugins();
  static const int kPluginsFieldNumber = 10;
  inline const ::std::string& plugins(int index) const;
  inline ::std::string* mutable_plugins(int index);
  inline void set_plugins(int index, const ::std::string& value);
  inline void set_plugins(int index, const char* value);
  inline void set_plugins(int index, const char* value, size_t size);
  inline ::std::string* add_plugins();
  inline void add_plugins(const ::std::string& value);
  inline void add_plugins(const char* value);
  inline void add_plugins(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& plugins() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_plugins();
  
  // optional bool exclusive_array_access = 11;
  inline bool has_exclusive_array_access() const;
  inline void clear_exclusive_array_access();
  static const int kExclusiveArrayAccessFieldNumber = 11;
  inline bool exclusive_array_access() const;
  inline void set_exclusive_array_access(bool value);
  
  // optional bool auto_commit = 12;
  inline bool has_auto_commit() const;
  inline void clear_auto_commit();
  static const int kAutoCommitFieldNumber = 12;
  inline bool auto_commit() const;
  inline void set_auto_commit(bool value);
  
  // @@protoc_insertion_point(class_scope:scidb_msg.QueryResult)
 private:
  inline void set_has_array_name();
  inline void clear_has_array_name();
  inline void set_has_explain_physical();
  inline void clear_has_explain_physical();
  inline void set_has_execution_time();
  inline void clear_has_execution_time();
  inline void set_has_selective();
  inline void clear_has_selective();
  inline void set_has_explain_logical();
  inline void clear_has_explain_logical();
  inline void set_has_exclusive_array_access();
  inline void clear_has_exclusive_array_access();
  inline void set_has_auto_commit();
  inline void clear_has_auto_commit();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* array_name_;
  ::google::protobuf::RepeatedPtrField< ::scidb_msg::QueryResult_AttributeDesc > attributes_;
  ::google::protobuf::RepeatedPtrField< ::scidb_msg::QueryResult_DimensionDesc > dimensions_;
  ::std::string* explain_physical_;
  ::google::protobuf::uint64 execution_time_;
  ::std::string* explain_logical_;
  ::google::protobuf::RepeatedPtrField< ::scidb_msg::QueryResult_Warning > warnings_;
  ::google::protobuf::RepeatedPtrField< ::std::string> plugins_;
  bool selective_;
  bool exclusive_array_access_;
  bool auto_commit_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();
  
  void InitAsDefaultInstance();
  static QueryResult* default_instance_;
};
// -------------------------------------------------------------------

class PhysicalPlan_InstanceListEntry : public ::google::protobuf::Message {
 public:
  PhysicalPlan_InstanceListEntry();
  virtual ~PhysicalPlan_InstanceListEntry();
  
  PhysicalPlan_InstanceListEntry(const PhysicalPlan_InstanceListEntry& from);
  
  inline PhysicalPlan_InstanceListEntry& operator=(const PhysicalPlan_InstanceListEntry& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhysicalPlan_InstanceListEntry& default_instance();
  
  void Swap(PhysicalPlan_InstanceListEntry* other);
  
  // implements Message ----------------------------------------------
  
  PhysicalPlan_InstanceListEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PhysicalPlan_InstanceListEntry& from);
  void MergeFrom(const PhysicalPlan_InstanceListEntry& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 instance_id = 2;
  inline bool has_instance_id() const;
  inline void clear_instance_id();
  static const int kInstanceIdFieldNumber = 2;
  inline ::google::protobuf::uint64 instance_id() const;
  inline void set_instance_id(::google::protobuf::uint64 value);
  
  // required uint64 gen_id = 3;
  inline bool has_gen_id() const;
  inline void clear_gen_id();
  static const int kGenIdFieldNumber = 3;
  inline ::google::protobuf::uint64 gen_id() const;
  inline void set_gen_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:scidb_msg.PhysicalPlan.InstanceListEntry)
 private:
  inline void set_has_instance_id();
  inline void clear_has_instance_id();
  inline void set_has_gen_id();
  inline void clear_has_gen_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 instance_id_;
  ::google::protobuf::uint64 gen_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();
  
  void InitAsDefaultInstance();
  static PhysicalPlan_InstanceListEntry* default_instance_;
};
// -------------------------------------------------------------------

class PhysicalPlan_InstanceList : public ::google::protobuf::Message {
 public:
  PhysicalPlan_InstanceList();
  virtual ~PhysicalPlan_InstanceList();
  
  PhysicalPlan_InstanceList(const PhysicalPlan_InstanceList& from);
  
  inline PhysicalPlan_InstanceList& operator=(const PhysicalPlan_InstanceList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhysicalPlan_InstanceList& default_instance();
  
  void Swap(PhysicalPlan_InstanceList* other);
  
  // implements Message ----------------------------------------------
  
  PhysicalPlan_InstanceList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PhysicalPlan_InstanceList& from);
  void MergeFrom(const PhysicalPlan_InstanceList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .scidb_msg.PhysicalPlan.InstanceListEntry instance_entry = 2;
  inline int instance_entry_size() const;
  inline void clear_instance_entry();
  static const int kInstanceEntryFieldNumber = 2;
  inline const ::scidb_msg::PhysicalPlan_InstanceListEntry& instance_entry(int index) const;
  inline ::scidb_msg::PhysicalPlan_InstanceListEntry* mutable_instance_entry(int index);
  inline ::scidb_msg::PhysicalPlan_InstanceListEntry* add_instance_entry();
  inline const ::google::protobuf::RepeatedPtrField< ::scidb_msg::PhysicalPlan_InstanceListEntry >&
      instance_entry() const;
  inline ::google::protobuf::RepeatedPtrField< ::scidb_msg::PhysicalPlan_InstanceListEntry >*
      mutable_instance_entry();
  
  // @@protoc_insertion_point(class_scope:scidb_msg.PhysicalPlan.InstanceList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::scidb_msg::PhysicalPlan_InstanceListEntry > instance_entry_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();
  
  void InitAsDefaultInstance();
  static PhysicalPlan_InstanceList* default_instance_;
};
// -------------------------------------------------------------------

class PhysicalPlan : public ::google::protobuf::Message {
 public:
  PhysicalPlan();
  virtual ~PhysicalPlan();
  
  PhysicalPlan(const PhysicalPlan& from);
  
  inline PhysicalPlan& operator=(const PhysicalPlan& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhysicalPlan& default_instance();
  
  void Swap(PhysicalPlan* other);
  
  // implements Message ----------------------------------------------
  
  PhysicalPlan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PhysicalPlan& from);
  void MergeFrom(const PhysicalPlan& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef PhysicalPlan_InstanceListEntry InstanceListEntry;
  typedef PhysicalPlan_InstanceList InstanceList;
  
  // accessors -------------------------------------------------------
  
  // required string physical_plan = 2;
  inline bool has_physical_plan() const;
  inline void clear_physical_plan();
  static const int kPhysicalPlanFieldNumber = 2;
  inline const ::std::string& physical_plan() const;
  inline void set_physical_plan(const ::std::string& value);
  inline void set_physical_plan(const char* value);
  inline void set_physical_plan(const char* value, size_t size);
  inline ::std::string* mutable_physical_plan();
  inline ::std::string* release_physical_plan();
  
  // required uint64 membership_id = 3;
  inline bool has_membership_id() const;
  inline void clear_membership_id();
  static const int kMembershipIdFieldNumber = 3;
  inline ::google::protobuf::uint64 membership_id() const;
  inline void set_membership_id(::google::protobuf::uint64 value);
  
  // required .scidb_msg.PhysicalPlan.InstanceList dead_list = 4;
  inline bool has_dead_list() const;
  inline void clear_dead_list();
  static const int kDeadListFieldNumber = 4;
  inline const ::scidb_msg::PhysicalPlan_InstanceList& dead_list() const;
  inline ::scidb_msg::PhysicalPlan_InstanceList* mutable_dead_list();
  inline ::scidb_msg::PhysicalPlan_InstanceList* release_dead_list();
  
  // required .scidb_msg.PhysicalPlan.InstanceList live_list = 5;
  inline bool has_live_list() const;
  inline void clear_live_list();
  static const int kLiveListFieldNumber = 5;
  inline const ::scidb_msg::PhysicalPlan_InstanceList& live_list() const;
  inline ::scidb_msg::PhysicalPlan_InstanceList* mutable_live_list();
  inline ::scidb_msg::PhysicalPlan_InstanceList* release_live_list();
  
  // required string cluster_uuid = 6;
  inline bool has_cluster_uuid() const;
  inline void clear_cluster_uuid();
  static const int kClusterUuidFieldNumber = 6;
  inline const ::std::string& cluster_uuid() const;
  inline void set_cluster_uuid(const ::std::string& value);
  inline void set_cluster_uuid(const char* value);
  inline void set_cluster_uuid(const char* value, size_t size);
  inline ::std::string* mutable_cluster_uuid();
  inline ::std::string* release_cluster_uuid();
  
  // @@protoc_insertion_point(class_scope:scidb_msg.PhysicalPlan)
 private:
  inline void set_has_physical_plan();
  inline void clear_has_physical_plan();
  inline void set_has_membership_id();
  inline void clear_has_membership_id();
  inline void set_has_dead_list();
  inline void clear_has_dead_list();
  inline void set_has_live_list();
  inline void clear_has_live_list();
  inline void set_has_cluster_uuid();
  inline void clear_has_cluster_uuid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* physical_plan_;
  ::google::protobuf::uint64 membership_id_;
  ::scidb_msg::PhysicalPlan_InstanceList* dead_list_;
  ::scidb_msg::PhysicalPlan_InstanceList* live_list_;
  ::std::string* cluster_uuid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();
  
  void InitAsDefaultInstance();
  static PhysicalPlan* default_instance_;
};
// -------------------------------------------------------------------

class Error_ParsingContext : public ::google::protobuf::Message {
 public:
  Error_ParsingContext();
  virtual ~Error_ParsingContext();
  
  Error_ParsingContext(const Error_ParsingContext& from);
  
  inline Error_ParsingContext& operator=(const Error_ParsingContext& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Error_ParsingContext& default_instance();
  
  void Swap(Error_ParsingContext* other);
  
  // implements Message ----------------------------------------------
  
  Error_ParsingContext* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Error_ParsingContext& from);
  void MergeFrom(const Error_ParsingContext& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string query_string = 1;
  inline bool has_query_string() const;
  inline void clear_query_string();
  static const int kQueryStringFieldNumber = 1;
  inline const ::std::string& query_string() const;
  inline void set_query_string(const ::std::string& value);
  inline void set_query_string(const char* value);
  inline void set_query_string(const char* value, size_t size);
  inline ::std::string* mutable_query_string();
  inline ::std::string* release_query_string();
  
  // required uint32 line_start = 2;
  inline bool has_line_start() const;
  inline void clear_line_start();
  static const int kLineStartFieldNumber = 2;
  inline ::google::protobuf::uint32 line_start() const;
  inline void set_line_start(::google::protobuf::uint32 value);
  
  // required uint32 col_start = 3;
  inline bool has_col_start() const;
  inline void clear_col_start();
  static const int kColStartFieldNumber = 3;
  inline ::google::protobuf::uint32 col_start() const;
  inline void set_col_start(::google::protobuf::uint32 value);
  
  // required uint32 line_end = 4;
  inline bool has_line_end() const;
  inline void clear_line_end();
  static const int kLineEndFieldNumber = 4;
  inline ::google::protobuf::uint32 line_end() const;
  inline void set_line_end(::google::protobuf::uint32 value);
  
  // required uint32 col_end = 5;
  inline bool has_col_end() const;
  inline void clear_col_end();
  static const int kColEndFieldNumber = 5;
  inline ::google::protobuf::uint32 col_end() const;
  inline void set_col_end(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:scidb_msg.Error.ParsingContext)
 private:
  inline void set_has_query_string();
  inline void clear_has_query_string();
  inline void set_has_line_start();
  inline void clear_has_line_start();
  inline void set_has_col_start();
  inline void clear_has_col_start();
  inline void set_has_line_end();
  inline void clear_has_line_end();
  inline void set_has_col_end();
  inline void clear_has_col_end();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* query_string_;
  ::google::protobuf::uint32 line_start_;
  ::google::protobuf::uint32 col_start_;
  ::google::protobuf::uint32 line_end_;
  ::google::protobuf::uint32 col_end_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();
  
  void InitAsDefaultInstance();
  static Error_ParsingContext* default_instance_;
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message {
 public:
  Error();
  virtual ~Error();
  
  Error(const Error& from);
  
  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();
  
  void Swap(Error* other);
  
  // implements Message ----------------------------------------------
  
  Error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Error_ParsingContext ParsingContext;
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string file = 2;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 2;
  inline const ::std::string& file() const;
  inline void set_file(const ::std::string& value);
  inline void set_file(const char* value);
  inline void set_file(const char* value, size_t size);
  inline ::std::string* mutable_file();
  inline ::std::string* release_file();
  
  // optional string function = 3;
  inline bool has_function() const;
  inline void clear_function();
  static const int kFunctionFieldNumber = 3;
  inline const ::std::string& function() const;
  inline void set_function(const ::std::string& value);
  inline void set_function(const char* value);
  inline void set_function(const char* value, size_t size);
  inline ::std::string* mutable_function();
  inline ::std::string* release_function();
  
  // optional int32 line = 4;
  inline bool has_line() const;
  inline void clear_line();
  static const int kLineFieldNumber = 4;
  inline ::google::protobuf::int32 line() const;
  inline void set_line(::google::protobuf::int32 value);
  
  // optional string what_str = 5;
  inline bool has_what_str() const;
  inline void clear_what_str();
  static const int kWhatStrFieldNumber = 5;
  inline const ::std::string& what_str() const;
  inline void set_what_str(const ::std::string& value);
  inline void set_what_str(const char* value);
  inline void set_what_str(const char* value, size_t size);
  inline ::std::string* mutable_what_str();
  inline ::std::string* release_what_str();
  
  // required string errors_namespace = 6;
  inline bool has_errors_namespace() const;
  inline void clear_errors_namespace();
  static const int kErrorsNamespaceFieldNumber = 6;
  inline const ::std::string& errors_namespace() const;
  inline void set_errors_namespace(const ::std::string& value);
  inline void set_errors_namespace(const char* value);
  inline void set_errors_namespace(const char* value, size_t size);
  inline ::std::string* mutable_errors_namespace();
  inline ::std::string* release_errors_namespace();
  
  // required int32 short_error_code = 7;
  inline bool has_short_error_code() const;
  inline void clear_short_error_code();
  static const int kShortErrorCodeFieldNumber = 7;
  inline ::google::protobuf::int32 short_error_code() const;
  inline void set_short_error_code(::google::protobuf::int32 value);
  
  // required int32 long_error_code = 8;
  inline bool has_long_error_code() const;
  inline void clear_long_error_code();
  static const int kLongErrorCodeFieldNumber = 8;
  inline ::google::protobuf::int32 long_error_code() const;
  inline void set_long_error_code(::google::protobuf::int32 value);
  
  // optional string stringified_short_error_code = 9;
  inline bool has_stringified_short_error_code() const;
  inline void clear_stringified_short_error_code();
  static const int kStringifiedShortErrorCodeFieldNumber = 9;
  inline const ::std::string& stringified_short_error_code() const;
  inline void set_stringified_short_error_code(const ::std::string& value);
  inline void set_stringified_short_error_code(const char* value);
  inline void set_stringified_short_error_code(const char* value, size_t size);
  inline ::std::string* mutable_stringified_short_error_code();
  inline ::std::string* release_stringified_short_error_code();
  
  // optional string stringified_long_error_code = 10;
  inline bool has_stringified_long_error_code() const;
  inline void clear_stringified_long_error_code();
  static const int kStringifiedLongErrorCodeFieldNumber = 10;
  inline const ::std::string& stringified_long_error_code() const;
  inline void set_stringified_long_error_code(const ::std::string& value);
  inline void set_stringified_long_error_code(const char* value);
  inline void set_stringified_long_error_code(const char* value, size_t size);
  inline ::std::string* mutable_stringified_long_error_code();
  inline ::std::string* release_stringified_long_error_code();
  
  // optional .scidb_msg.Error.ParsingContext parsing_context = 11;
  inline bool has_parsing_context() const;
  inline void clear_parsing_context();
  static const int kParsingContextFieldNumber = 11;
  inline const ::scidb_msg::Error_ParsingContext& parsing_context() const;
  inline ::scidb_msg::Error_ParsingContext* mutable_parsing_context();
  inline ::scidb_msg::Error_ParsingContext* release_parsing_context();
  
  // optional string cluster_uuid = 12;
  inline bool has_cluster_uuid() const;
  inline void clear_cluster_uuid();
  static const int kClusterUuidFieldNumber = 12;
  inline const ::std::string& cluster_uuid() const;
  inline void set_cluster_uuid(const ::std::string& value);
  inline void set_cluster_uuid(const char* value);
  inline void set_cluster_uuid(const char* value, size_t size);
  inline ::std::string* mutable_cluster_uuid();
  inline ::std::string* release_cluster_uuid();
  
  // @@protoc_insertion_point(class_scope:scidb_msg.Error)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_file();
  inline void clear_has_file();
  inline void set_has_function();
  inline void clear_has_function();
  inline void set_has_line();
  inline void clear_has_line();
  inline void set_has_what_str();
  inline void clear_has_what_str();
  inline void set_has_errors_namespace();
  inline void clear_has_errors_namespace();
  inline void set_has_short_error_code();
  inline void clear_has_short_error_code();
  inline void set_has_long_error_code();
  inline void clear_has_long_error_code();
  inline void set_has_stringified_short_error_code();
  inline void clear_has_stringified_short_error_code();
  inline void set_has_stringified_long_error_code();
  inline void clear_has_stringified_long_error_code();
  inline void set_has_parsing_context();
  inline void clear_has_parsing_context();
  inline void set_has_cluster_uuid();
  inline void clear_has_cluster_uuid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* file_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 line_;
  ::std::string* function_;
  ::std::string* what_str_;
  ::std::string* errors_namespace_;
  ::google::protobuf::int32 short_error_code_;
  ::google::protobuf::int32 long_error_code_;
  ::std::string* stringified_short_error_code_;
  ::std::string* stringified_long_error_code_;
  ::scidb_msg::Error_ParsingContext* parsing_context_;
  ::std::string* cluster_uuid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();
  
  void InitAsDefaultInstance();
  static Error* default_instance_;
};
// -------------------------------------------------------------------

class DummyQuery : public ::google::protobuf::Message {
 public:
  DummyQuery();
  virtual ~DummyQuery();
  
  DummyQuery(const DummyQuery& from);
  
  inline DummyQuery& operator=(const DummyQuery& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DummyQuery& default_instance();
  
  void Swap(DummyQuery* other);
  
  // implements Message ----------------------------------------------
  
  DummyQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DummyQuery& from);
  void MergeFrom(const DummyQuery& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 payload_id = 2;
  inline bool has_payload_id() const;
  inline void clear_payload_id();
  static const int kPayloadIdFieldNumber = 2;
  inline ::google::protobuf::uint64 payload_id() const;
  inline void set_payload_id(::google::protobuf::uint64 value);
  
  // optional string cluster_uuid = 3;
  inline bool has_cluster_uuid() const;
  inline void clear_cluster_uuid();
  static const int kClusterUuidFieldNumber = 3;
  inline const ::std::string& cluster_uuid() const;
  inline void set_cluster_uuid(const ::std::string& value);
  inline void set_cluster_uuid(const char* value);
  inline void set_cluster_uuid(const char* value, size_t size);
  inline ::std::string* mutable_cluster_uuid();
  inline ::std::string* release_cluster_uuid();
  
  // @@protoc_insertion_point(class_scope:scidb_msg.DummyQuery)
 private:
  inline void set_has_payload_id();
  inline void clear_has_payload_id();
  inline void set_has_cluster_uuid();
  inline void clear_has_cluster_uuid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 payload_id_;
  ::std::string* cluster_uuid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();
  
  void InitAsDefaultInstance();
  static DummyQuery* default_instance_;
};
// -------------------------------------------------------------------

class ResourcesFileExistsRequest : public ::google::protobuf::Message {
 public:
  ResourcesFileExistsRequest();
  virtual ~ResourcesFileExistsRequest();
  
  ResourcesFileExistsRequest(const ResourcesFileExistsRequest& from);
  
  inline ResourcesFileExistsRequest& operator=(const ResourcesFileExistsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResourcesFileExistsRequest& default_instance();
  
  void Swap(ResourcesFileExistsRequest* other);
  
  // implements Message ----------------------------------------------
  
  ResourcesFileExistsRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResourcesFileExistsRequest& from);
  void MergeFrom(const ResourcesFileExistsRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 resource_request_id = 1;
  inline bool has_resource_request_id() const;
  inline void clear_resource_request_id();
  static const int kResourceRequestIdFieldNumber = 1;
  inline ::google::protobuf::uint64 resource_request_id() const;
  inline void set_resource_request_id(::google::protobuf::uint64 value);
  
  // required string file_path = 2;
  inline bool has_file_path() const;
  inline void clear_file_path();
  static const int kFilePathFieldNumber = 2;
  inline const ::std::string& file_path() const;
  inline void set_file_path(const ::std::string& value);
  inline void set_file_path(const char* value);
  inline void set_file_path(const char* value, size_t size);
  inline ::std::string* mutable_file_path();
  inline ::std::string* release_file_path();
  
  // @@protoc_insertion_point(class_scope:scidb_msg.ResourcesFileExistsRequest)
 private:
  inline void set_has_resource_request_id();
  inline void clear_has_resource_request_id();
  inline void set_has_file_path();
  inline void clear_has_file_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 resource_request_id_;
  ::std::string* file_path_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();
  
  void InitAsDefaultInstance();
  static ResourcesFileExistsRequest* default_instance_;
};
// -------------------------------------------------------------------

class ResourcesFileExistsResponse : public ::google::protobuf::Message {
 public:
  ResourcesFileExistsResponse();
  virtual ~ResourcesFileExistsResponse();
  
  ResourcesFileExistsResponse(const ResourcesFileExistsResponse& from);
  
  inline ResourcesFileExistsResponse& operator=(const ResourcesFileExistsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResourcesFileExistsResponse& default_instance();
  
  void Swap(ResourcesFileExistsResponse* other);
  
  // implements Message ----------------------------------------------
  
  ResourcesFileExistsResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResourcesFileExistsResponse& from);
  void MergeFrom(const ResourcesFileExistsResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 resource_request_id = 1;
  inline bool has_resource_request_id() const;
  inline void clear_resource_request_id();
  static const int kResourceRequestIdFieldNumber = 1;
  inline ::google::protobuf::uint64 resource_request_id() const;
  inline void set_resource_request_id(::google::protobuf::uint64 value);
  
  // required bool exits_flag = 2;
  inline bool has_exits_flag() const;
  inline void clear_exits_flag();
  static const int kExitsFlagFieldNumber = 2;
  inline bool exits_flag() const;
  inline void set_exits_flag(bool value);
  
  // @@protoc_insertion_point(class_scope:scidb_msg.ResourcesFileExistsResponse)
 private:
  inline void set_has_resource_request_id();
  inline void clear_has_resource_request_id();
  inline void set_has_exits_flag();
  inline void clear_has_exits_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 resource_request_id_;
  bool exits_flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();
  
  void InitAsDefaultInstance();
  static ResourcesFileExistsResponse* default_instance_;
};
// -------------------------------------------------------------------

class Control_Channel : public ::google::protobuf::Message {
 public:
  Control_Channel();
  virtual ~Control_Channel();
  
  Control_Channel(const Control_Channel& from);
  
  inline Control_Channel& operator=(const Control_Channel& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Control_Channel& default_instance();
  
  void Swap(Control_Channel* other);
  
  // implements Message ----------------------------------------------
  
  Control_Channel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Control_Channel& from);
  void MergeFrom(const Control_Channel& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required uint64 available = 2;
  inline bool has_available() const;
  inline void clear_available();
  static const int kAvailableFieldNumber = 2;
  inline ::google::protobuf::uint64 available() const;
  inline void set_available(::google::protobuf::uint64 value);
  
  // required uint64 local_sn = 3;
  inline bool has_local_sn() const;
  inline void clear_local_sn();
  static const int kLocalSnFieldNumber = 3;
  inline ::google::protobuf::uint64 local_sn() const;
  inline void set_local_sn(::google::protobuf::uint64 value);
  
  // required uint64 remote_sn = 4;
  inline bool has_remote_sn() const;
  inline void clear_remote_sn();
  static const int kRemoteSnFieldNumber = 4;
  inline ::google::protobuf::uint64 remote_sn() const;
  inline void set_remote_sn(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:scidb_msg.Control.Channel)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_available();
  inline void clear_has_available();
  inline void set_has_local_sn();
  inline void clear_has_local_sn();
  inline void set_has_remote_sn();
  inline void clear_has_remote_sn();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 available_;
  ::google::protobuf::uint64 local_sn_;
  ::google::protobuf::uint64 remote_sn_;
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();
  
  void InitAsDefaultInstance();
  static Control_Channel* default_instance_;
};
// -------------------------------------------------------------------

class Control : public ::google::protobuf::Message {
 public:
  Control();
  virtual ~Control();
  
  Control(const Control& from);
  
  inline Control& operator=(const Control& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Control& default_instance();
  
  void Swap(Control* other);
  
  // implements Message ----------------------------------------------
  
  Control* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Control& from);
  void MergeFrom(const Control& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Control_Channel Channel;
  
  // accessors -------------------------------------------------------
  
  // required uint64 local_gen_id = 1;
  inline bool has_local_gen_id() const;
  inline void clear_local_gen_id();
  static const int kLocalGenIdFieldNumber = 1;
  inline ::google::protobuf::uint64 local_gen_id() const;
  inline void set_local_gen_id(::google::protobuf::uint64 value);
  
  // required uint64 remote_gen_id = 2;
  inline bool has_remote_gen_id() const;
  inline void clear_remote_gen_id();
  static const int kRemoteGenIdFieldNumber = 2;
  inline ::google::protobuf::uint64 remote_gen_id() const;
  inline void set_remote_gen_id(::google::protobuf::uint64 value);
  
  // repeated .scidb_msg.Control.Channel channels = 3;
  inline int channels_size() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 3;
  inline const ::scidb_msg::Control_Channel& channels(int index) const;
  inline ::scidb_msg::Control_Channel* mutable_channels(int index);
  inline ::scidb_msg::Control_Channel* add_channels();
  inline const ::google::protobuf::RepeatedPtrField< ::scidb_msg::Control_Channel >&
      channels() const;
  inline ::google::protobuf::RepeatedPtrField< ::scidb_msg::Control_Channel >*
      mutable_channels();
  
  // @@protoc_insertion_point(class_scope:scidb_msg.Control)
 private:
  inline void set_has_local_gen_id();
  inline void clear_has_local_gen_id();
  inline void set_has_remote_gen_id();
  inline void clear_has_remote_gen_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 local_gen_id_;
  ::google::protobuf::uint64 remote_gen_id_;
  ::google::protobuf::RepeatedPtrField< ::scidb_msg::Control_Channel > channels_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();
  
  void InitAsDefaultInstance();
  static Control* default_instance_;
};
// -------------------------------------------------------------------

class MpiSlaveHandshake : public ::google::protobuf::Message {
 public:
  MpiSlaveHandshake();
  virtual ~MpiSlaveHandshake();
  
  MpiSlaveHandshake(const MpiSlaveHandshake& from);
  
  inline MpiSlaveHandshake& operator=(const MpiSlaveHandshake& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpiSlaveHandshake& default_instance();
  
  void Swap(MpiSlaveHandshake* other);
  
  // implements Message ----------------------------------------------
  
  MpiSlaveHandshake* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MpiSlaveHandshake& from);
  void MergeFrom(const MpiSlaveHandshake& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string cluster_uuid = 1;
  inline bool has_cluster_uuid() const;
  inline void clear_cluster_uuid();
  static const int kClusterUuidFieldNumber = 1;
  inline const ::std::string& cluster_uuid() const;
  inline void set_cluster_uuid(const ::std::string& value);
  inline void set_cluster_uuid(const char* value);
  inline void set_cluster_uuid(const char* value, size_t size);
  inline ::std::string* mutable_cluster_uuid();
  inline ::std::string* release_cluster_uuid();
  
  // required uint64 instance_id = 2;
  inline bool has_instance_id() const;
  inline void clear_instance_id();
  static const int kInstanceIdFieldNumber = 2;
  inline ::google::protobuf::uint64 instance_id() const;
  inline void set_instance_id(::google::protobuf::uint64 value);
  
  // required uint64 launch_id = 3;
  inline bool has_launch_id() const;
  inline void clear_launch_id();
  static const int kLaunchIdFieldNumber = 3;
  inline ::google::protobuf::uint64 launch_id() const;
  inline void set_launch_id(::google::protobuf::uint64 value);
  
  // required uint64 rank = 4;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 4;
  inline ::google::protobuf::uint64 rank() const;
  inline void set_rank(::google::protobuf::uint64 value);
  
  // required int32 pid = 5;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 5;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);
  
  // required int32 ppid = 6;
  inline bool has_ppid() const;
  inline void clear_ppid();
  static const int kPpidFieldNumber = 6;
  inline ::google::protobuf::int32 ppid() const;
  inline void set_ppid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:scidb_msg.MpiSlaveHandshake)
 private:
  inline void set_has_cluster_uuid();
  inline void clear_has_cluster_uuid();
  inline void set_has_instance_id();
  inline void clear_has_instance_id();
  inline void set_has_launch_id();
  inline void clear_has_launch_id();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_ppid();
  inline void clear_has_ppid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* cluster_uuid_;
  ::google::protobuf::uint64 instance_id_;
  ::google::protobuf::uint64 launch_id_;
  ::google::protobuf::uint64 rank_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 ppid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();
  
  void InitAsDefaultInstance();
  static MpiSlaveHandshake* default_instance_;
};
// -------------------------------------------------------------------

class MpiSlaveResult : public ::google::protobuf::Message {
 public:
  MpiSlaveResult();
  virtual ~MpiSlaveResult();
  
  MpiSlaveResult(const MpiSlaveResult& from);
  
  inline MpiSlaveResult& operator=(const MpiSlaveResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpiSlaveResult& default_instance();
  
  void Swap(MpiSlaveResult* other);
  
  // implements Message ----------------------------------------------
  
  MpiSlaveResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MpiSlaveResult& from);
  void MergeFrom(const MpiSlaveResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 launch_id = 1;
  inline bool has_launch_id() const;
  inline void clear_launch_id();
  static const int kLaunchIdFieldNumber = 1;
  inline ::google::protobuf::uint64 launch_id() const;
  inline void set_launch_id(::google::protobuf::uint64 value);
  
  // required int64 status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::int64 status() const;
  inline void set_status(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:scidb_msg.MpiSlaveResult)
 private:
  inline void set_has_launch_id();
  inline void clear_has_launch_id();
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 launch_id_;
  ::google::protobuf::int64 status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();
  
  void InitAsDefaultInstance();
  static MpiSlaveResult* default_instance_;
};
// -------------------------------------------------------------------

class MpiSlaveCommand : public ::google::protobuf::Message {
 public:
  MpiSlaveCommand();
  virtual ~MpiSlaveCommand();
  
  MpiSlaveCommand(const MpiSlaveCommand& from);
  
  inline MpiSlaveCommand& operator=(const MpiSlaveCommand& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpiSlaveCommand& default_instance();
  
  void Swap(MpiSlaveCommand* other);
  
  // implements Message ----------------------------------------------
  
  MpiSlaveCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MpiSlaveCommand& from);
  void MergeFrom(const MpiSlaveCommand& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string command = 1;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline const ::std::string& command() const;
  inline void set_command(const ::std::string& value);
  inline void set_command(const char* value);
  inline void set_command(const char* value, size_t size);
  inline ::std::string* mutable_command();
  inline ::std::string* release_command();
  
  // repeated string args = 2;
  inline int args_size() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 2;
  inline const ::std::string& args(int index) const;
  inline ::std::string* mutable_args(int index);
  inline void set_args(int index, const ::std::string& value);
  inline void set_args(int index, const char* value);
  inline void set_args(int index, const char* value, size_t size);
  inline ::std::string* add_args();
  inline void add_args(const ::std::string& value);
  inline void add_args(const char* value);
  inline void add_args(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& args() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_args();
  
  // @@protoc_insertion_point(class_scope:scidb_msg.MpiSlaveCommand)
 private:
  inline void set_has_command();
  inline void clear_has_command();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* command_;
  ::google::protobuf::RepeatedPtrField< ::std::string> args_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();
  
  void InitAsDefaultInstance();
  static MpiSlaveCommand* default_instance_;
};
// -------------------------------------------------------------------

class NewClientStart : public ::google::protobuf::Message {
 public:
  NewClientStart();
  virtual ~NewClientStart();
  
  NewClientStart(const NewClientStart& from);
  
  inline NewClientStart& operator=(const NewClientStart& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NewClientStart& default_instance();
  
  void Swap(NewClientStart* other);
  
  // implements Message ----------------------------------------------
  
  NewClientStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewClientStart& from);
  void MergeFrom(const NewClientStart& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:scidb_msg.NewClientStart)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();
  
  void InitAsDefaultInstance();
  static NewClientStart* default_instance_;
};
// -------------------------------------------------------------------

class NewClientComplete : public ::google::protobuf::Message {
 public:
  NewClientComplete();
  virtual ~NewClientComplete();
  
  NewClientComplete(const NewClientComplete& from);
  
  inline NewClientComplete& operator=(const NewClientComplete& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NewClientComplete& default_instance();
  
  void Swap(NewClientComplete* other);
  
  // implements Message ----------------------------------------------
  
  NewClientComplete* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewClientComplete& from);
  void MergeFrom(const NewClientComplete& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool authenticated = 1;
  inline bool has_authenticated() const;
  inline void clear_authenticated();
  static const int kAuthenticatedFieldNumber = 1;
  inline bool authenticated() const;
  inline void set_authenticated(bool value);
  
  // @@protoc_insertion_point(class_scope:scidb_msg.NewClientComplete)
 private:
  inline void set_has_authenticated();
  inline void clear_has_authenticated();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool authenticated_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();
  
  void InitAsDefaultInstance();
  static NewClientComplete* default_instance_;
};
// -------------------------------------------------------------------

class SecurityMessage : public ::google::protobuf::Message {
 public:
  SecurityMessage();
  virtual ~SecurityMessage();
  
  SecurityMessage(const SecurityMessage& from);
  
  inline SecurityMessage& operator=(const SecurityMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SecurityMessage& default_instance();
  
  void Swap(SecurityMessage* other);
  
  // implements Message ----------------------------------------------
  
  SecurityMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SecurityMessage& from);
  void MergeFrom(const SecurityMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 msg_type = 1;
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 1;
  inline ::google::protobuf::int32 msg_type() const;
  inline void set_msg_type(::google::protobuf::int32 value);
  
  // required string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  
  // @@protoc_insertion_point(class_scope:scidb_msg.SecurityMessage)
 private:
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_msg();
  inline void clear_has_msg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* msg_;
  ::google::protobuf::int32 msg_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();
  
  void InitAsDefaultInstance();
  static SecurityMessage* default_instance_;
};
// -------------------------------------------------------------------

class SecurityMessageResponse : public ::google::protobuf::Message {
 public:
  SecurityMessageResponse();
  virtual ~SecurityMessageResponse();
  
  SecurityMessageResponse(const SecurityMessageResponse& from);
  
  inline SecurityMessageResponse& operator=(const SecurityMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SecurityMessageResponse& default_instance();
  
  void Swap(SecurityMessageResponse* other);
  
  // implements Message ----------------------------------------------
  
  SecurityMessageResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SecurityMessageResponse& from);
  void MergeFrom(const SecurityMessageResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string response = 1;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 1;
  inline const ::std::string& response() const;
  inline void set_response(const ::std::string& value);
  inline void set_response(const char* value);
  inline void set_response(const char* value, size_t size);
  inline ::std::string* mutable_response();
  inline ::std::string* release_response();
  
  // @@protoc_insertion_point(class_scope:scidb_msg.SecurityMessageResponse)
 private:
  inline void set_has_response();
  inline void clear_has_response();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* response_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto();
  
  void InitAsDefaultInstance();
  static SecurityMessageResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// Query

// required string query = 1;
inline bool Query::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Query::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Query::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Query::clear_query() {
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    query_->clear();
  }
  clear_has_query();
}
inline const ::std::string& Query::query() const {
  return *query_;
}
inline void Query::set_query(const ::std::string& value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(value);
}
inline void Query::set_query(const char* value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(value);
}
inline void Query::set_query(const char* value, size_t size) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Query::mutable_query() {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  return query_;
}
inline ::std::string* Query::release_query() {
  clear_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = query_;
    query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool afl = 2 [default = false];
inline bool Query::has_afl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Query::set_has_afl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Query::clear_has_afl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Query::clear_afl() {
  afl_ = false;
  clear_has_afl();
}
inline bool Query::afl() const {
  return afl_;
}
inline void Query::set_afl(bool value) {
  set_has_afl();
  afl_ = value;
}

// optional string program_options = 3 [default = "unknown"];
inline bool Query::has_program_options() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Query::set_has_program_options() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Query::clear_has_program_options() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Query::clear_program_options() {
  if (program_options_ != &_default_program_options_) {
    program_options_->assign(_default_program_options_);
  }
  clear_has_program_options();
}
inline const ::std::string& Query::program_options() const {
  return *program_options_;
}
inline void Query::set_program_options(const ::std::string& value) {
  set_has_program_options();
  if (program_options_ == &_default_program_options_) {
    program_options_ = new ::std::string;
  }
  program_options_->assign(value);
}
inline void Query::set_program_options(const char* value) {
  set_has_program_options();
  if (program_options_ == &_default_program_options_) {
    program_options_ = new ::std::string;
  }
  program_options_->assign(value);
}
inline void Query::set_program_options(const char* value, size_t size) {
  set_has_program_options();
  if (program_options_ == &_default_program_options_) {
    program_options_ = new ::std::string;
  }
  program_options_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Query::mutable_program_options() {
  set_has_program_options();
  if (program_options_ == &_default_program_options_) {
    program_options_ = new ::std::string(_default_program_options_);
  }
  return program_options_;
}
inline ::std::string* Query::release_program_options() {
  clear_has_program_options();
  if (program_options_ == &_default_program_options_) {
    return NULL;
  } else {
    ::std::string* temp = program_options_;
    program_options_ = const_cast< ::std::string*>(&_default_program_options_);
    return temp;
  }
}

// -------------------------------------------------------------------

// Fetch

// optional uint32 attribute_id = 2;
inline bool Fetch::has_attribute_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fetch::set_has_attribute_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fetch::clear_has_attribute_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fetch::clear_attribute_id() {
  attribute_id_ = 0u;
  clear_has_attribute_id();
}
inline ::google::protobuf::uint32 Fetch::attribute_id() const {
  return attribute_id_;
}
inline void Fetch::set_attribute_id(::google::protobuf::uint32 value) {
  set_has_attribute_id();
  attribute_id_ = value;
}

// optional bool position_only = 3;
inline bool Fetch::has_position_only() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fetch::set_has_position_only() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fetch::clear_has_position_only() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fetch::clear_position_only() {
  position_only_ = false;
  clear_has_position_only();
}
inline bool Fetch::position_only() const {
  return position_only_;
}
inline void Fetch::set_position_only(bool value) {
  set_has_position_only();
  position_only_ = value;
}

// optional uint32 obj_type = 4;
inline bool Fetch::has_obj_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fetch::set_has_obj_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fetch::clear_has_obj_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fetch::clear_obj_type() {
  obj_type_ = 0u;
  clear_has_obj_type();
}
inline ::google::protobuf::uint32 Fetch::obj_type() const {
  return obj_type_;
}
inline void Fetch::set_obj_type(::google::protobuf::uint32 value) {
  set_has_obj_type();
  obj_type_ = value;
}

// optional string array_name = 5;
inline bool Fetch::has_array_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Fetch::set_has_array_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Fetch::clear_has_array_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Fetch::clear_array_name() {
  if (array_name_ != &::google::protobuf::internal::kEmptyString) {
    array_name_->clear();
  }
  clear_has_array_name();
}
inline const ::std::string& Fetch::array_name() const {
  return *array_name_;
}
inline void Fetch::set_array_name(const ::std::string& value) {
  set_has_array_name();
  if (array_name_ == &::google::protobuf::internal::kEmptyString) {
    array_name_ = new ::std::string;
  }
  array_name_->assign(value);
}
inline void Fetch::set_array_name(const char* value) {
  set_has_array_name();
  if (array_name_ == &::google::protobuf::internal::kEmptyString) {
    array_name_ = new ::std::string;
  }
  array_name_->assign(value);
}
inline void Fetch::set_array_name(const char* value, size_t size) {
  set_has_array_name();
  if (array_name_ == &::google::protobuf::internal::kEmptyString) {
    array_name_ = new ::std::string;
  }
  array_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Fetch::mutable_array_name() {
  set_has_array_name();
  if (array_name_ == &::google::protobuf::internal::kEmptyString) {
    array_name_ = new ::std::string;
  }
  return array_name_;
}
inline ::std::string* Fetch::release_array_name() {
  clear_has_array_name();
  if (array_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = array_name_;
    array_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 prefetch_size = 6;
inline bool Fetch::has_prefetch_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Fetch::set_has_prefetch_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Fetch::clear_has_prefetch_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Fetch::clear_prefetch_size() {
  prefetch_size_ = 0u;
  clear_has_prefetch_size();
}
inline ::google::protobuf::uint32 Fetch::prefetch_size() const {
  return prefetch_size_;
}
inline void Fetch::set_prefetch_size(::google::protobuf::uint32 value) {
  set_has_prefetch_size();
  prefetch_size_ = value;
}

// optional uint64 fetch_id = 7;
inline bool Fetch::has_fetch_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Fetch::set_has_fetch_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Fetch::clear_has_fetch_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Fetch::clear_fetch_id() {
  fetch_id_ = GOOGLE_ULONGLONG(0);
  clear_has_fetch_id();
}
inline ::google::protobuf::uint64 Fetch::fetch_id() const {
  return fetch_id_;
}
inline void Fetch::set_fetch_id(::google::protobuf::uint64 value) {
  set_has_fetch_id();
  fetch_id_ = value;
}

// -------------------------------------------------------------------

// Chunk_Warning

// required int32 code = 1;
inline bool Chunk_Warning::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chunk_Warning::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chunk_Warning::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chunk_Warning::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 Chunk_Warning::code() const {
  return code_;
}
inline void Chunk_Warning::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// required string file = 2;
inline bool Chunk_Warning::has_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chunk_Warning::set_has_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chunk_Warning::clear_has_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chunk_Warning::clear_file() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    file_->clear();
  }
  clear_has_file();
}
inline const ::std::string& Chunk_Warning::file() const {
  return *file_;
}
inline void Chunk_Warning::set_file(const ::std::string& value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void Chunk_Warning::set_file(const char* value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void Chunk_Warning::set_file(const char* value, size_t size) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Chunk_Warning::mutable_file() {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  return file_;
}
inline ::std::string* Chunk_Warning::release_file() {
  clear_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_;
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string function = 3;
inline bool Chunk_Warning::has_function() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Chunk_Warning::set_has_function() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Chunk_Warning::clear_has_function() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Chunk_Warning::clear_function() {
  if (function_ != &::google::protobuf::internal::kEmptyString) {
    function_->clear();
  }
  clear_has_function();
}
inline const ::std::string& Chunk_Warning::function() const {
  return *function_;
}
inline void Chunk_Warning::set_function(const ::std::string& value) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::kEmptyString) {
    function_ = new ::std::string;
  }
  function_->assign(value);
}
inline void Chunk_Warning::set_function(const char* value) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::kEmptyString) {
    function_ = new ::std::string;
  }
  function_->assign(value);
}
inline void Chunk_Warning::set_function(const char* value, size_t size) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::kEmptyString) {
    function_ = new ::std::string;
  }
  function_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Chunk_Warning::mutable_function() {
  set_has_function();
  if (function_ == &::google::protobuf::internal::kEmptyString) {
    function_ = new ::std::string;
  }
  return function_;
}
inline ::std::string* Chunk_Warning::release_function() {
  clear_has_function();
  if (function_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = function_;
    function_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 line = 4;
inline bool Chunk_Warning::has_line() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Chunk_Warning::set_has_line() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Chunk_Warning::clear_has_line() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Chunk_Warning::clear_line() {
  line_ = 0;
  clear_has_line();
}
inline ::google::protobuf::int32 Chunk_Warning::line() const {
  return line_;
}
inline void Chunk_Warning::set_line(::google::protobuf::int32 value) {
  set_has_line();
  line_ = value;
}

// required string what_str = 5;
inline bool Chunk_Warning::has_what_str() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Chunk_Warning::set_has_what_str() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Chunk_Warning::clear_has_what_str() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Chunk_Warning::clear_what_str() {
  if (what_str_ != &::google::protobuf::internal::kEmptyString) {
    what_str_->clear();
  }
  clear_has_what_str();
}
inline const ::std::string& Chunk_Warning::what_str() const {
  return *what_str_;
}
inline void Chunk_Warning::set_what_str(const ::std::string& value) {
  set_has_what_str();
  if (what_str_ == &::google::protobuf::internal::kEmptyString) {
    what_str_ = new ::std::string;
  }
  what_str_->assign(value);
}
inline void Chunk_Warning::set_what_str(const char* value) {
  set_has_what_str();
  if (what_str_ == &::google::protobuf::internal::kEmptyString) {
    what_str_ = new ::std::string;
  }
  what_str_->assign(value);
}
inline void Chunk_Warning::set_what_str(const char* value, size_t size) {
  set_has_what_str();
  if (what_str_ == &::google::protobuf::internal::kEmptyString) {
    what_str_ = new ::std::string;
  }
  what_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Chunk_Warning::mutable_what_str() {
  set_has_what_str();
  if (what_str_ == &::google::protobuf::internal::kEmptyString) {
    what_str_ = new ::std::string;
  }
  return what_str_;
}
inline ::std::string* Chunk_Warning::release_what_str() {
  clear_has_what_str();
  if (what_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = what_str_;
    what_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string stringified_code = 6;
inline bool Chunk_Warning::has_stringified_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Chunk_Warning::set_has_stringified_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Chunk_Warning::clear_has_stringified_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Chunk_Warning::clear_stringified_code() {
  if (stringified_code_ != &::google::protobuf::internal::kEmptyString) {
    stringified_code_->clear();
  }
  clear_has_stringified_code();
}
inline const ::std::string& Chunk_Warning::stringified_code() const {
  return *stringified_code_;
}
inline void Chunk_Warning::set_stringified_code(const ::std::string& value) {
  set_has_stringified_code();
  if (stringified_code_ == &::google::protobuf::internal::kEmptyString) {
    stringified_code_ = new ::std::string;
  }
  stringified_code_->assign(value);
}
inline void Chunk_Warning::set_stringified_code(const char* value) {
  set_has_stringified_code();
  if (stringified_code_ == &::google::protobuf::internal::kEmptyString) {
    stringified_code_ = new ::std::string;
  }
  stringified_code_->assign(value);
}
inline void Chunk_Warning::set_stringified_code(const char* value, size_t size) {
  set_has_stringified_code();
  if (stringified_code_ == &::google::protobuf::internal::kEmptyString) {
    stringified_code_ = new ::std::string;
  }
  stringified_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Chunk_Warning::mutable_stringified_code() {
  set_has_stringified_code();
  if (stringified_code_ == &::google::protobuf::internal::kEmptyString) {
    stringified_code_ = new ::std::string;
  }
  return stringified_code_;
}
inline ::std::string* Chunk_Warning::release_stringified_code() {
  clear_has_stringified_code();
  if (stringified_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stringified_code_;
    stringified_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string strings_namespace = 7;
inline bool Chunk_Warning::has_strings_namespace() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Chunk_Warning::set_has_strings_namespace() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Chunk_Warning::clear_has_strings_namespace() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Chunk_Warning::clear_strings_namespace() {
  if (strings_namespace_ != &::google::protobuf::internal::kEmptyString) {
    strings_namespace_->clear();
  }
  clear_has_strings_namespace();
}
inline const ::std::string& Chunk_Warning::strings_namespace() const {
  return *strings_namespace_;
}
inline void Chunk_Warning::set_strings_namespace(const ::std::string& value) {
  set_has_strings_namespace();
  if (strings_namespace_ == &::google::protobuf::internal::kEmptyString) {
    strings_namespace_ = new ::std::string;
  }
  strings_namespace_->assign(value);
}
inline void Chunk_Warning::set_strings_namespace(const char* value) {
  set_has_strings_namespace();
  if (strings_namespace_ == &::google::protobuf::internal::kEmptyString) {
    strings_namespace_ = new ::std::string;
  }
  strings_namespace_->assign(value);
}
inline void Chunk_Warning::set_strings_namespace(const char* value, size_t size) {
  set_has_strings_namespace();
  if (strings_namespace_ == &::google::protobuf::internal::kEmptyString) {
    strings_namespace_ = new ::std::string;
  }
  strings_namespace_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Chunk_Warning::mutable_strings_namespace() {
  set_has_strings_namespace();
  if (strings_namespace_ == &::google::protobuf::internal::kEmptyString) {
    strings_namespace_ = new ::std::string;
  }
  return strings_namespace_;
}
inline ::std::string* Chunk_Warning::release_strings_namespace() {
  clear_has_strings_namespace();
  if (strings_namespace_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strings_namespace_;
    strings_namespace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Chunk

// optional int32 compression_method = 1;
inline bool Chunk::has_compression_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chunk::set_has_compression_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chunk::clear_has_compression_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chunk::clear_compression_method() {
  compression_method_ = 0;
  clear_has_compression_method();
}
inline ::google::protobuf::int32 Chunk::compression_method() const {
  return compression_method_;
}
inline void Chunk::set_compression_method(::google::protobuf::int32 value) {
  set_has_compression_method();
  compression_method_ = value;
}

// repeated int64 coordinates = 2;
inline int Chunk::coordinates_size() const {
  return coordinates_.size();
}
inline void Chunk::clear_coordinates() {
  coordinates_.Clear();
}
inline ::google::protobuf::int64 Chunk::coordinates(int index) const {
  return coordinates_.Get(index);
}
inline void Chunk::set_coordinates(int index, ::google::protobuf::int64 value) {
  coordinates_.Set(index, value);
}
inline void Chunk::add_coordinates(::google::protobuf::int64 value) {
  coordinates_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Chunk::coordinates() const {
  return coordinates_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Chunk::mutable_coordinates() {
  return &coordinates_;
}

// optional uint64 array_id = 3;
inline bool Chunk::has_array_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Chunk::set_has_array_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Chunk::clear_has_array_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Chunk::clear_array_id() {
  array_id_ = GOOGLE_ULONGLONG(0);
  clear_has_array_id();
}
inline ::google::protobuf::uint64 Chunk::array_id() const {
  return array_id_;
}
inline void Chunk::set_array_id(::google::protobuf::uint64 value) {
  set_has_array_id();
  array_id_ = value;
}

// optional uint32 attribute_id = 4;
inline bool Chunk::has_attribute_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Chunk::set_has_attribute_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Chunk::clear_has_attribute_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Chunk::clear_attribute_id() {
  attribute_id_ = 0u;
  clear_has_attribute_id();
}
inline ::google::protobuf::uint32 Chunk::attribute_id() const {
  return attribute_id_;
}
inline void Chunk::set_attribute_id(::google::protobuf::uint32 value) {
  set_has_attribute_id();
  attribute_id_ = value;
}

// required bool eof = 5;
inline bool Chunk::has_eof() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Chunk::set_has_eof() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Chunk::clear_has_eof() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Chunk::clear_eof() {
  eof_ = false;
  clear_has_eof();
}
inline bool Chunk::eof() const {
  return eof_;
}
inline void Chunk::set_eof(bool value) {
  set_has_eof();
  eof_ = value;
}

// optional bool sparse = 6;
inline bool Chunk::has_sparse() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Chunk::set_has_sparse() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Chunk::clear_has_sparse() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Chunk::clear_sparse() {
  sparse_ = false;
  clear_has_sparse();
}
inline bool Chunk::sparse() const {
  return sparse_;
}
inline void Chunk::set_sparse(bool value) {
  set_has_sparse();
  sparse_ = value;
}

// optional bool rle = 7;
inline bool Chunk::has_rle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Chunk::set_has_rle() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Chunk::clear_has_rle() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Chunk::clear_rle() {
  rle_ = false;
  clear_has_rle();
}
inline bool Chunk::rle() const {
  return rle_;
}
inline void Chunk::set_rle(bool value) {
  set_has_rle();
  rle_ = value;
}

// optional uint64 decompressed_size = 8;
inline bool Chunk::has_decompressed_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Chunk::set_has_decompressed_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Chunk::clear_has_decompressed_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Chunk::clear_decompressed_size() {
  decompressed_size_ = GOOGLE_ULONGLONG(0);
  clear_has_decompressed_size();
}
inline ::google::protobuf::uint64 Chunk::decompressed_size() const {
  return decompressed_size_;
}
inline void Chunk::set_decompressed_size(::google::protobuf::uint64 value) {
  set_has_decompressed_size();
  decompressed_size_ = value;
}

// optional bool has_next = 9;
inline bool Chunk::has_has_next() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Chunk::set_has_has_next() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Chunk::clear_has_has_next() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Chunk::clear_has_next() {
  has_next_ = false;
  clear_has_has_next();
}
inline bool Chunk::has_next() const {
  return has_next_;
}
inline void Chunk::set_has_next(bool value) {
  set_has_has_next();
  has_next_ = value;
}

// repeated int64 next_coordinates = 10;
inline int Chunk::next_coordinates_size() const {
  return next_coordinates_.size();
}
inline void Chunk::clear_next_coordinates() {
  next_coordinates_.Clear();
}
inline ::google::protobuf::int64 Chunk::next_coordinates(int index) const {
  return next_coordinates_.Get(index);
}
inline void Chunk::set_next_coordinates(int index, ::google::protobuf::int64 value) {
  next_coordinates_.Set(index, value);
}
inline void Chunk::add_next_coordinates(::google::protobuf::int64 value) {
  next_coordinates_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Chunk::next_coordinates() const {
  return next_coordinates_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Chunk::mutable_next_coordinates() {
  return &next_coordinates_;
}

// optional uint32 obj_type = 11;
inline bool Chunk::has_obj_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Chunk::set_has_obj_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Chunk::clear_has_obj_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Chunk::clear_obj_type() {
  obj_type_ = 0u;
  clear_has_obj_type();
}
inline ::google::protobuf::uint32 Chunk::obj_type() const {
  return obj_type_;
}
inline void Chunk::set_obj_type(::google::protobuf::uint32 value) {
  set_has_obj_type();
  obj_type_ = value;
}

// optional uint64 count = 12;
inline bool Chunk::has_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Chunk::set_has_count() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Chunk::clear_has_count() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Chunk::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
  clear_has_count();
}
inline ::google::protobuf::uint64 Chunk::count() const {
  return count_;
}
inline void Chunk::set_count(::google::protobuf::uint64 value) {
  set_has_count();
  count_ = value;
}

// optional bool tombstone = 13 [default = false];
inline bool Chunk::has_tombstone() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Chunk::set_has_tombstone() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Chunk::clear_has_tombstone() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Chunk::clear_tombstone() {
  tombstone_ = false;
  clear_has_tombstone();
}
inline bool Chunk::tombstone() const {
  return tombstone_;
}
inline void Chunk::set_tombstone(bool value) {
  set_has_tombstone();
  tombstone_ = value;
}

// optional uint64 dest_instance = 14;
inline bool Chunk::has_dest_instance() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Chunk::set_has_dest_instance() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Chunk::clear_has_dest_instance() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Chunk::clear_dest_instance() {
  dest_instance_ = GOOGLE_ULONGLONG(0);
  clear_has_dest_instance();
}
inline ::google::protobuf::uint64 Chunk::dest_instance() const {
  return dest_instance_;
}
inline void Chunk::set_dest_instance(::google::protobuf::uint64 value) {
  set_has_dest_instance();
  dest_instance_ = value;
}

// optional uint64 next_dest_instance = 15;
inline bool Chunk::has_next_dest_instance() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Chunk::set_has_next_dest_instance() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Chunk::clear_has_next_dest_instance() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Chunk::clear_next_dest_instance() {
  next_dest_instance_ = GOOGLE_ULONGLONG(0);
  clear_has_next_dest_instance();
}
inline ::google::protobuf::uint64 Chunk::next_dest_instance() const {
  return next_dest_instance_;
}
inline void Chunk::set_next_dest_instance(::google::protobuf::uint64 value) {
  set_has_next_dest_instance();
  next_dest_instance_ = value;
}

// optional uint64 fetch_id = 16;
inline bool Chunk::has_fetch_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Chunk::set_has_fetch_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Chunk::clear_has_fetch_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Chunk::clear_fetch_id() {
  fetch_id_ = GOOGLE_ULONGLONG(0);
  clear_has_fetch_id();
}
inline ::google::protobuf::uint64 Chunk::fetch_id() const {
  return fetch_id_;
}
inline void Chunk::set_fetch_id(::google::protobuf::uint64 value) {
  set_has_fetch_id();
  fetch_id_ = value;
}

// repeated .scidb_msg.Chunk.Warning warnings = 17;
inline int Chunk::warnings_size() const {
  return warnings_.size();
}
inline void Chunk::clear_warnings() {
  warnings_.Clear();
}
inline const ::scidb_msg::Chunk_Warning& Chunk::warnings(int index) const {
  return warnings_.Get(index);
}
inline ::scidb_msg::Chunk_Warning* Chunk::mutable_warnings(int index) {
  return warnings_.Mutable(index);
}
inline ::scidb_msg::Chunk_Warning* Chunk::add_warnings() {
  return warnings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::scidb_msg::Chunk_Warning >&
Chunk::warnings() const {
  return warnings_;
}
inline ::google::protobuf::RepeatedPtrField< ::scidb_msg::Chunk_Warning >*
Chunk::mutable_warnings() {
  return &warnings_;
}

// -------------------------------------------------------------------

// QueryResult_AttributeDesc

// required uint32 id = 1;
inline bool QueryResult_AttributeDesc::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryResult_AttributeDesc::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryResult_AttributeDesc::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryResult_AttributeDesc::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 QueryResult_AttributeDesc::id() const {
  return id_;
}
inline void QueryResult_AttributeDesc::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool QueryResult_AttributeDesc::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryResult_AttributeDesc::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryResult_AttributeDesc::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryResult_AttributeDesc::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& QueryResult_AttributeDesc::name() const {
  return *name_;
}
inline void QueryResult_AttributeDesc::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void QueryResult_AttributeDesc::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void QueryResult_AttributeDesc::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryResult_AttributeDesc::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* QueryResult_AttributeDesc::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string type = 3;
inline bool QueryResult_AttributeDesc::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryResult_AttributeDesc::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryResult_AttributeDesc::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryResult_AttributeDesc::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& QueryResult_AttributeDesc::type() const {
  return *type_;
}
inline void QueryResult_AttributeDesc::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void QueryResult_AttributeDesc::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void QueryResult_AttributeDesc::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryResult_AttributeDesc::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* QueryResult_AttributeDesc::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 flags = 4;
inline bool QueryResult_AttributeDesc::has_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryResult_AttributeDesc::set_has_flags() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryResult_AttributeDesc::clear_has_flags() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryResult_AttributeDesc::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 QueryResult_AttributeDesc::flags() const {
  return flags_;
}
inline void QueryResult_AttributeDesc::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
}

// required uint32 default_compression_method = 5;
inline bool QueryResult_AttributeDesc::has_default_compression_method() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryResult_AttributeDesc::set_has_default_compression_method() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryResult_AttributeDesc::clear_has_default_compression_method() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryResult_AttributeDesc::clear_default_compression_method() {
  default_compression_method_ = 0u;
  clear_has_default_compression_method();
}
inline ::google::protobuf::uint32 QueryResult_AttributeDesc::default_compression_method() const {
  return default_compression_method_;
}
inline void QueryResult_AttributeDesc::set_default_compression_method(::google::protobuf::uint32 value) {
  set_has_default_compression_method();
  default_compression_method_ = value;
}

// required int32 default_missing_reason = 6;
inline bool QueryResult_AttributeDesc::has_default_missing_reason() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QueryResult_AttributeDesc::set_has_default_missing_reason() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QueryResult_AttributeDesc::clear_has_default_missing_reason() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QueryResult_AttributeDesc::clear_default_missing_reason() {
  default_missing_reason_ = 0;
  clear_has_default_missing_reason();
}
inline ::google::protobuf::int32 QueryResult_AttributeDesc::default_missing_reason() const {
  return default_missing_reason_;
}
inline void QueryResult_AttributeDesc::set_default_missing_reason(::google::protobuf::int32 value) {
  set_has_default_missing_reason();
  default_missing_reason_ = value;
}

// required bytes default_value = 7;
inline bool QueryResult_AttributeDesc::has_default_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QueryResult_AttributeDesc::set_has_default_value() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QueryResult_AttributeDesc::clear_has_default_value() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QueryResult_AttributeDesc::clear_default_value() {
  if (default_value_ != &::google::protobuf::internal::kEmptyString) {
    default_value_->clear();
  }
  clear_has_default_value();
}
inline const ::std::string& QueryResult_AttributeDesc::default_value() const {
  return *default_value_;
}
inline void QueryResult_AttributeDesc::set_default_value(const ::std::string& value) {
  set_has_default_value();
  if (default_value_ == &::google::protobuf::internal::kEmptyString) {
    default_value_ = new ::std::string;
  }
  default_value_->assign(value);
}
inline void QueryResult_AttributeDesc::set_default_value(const char* value) {
  set_has_default_value();
  if (default_value_ == &::google::protobuf::internal::kEmptyString) {
    default_value_ = new ::std::string;
  }
  default_value_->assign(value);
}
inline void QueryResult_AttributeDesc::set_default_value(const void* value, size_t size) {
  set_has_default_value();
  if (default_value_ == &::google::protobuf::internal::kEmptyString) {
    default_value_ = new ::std::string;
  }
  default_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryResult_AttributeDesc::mutable_default_value() {
  set_has_default_value();
  if (default_value_ == &::google::protobuf::internal::kEmptyString) {
    default_value_ = new ::std::string;
  }
  return default_value_;
}
inline ::std::string* QueryResult_AttributeDesc::release_default_value() {
  clear_has_default_value();
  if (default_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = default_value_;
    default_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// QueryResult_DimensionDesc

// required string name = 1;
inline bool QueryResult_DimensionDesc::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryResult_DimensionDesc::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryResult_DimensionDesc::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryResult_DimensionDesc::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& QueryResult_DimensionDesc::name() const {
  return *name_;
}
inline void QueryResult_DimensionDesc::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void QueryResult_DimensionDesc::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void QueryResult_DimensionDesc::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryResult_DimensionDesc::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* QueryResult_DimensionDesc::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 start_min = 2;
inline bool QueryResult_DimensionDesc::has_start_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryResult_DimensionDesc::set_has_start_min() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryResult_DimensionDesc::clear_has_start_min() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryResult_DimensionDesc::clear_start_min() {
  start_min_ = GOOGLE_LONGLONG(0);
  clear_has_start_min();
}
inline ::google::protobuf::int64 QueryResult_DimensionDesc::start_min() const {
  return start_min_;
}
inline void QueryResult_DimensionDesc::set_start_min(::google::protobuf::int64 value) {
  set_has_start_min();
  start_min_ = value;
}

// required int64 curr_start = 3;
inline bool QueryResult_DimensionDesc::has_curr_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryResult_DimensionDesc::set_has_curr_start() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryResult_DimensionDesc::clear_has_curr_start() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryResult_DimensionDesc::clear_curr_start() {
  curr_start_ = GOOGLE_LONGLONG(0);
  clear_has_curr_start();
}
inline ::google::protobuf::int64 QueryResult_DimensionDesc::curr_start() const {
  return curr_start_;
}
inline void QueryResult_DimensionDesc::set_curr_start(::google::protobuf::int64 value) {
  set_has_curr_start();
  curr_start_ = value;
}

// required int64 curr_end = 4;
inline bool QueryResult_DimensionDesc::has_curr_end() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryResult_DimensionDesc::set_has_curr_end() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryResult_DimensionDesc::clear_has_curr_end() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryResult_DimensionDesc::clear_curr_end() {
  curr_end_ = GOOGLE_LONGLONG(0);
  clear_has_curr_end();
}
inline ::google::protobuf::int64 QueryResult_DimensionDesc::curr_end() const {
  return curr_end_;
}
inline void QueryResult_DimensionDesc::set_curr_end(::google::protobuf::int64 value) {
  set_has_curr_end();
  curr_end_ = value;
}

// required int64 end_max = 5;
inline bool QueryResult_DimensionDesc::has_end_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryResult_DimensionDesc::set_has_end_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryResult_DimensionDesc::clear_has_end_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryResult_DimensionDesc::clear_end_max() {
  end_max_ = GOOGLE_LONGLONG(0);
  clear_has_end_max();
}
inline ::google::protobuf::int64 QueryResult_DimensionDesc::end_max() const {
  return end_max_;
}
inline void QueryResult_DimensionDesc::set_end_max(::google::protobuf::int64 value) {
  set_has_end_max();
  end_max_ = value;
}

// required int64 chunk_interval = 6;
inline bool QueryResult_DimensionDesc::has_chunk_interval() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QueryResult_DimensionDesc::set_has_chunk_interval() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QueryResult_DimensionDesc::clear_has_chunk_interval() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QueryResult_DimensionDesc::clear_chunk_interval() {
  chunk_interval_ = GOOGLE_LONGLONG(0);
  clear_has_chunk_interval();
}
inline ::google::protobuf::int64 QueryResult_DimensionDesc::chunk_interval() const {
  return chunk_interval_;
}
inline void QueryResult_DimensionDesc::set_chunk_interval(::google::protobuf::int64 value) {
  set_has_chunk_interval();
  chunk_interval_ = value;
}

// required int64 chunk_overlap = 7;
inline bool QueryResult_DimensionDesc::has_chunk_overlap() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QueryResult_DimensionDesc::set_has_chunk_overlap() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QueryResult_DimensionDesc::clear_has_chunk_overlap() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QueryResult_DimensionDesc::clear_chunk_overlap() {
  chunk_overlap_ = GOOGLE_LONGLONG(0);
  clear_has_chunk_overlap();
}
inline ::google::protobuf::int64 QueryResult_DimensionDesc::chunk_overlap() const {
  return chunk_overlap_;
}
inline void QueryResult_DimensionDesc::set_chunk_overlap(::google::protobuf::int64 value) {
  set_has_chunk_overlap();
  chunk_overlap_ = value;
}

// -------------------------------------------------------------------

// QueryResult_Warning

// required int32 code = 1;
inline bool QueryResult_Warning::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryResult_Warning::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryResult_Warning::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryResult_Warning::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 QueryResult_Warning::code() const {
  return code_;
}
inline void QueryResult_Warning::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// required string file = 2;
inline bool QueryResult_Warning::has_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryResult_Warning::set_has_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryResult_Warning::clear_has_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryResult_Warning::clear_file() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    file_->clear();
  }
  clear_has_file();
}
inline const ::std::string& QueryResult_Warning::file() const {
  return *file_;
}
inline void QueryResult_Warning::set_file(const ::std::string& value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void QueryResult_Warning::set_file(const char* value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void QueryResult_Warning::set_file(const char* value, size_t size) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryResult_Warning::mutable_file() {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  return file_;
}
inline ::std::string* QueryResult_Warning::release_file() {
  clear_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_;
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string function = 3;
inline bool QueryResult_Warning::has_function() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryResult_Warning::set_has_function() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryResult_Warning::clear_has_function() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryResult_Warning::clear_function() {
  if (function_ != &::google::protobuf::internal::kEmptyString) {
    function_->clear();
  }
  clear_has_function();
}
inline const ::std::string& QueryResult_Warning::function() const {
  return *function_;
}
inline void QueryResult_Warning::set_function(const ::std::string& value) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::kEmptyString) {
    function_ = new ::std::string;
  }
  function_->assign(value);
}
inline void QueryResult_Warning::set_function(const char* value) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::kEmptyString) {
    function_ = new ::std::string;
  }
  function_->assign(value);
}
inline void QueryResult_Warning::set_function(const char* value, size_t size) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::kEmptyString) {
    function_ = new ::std::string;
  }
  function_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryResult_Warning::mutable_function() {
  set_has_function();
  if (function_ == &::google::protobuf::internal::kEmptyString) {
    function_ = new ::std::string;
  }
  return function_;
}
inline ::std::string* QueryResult_Warning::release_function() {
  clear_has_function();
  if (function_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = function_;
    function_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 line = 4;
inline bool QueryResult_Warning::has_line() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryResult_Warning::set_has_line() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryResult_Warning::clear_has_line() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryResult_Warning::clear_line() {
  line_ = 0;
  clear_has_line();
}
inline ::google::protobuf::int32 QueryResult_Warning::line() const {
  return line_;
}
inline void QueryResult_Warning::set_line(::google::protobuf::int32 value) {
  set_has_line();
  line_ = value;
}

// required string what_str = 5;
inline bool QueryResult_Warning::has_what_str() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryResult_Warning::set_has_what_str() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryResult_Warning::clear_has_what_str() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryResult_Warning::clear_what_str() {
  if (what_str_ != &::google::protobuf::internal::kEmptyString) {
    what_str_->clear();
  }
  clear_has_what_str();
}
inline const ::std::string& QueryResult_Warning::what_str() const {
  return *what_str_;
}
inline void QueryResult_Warning::set_what_str(const ::std::string& value) {
  set_has_what_str();
  if (what_str_ == &::google::protobuf::internal::kEmptyString) {
    what_str_ = new ::std::string;
  }
  what_str_->assign(value);
}
inline void QueryResult_Warning::set_what_str(const char* value) {
  set_has_what_str();
  if (what_str_ == &::google::protobuf::internal::kEmptyString) {
    what_str_ = new ::std::string;
  }
  what_str_->assign(value);
}
inline void QueryResult_Warning::set_what_str(const char* value, size_t size) {
  set_has_what_str();
  if (what_str_ == &::google::protobuf::internal::kEmptyString) {
    what_str_ = new ::std::string;
  }
  what_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryResult_Warning::mutable_what_str() {
  set_has_what_str();
  if (what_str_ == &::google::protobuf::internal::kEmptyString) {
    what_str_ = new ::std::string;
  }
  return what_str_;
}
inline ::std::string* QueryResult_Warning::release_what_str() {
  clear_has_what_str();
  if (what_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = what_str_;
    what_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string stringified_code = 6;
inline bool QueryResult_Warning::has_stringified_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QueryResult_Warning::set_has_stringified_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QueryResult_Warning::clear_has_stringified_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QueryResult_Warning::clear_stringified_code() {
  if (stringified_code_ != &::google::protobuf::internal::kEmptyString) {
    stringified_code_->clear();
  }
  clear_has_stringified_code();
}
inline const ::std::string& QueryResult_Warning::stringified_code() const {
  return *stringified_code_;
}
inline void QueryResult_Warning::set_stringified_code(const ::std::string& value) {
  set_has_stringified_code();
  if (stringified_code_ == &::google::protobuf::internal::kEmptyString) {
    stringified_code_ = new ::std::string;
  }
  stringified_code_->assign(value);
}
inline void QueryResult_Warning::set_stringified_code(const char* value) {
  set_has_stringified_code();
  if (stringified_code_ == &::google::protobuf::internal::kEmptyString) {
    stringified_code_ = new ::std::string;
  }
  stringified_code_->assign(value);
}
inline void QueryResult_Warning::set_stringified_code(const char* value, size_t size) {
  set_has_stringified_code();
  if (stringified_code_ == &::google::protobuf::internal::kEmptyString) {
    stringified_code_ = new ::std::string;
  }
  stringified_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryResult_Warning::mutable_stringified_code() {
  set_has_stringified_code();
  if (stringified_code_ == &::google::protobuf::internal::kEmptyString) {
    stringified_code_ = new ::std::string;
  }
  return stringified_code_;
}
inline ::std::string* QueryResult_Warning::release_stringified_code() {
  clear_has_stringified_code();
  if (stringified_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stringified_code_;
    stringified_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string strings_namespace = 7;
inline bool QueryResult_Warning::has_strings_namespace() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QueryResult_Warning::set_has_strings_namespace() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QueryResult_Warning::clear_has_strings_namespace() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QueryResult_Warning::clear_strings_namespace() {
  if (strings_namespace_ != &::google::protobuf::internal::kEmptyString) {
    strings_namespace_->clear();
  }
  clear_has_strings_namespace();
}
inline const ::std::string& QueryResult_Warning::strings_namespace() const {
  return *strings_namespace_;
}
inline void QueryResult_Warning::set_strings_namespace(const ::std::string& value) {
  set_has_strings_namespace();
  if (strings_namespace_ == &::google::protobuf::internal::kEmptyString) {
    strings_namespace_ = new ::std::string;
  }
  strings_namespace_->assign(value);
}
inline void QueryResult_Warning::set_strings_namespace(const char* value) {
  set_has_strings_namespace();
  if (strings_namespace_ == &::google::protobuf::internal::kEmptyString) {
    strings_namespace_ = new ::std::string;
  }
  strings_namespace_->assign(value);
}
inline void QueryResult_Warning::set_strings_namespace(const char* value, size_t size) {
  set_has_strings_namespace();
  if (strings_namespace_ == &::google::protobuf::internal::kEmptyString) {
    strings_namespace_ = new ::std::string;
  }
  strings_namespace_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryResult_Warning::mutable_strings_namespace() {
  set_has_strings_namespace();
  if (strings_namespace_ == &::google::protobuf::internal::kEmptyString) {
    strings_namespace_ = new ::std::string;
  }
  return strings_namespace_;
}
inline ::std::string* QueryResult_Warning::release_strings_namespace() {
  clear_has_strings_namespace();
  if (strings_namespace_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strings_namespace_;
    strings_namespace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// QueryResult

// optional string array_name = 2;
inline bool QueryResult::has_array_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryResult::set_has_array_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryResult::clear_has_array_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryResult::clear_array_name() {
  if (array_name_ != &::google::protobuf::internal::kEmptyString) {
    array_name_->clear();
  }
  clear_has_array_name();
}
inline const ::std::string& QueryResult::array_name() const {
  return *array_name_;
}
inline void QueryResult::set_array_name(const ::std::string& value) {
  set_has_array_name();
  if (array_name_ == &::google::protobuf::internal::kEmptyString) {
    array_name_ = new ::std::string;
  }
  array_name_->assign(value);
}
inline void QueryResult::set_array_name(const char* value) {
  set_has_array_name();
  if (array_name_ == &::google::protobuf::internal::kEmptyString) {
    array_name_ = new ::std::string;
  }
  array_name_->assign(value);
}
inline void QueryResult::set_array_name(const char* value, size_t size) {
  set_has_array_name();
  if (array_name_ == &::google::protobuf::internal::kEmptyString) {
    array_name_ = new ::std::string;
  }
  array_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryResult::mutable_array_name() {
  set_has_array_name();
  if (array_name_ == &::google::protobuf::internal::kEmptyString) {
    array_name_ = new ::std::string;
  }
  return array_name_;
}
inline ::std::string* QueryResult::release_array_name() {
  clear_has_array_name();
  if (array_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = array_name_;
    array_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .scidb_msg.QueryResult.AttributeDesc attributes = 3;
inline int QueryResult::attributes_size() const {
  return attributes_.size();
}
inline void QueryResult::clear_attributes() {
  attributes_.Clear();
}
inline const ::scidb_msg::QueryResult_AttributeDesc& QueryResult::attributes(int index) const {
  return attributes_.Get(index);
}
inline ::scidb_msg::QueryResult_AttributeDesc* QueryResult::mutable_attributes(int index) {
  return attributes_.Mutable(index);
}
inline ::scidb_msg::QueryResult_AttributeDesc* QueryResult::add_attributes() {
  return attributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::scidb_msg::QueryResult_AttributeDesc >&
QueryResult::attributes() const {
  return attributes_;
}
inline ::google::protobuf::RepeatedPtrField< ::scidb_msg::QueryResult_AttributeDesc >*
QueryResult::mutable_attributes() {
  return &attributes_;
}

// repeated .scidb_msg.QueryResult.DimensionDesc dimensions = 4;
inline int QueryResult::dimensions_size() const {
  return dimensions_.size();
}
inline void QueryResult::clear_dimensions() {
  dimensions_.Clear();
}
inline const ::scidb_msg::QueryResult_DimensionDesc& QueryResult::dimensions(int index) const {
  return dimensions_.Get(index);
}
inline ::scidb_msg::QueryResult_DimensionDesc* QueryResult::mutable_dimensions(int index) {
  return dimensions_.Mutable(index);
}
inline ::scidb_msg::QueryResult_DimensionDesc* QueryResult::add_dimensions() {
  return dimensions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::scidb_msg::QueryResult_DimensionDesc >&
QueryResult::dimensions() const {
  return dimensions_;
}
inline ::google::protobuf::RepeatedPtrField< ::scidb_msg::QueryResult_DimensionDesc >*
QueryResult::mutable_dimensions() {
  return &dimensions_;
}

// optional string explain_physical = 5;
inline bool QueryResult::has_explain_physical() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryResult::set_has_explain_physical() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryResult::clear_has_explain_physical() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryResult::clear_explain_physical() {
  if (explain_physical_ != &::google::protobuf::internal::kEmptyString) {
    explain_physical_->clear();
  }
  clear_has_explain_physical();
}
inline const ::std::string& QueryResult::explain_physical() const {
  return *explain_physical_;
}
inline void QueryResult::set_explain_physical(const ::std::string& value) {
  set_has_explain_physical();
  if (explain_physical_ == &::google::protobuf::internal::kEmptyString) {
    explain_physical_ = new ::std::string;
  }
  explain_physical_->assign(value);
}
inline void QueryResult::set_explain_physical(const char* value) {
  set_has_explain_physical();
  if (explain_physical_ == &::google::protobuf::internal::kEmptyString) {
    explain_physical_ = new ::std::string;
  }
  explain_physical_->assign(value);
}
inline void QueryResult::set_explain_physical(const char* value, size_t size) {
  set_has_explain_physical();
  if (explain_physical_ == &::google::protobuf::internal::kEmptyString) {
    explain_physical_ = new ::std::string;
  }
  explain_physical_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryResult::mutable_explain_physical() {
  set_has_explain_physical();
  if (explain_physical_ == &::google::protobuf::internal::kEmptyString) {
    explain_physical_ = new ::std::string;
  }
  return explain_physical_;
}
inline ::std::string* QueryResult::release_explain_physical() {
  clear_has_explain_physical();
  if (explain_physical_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = explain_physical_;
    explain_physical_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 execution_time = 6;
inline bool QueryResult::has_execution_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryResult::set_has_execution_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryResult::clear_has_execution_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryResult::clear_execution_time() {
  execution_time_ = GOOGLE_ULONGLONG(0);
  clear_has_execution_time();
}
inline ::google::protobuf::uint64 QueryResult::execution_time() const {
  return execution_time_;
}
inline void QueryResult::set_execution_time(::google::protobuf::uint64 value) {
  set_has_execution_time();
  execution_time_ = value;
}

// optional bool selective = 7;
inline bool QueryResult::has_selective() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QueryResult::set_has_selective() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QueryResult::clear_has_selective() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QueryResult::clear_selective() {
  selective_ = false;
  clear_has_selective();
}
inline bool QueryResult::selective() const {
  return selective_;
}
inline void QueryResult::set_selective(bool value) {
  set_has_selective();
  selective_ = value;
}

// optional string explain_logical = 8;
inline bool QueryResult::has_explain_logical() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QueryResult::set_has_explain_logical() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QueryResult::clear_has_explain_logical() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QueryResult::clear_explain_logical() {
  if (explain_logical_ != &::google::protobuf::internal::kEmptyString) {
    explain_logical_->clear();
  }
  clear_has_explain_logical();
}
inline const ::std::string& QueryResult::explain_logical() const {
  return *explain_logical_;
}
inline void QueryResult::set_explain_logical(const ::std::string& value) {
  set_has_explain_logical();
  if (explain_logical_ == &::google::protobuf::internal::kEmptyString) {
    explain_logical_ = new ::std::string;
  }
  explain_logical_->assign(value);
}
inline void QueryResult::set_explain_logical(const char* value) {
  set_has_explain_logical();
  if (explain_logical_ == &::google::protobuf::internal::kEmptyString) {
    explain_logical_ = new ::std::string;
  }
  explain_logical_->assign(value);
}
inline void QueryResult::set_explain_logical(const char* value, size_t size) {
  set_has_explain_logical();
  if (explain_logical_ == &::google::protobuf::internal::kEmptyString) {
    explain_logical_ = new ::std::string;
  }
  explain_logical_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryResult::mutable_explain_logical() {
  set_has_explain_logical();
  if (explain_logical_ == &::google::protobuf::internal::kEmptyString) {
    explain_logical_ = new ::std::string;
  }
  return explain_logical_;
}
inline ::std::string* QueryResult::release_explain_logical() {
  clear_has_explain_logical();
  if (explain_logical_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = explain_logical_;
    explain_logical_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .scidb_msg.QueryResult.Warning warnings = 9;
inline int QueryResult::warnings_size() const {
  return warnings_.size();
}
inline void QueryResult::clear_warnings() {
  warnings_.Clear();
}
inline const ::scidb_msg::QueryResult_Warning& QueryResult::warnings(int index) const {
  return warnings_.Get(index);
}
inline ::scidb_msg::QueryResult_Warning* QueryResult::mutable_warnings(int index) {
  return warnings_.Mutable(index);
}
inline ::scidb_msg::QueryResult_Warning* QueryResult::add_warnings() {
  return warnings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::scidb_msg::QueryResult_Warning >&
QueryResult::warnings() const {
  return warnings_;
}
inline ::google::protobuf::RepeatedPtrField< ::scidb_msg::QueryResult_Warning >*
QueryResult::mutable_warnings() {
  return &warnings_;
}

// repeated string plugins = 10;
inline int QueryResult::plugins_size() const {
  return plugins_.size();
}
inline void QueryResult::clear_plugins() {
  plugins_.Clear();
}
inline const ::std::string& QueryResult::plugins(int index) const {
  return plugins_.Get(index);
}
inline ::std::string* QueryResult::mutable_plugins(int index) {
  return plugins_.Mutable(index);
}
inline void QueryResult::set_plugins(int index, const ::std::string& value) {
  plugins_.Mutable(index)->assign(value);
}
inline void QueryResult::set_plugins(int index, const char* value) {
  plugins_.Mutable(index)->assign(value);
}
inline void QueryResult::set_plugins(int index, const char* value, size_t size) {
  plugins_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryResult::add_plugins() {
  return plugins_.Add();
}
inline void QueryResult::add_plugins(const ::std::string& value) {
  plugins_.Add()->assign(value);
}
inline void QueryResult::add_plugins(const char* value) {
  plugins_.Add()->assign(value);
}
inline void QueryResult::add_plugins(const char* value, size_t size) {
  plugins_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryResult::plugins() const {
  return plugins_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryResult::mutable_plugins() {
  return &plugins_;
}

// optional bool exclusive_array_access = 11;
inline bool QueryResult::has_exclusive_array_access() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void QueryResult::set_has_exclusive_array_access() {
  _has_bits_[0] |= 0x00000200u;
}
inline void QueryResult::clear_has_exclusive_array_access() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void QueryResult::clear_exclusive_array_access() {
  exclusive_array_access_ = false;
  clear_has_exclusive_array_access();
}
inline bool QueryResult::exclusive_array_access() const {
  return exclusive_array_access_;
}
inline void QueryResult::set_exclusive_array_access(bool value) {
  set_has_exclusive_array_access();
  exclusive_array_access_ = value;
}

// optional bool auto_commit = 12;
inline bool QueryResult::has_auto_commit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void QueryResult::set_has_auto_commit() {
  _has_bits_[0] |= 0x00000400u;
}
inline void QueryResult::clear_has_auto_commit() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void QueryResult::clear_auto_commit() {
  auto_commit_ = false;
  clear_has_auto_commit();
}
inline bool QueryResult::auto_commit() const {
  return auto_commit_;
}
inline void QueryResult::set_auto_commit(bool value) {
  set_has_auto_commit();
  auto_commit_ = value;
}

// -------------------------------------------------------------------

// PhysicalPlan_InstanceListEntry

// required uint64 instance_id = 2;
inline bool PhysicalPlan_InstanceListEntry::has_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PhysicalPlan_InstanceListEntry::set_has_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PhysicalPlan_InstanceListEntry::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PhysicalPlan_InstanceListEntry::clear_instance_id() {
  instance_id_ = GOOGLE_ULONGLONG(0);
  clear_has_instance_id();
}
inline ::google::protobuf::uint64 PhysicalPlan_InstanceListEntry::instance_id() const {
  return instance_id_;
}
inline void PhysicalPlan_InstanceListEntry::set_instance_id(::google::protobuf::uint64 value) {
  set_has_instance_id();
  instance_id_ = value;
}

// required uint64 gen_id = 3;
inline bool PhysicalPlan_InstanceListEntry::has_gen_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PhysicalPlan_InstanceListEntry::set_has_gen_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PhysicalPlan_InstanceListEntry::clear_has_gen_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PhysicalPlan_InstanceListEntry::clear_gen_id() {
  gen_id_ = GOOGLE_ULONGLONG(0);
  clear_has_gen_id();
}
inline ::google::protobuf::uint64 PhysicalPlan_InstanceListEntry::gen_id() const {
  return gen_id_;
}
inline void PhysicalPlan_InstanceListEntry::set_gen_id(::google::protobuf::uint64 value) {
  set_has_gen_id();
  gen_id_ = value;
}

// -------------------------------------------------------------------

// PhysicalPlan_InstanceList

// repeated .scidb_msg.PhysicalPlan.InstanceListEntry instance_entry = 2;
inline int PhysicalPlan_InstanceList::instance_entry_size() const {
  return instance_entry_.size();
}
inline void PhysicalPlan_InstanceList::clear_instance_entry() {
  instance_entry_.Clear();
}
inline const ::scidb_msg::PhysicalPlan_InstanceListEntry& PhysicalPlan_InstanceList::instance_entry(int index) const {
  return instance_entry_.Get(index);
}
inline ::scidb_msg::PhysicalPlan_InstanceListEntry* PhysicalPlan_InstanceList::mutable_instance_entry(int index) {
  return instance_entry_.Mutable(index);
}
inline ::scidb_msg::PhysicalPlan_InstanceListEntry* PhysicalPlan_InstanceList::add_instance_entry() {
  return instance_entry_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::scidb_msg::PhysicalPlan_InstanceListEntry >&
PhysicalPlan_InstanceList::instance_entry() const {
  return instance_entry_;
}
inline ::google::protobuf::RepeatedPtrField< ::scidb_msg::PhysicalPlan_InstanceListEntry >*
PhysicalPlan_InstanceList::mutable_instance_entry() {
  return &instance_entry_;
}

// -------------------------------------------------------------------

// PhysicalPlan

// required string physical_plan = 2;
inline bool PhysicalPlan::has_physical_plan() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PhysicalPlan::set_has_physical_plan() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PhysicalPlan::clear_has_physical_plan() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PhysicalPlan::clear_physical_plan() {
  if (physical_plan_ != &::google::protobuf::internal::kEmptyString) {
    physical_plan_->clear();
  }
  clear_has_physical_plan();
}
inline const ::std::string& PhysicalPlan::physical_plan() const {
  return *physical_plan_;
}
inline void PhysicalPlan::set_physical_plan(const ::std::string& value) {
  set_has_physical_plan();
  if (physical_plan_ == &::google::protobuf::internal::kEmptyString) {
    physical_plan_ = new ::std::string;
  }
  physical_plan_->assign(value);
}
inline void PhysicalPlan::set_physical_plan(const char* value) {
  set_has_physical_plan();
  if (physical_plan_ == &::google::protobuf::internal::kEmptyString) {
    physical_plan_ = new ::std::string;
  }
  physical_plan_->assign(value);
}
inline void PhysicalPlan::set_physical_plan(const char* value, size_t size) {
  set_has_physical_plan();
  if (physical_plan_ == &::google::protobuf::internal::kEmptyString) {
    physical_plan_ = new ::std::string;
  }
  physical_plan_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PhysicalPlan::mutable_physical_plan() {
  set_has_physical_plan();
  if (physical_plan_ == &::google::protobuf::internal::kEmptyString) {
    physical_plan_ = new ::std::string;
  }
  return physical_plan_;
}
inline ::std::string* PhysicalPlan::release_physical_plan() {
  clear_has_physical_plan();
  if (physical_plan_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = physical_plan_;
    physical_plan_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 membership_id = 3;
inline bool PhysicalPlan::has_membership_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PhysicalPlan::set_has_membership_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PhysicalPlan::clear_has_membership_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PhysicalPlan::clear_membership_id() {
  membership_id_ = GOOGLE_ULONGLONG(0);
  clear_has_membership_id();
}
inline ::google::protobuf::uint64 PhysicalPlan::membership_id() const {
  return membership_id_;
}
inline void PhysicalPlan::set_membership_id(::google::protobuf::uint64 value) {
  set_has_membership_id();
  membership_id_ = value;
}

// required .scidb_msg.PhysicalPlan.InstanceList dead_list = 4;
inline bool PhysicalPlan::has_dead_list() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PhysicalPlan::set_has_dead_list() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PhysicalPlan::clear_has_dead_list() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PhysicalPlan::clear_dead_list() {
  if (dead_list_ != NULL) dead_list_->::scidb_msg::PhysicalPlan_InstanceList::Clear();
  clear_has_dead_list();
}
inline const ::scidb_msg::PhysicalPlan_InstanceList& PhysicalPlan::dead_list() const {
  return dead_list_ != NULL ? *dead_list_ : *default_instance_->dead_list_;
}
inline ::scidb_msg::PhysicalPlan_InstanceList* PhysicalPlan::mutable_dead_list() {
  set_has_dead_list();
  if (dead_list_ == NULL) dead_list_ = new ::scidb_msg::PhysicalPlan_InstanceList;
  return dead_list_;
}
inline ::scidb_msg::PhysicalPlan_InstanceList* PhysicalPlan::release_dead_list() {
  clear_has_dead_list();
  ::scidb_msg::PhysicalPlan_InstanceList* temp = dead_list_;
  dead_list_ = NULL;
  return temp;
}

// required .scidb_msg.PhysicalPlan.InstanceList live_list = 5;
inline bool PhysicalPlan::has_live_list() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PhysicalPlan::set_has_live_list() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PhysicalPlan::clear_has_live_list() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PhysicalPlan::clear_live_list() {
  if (live_list_ != NULL) live_list_->::scidb_msg::PhysicalPlan_InstanceList::Clear();
  clear_has_live_list();
}
inline const ::scidb_msg::PhysicalPlan_InstanceList& PhysicalPlan::live_list() const {
  return live_list_ != NULL ? *live_list_ : *default_instance_->live_list_;
}
inline ::scidb_msg::PhysicalPlan_InstanceList* PhysicalPlan::mutable_live_list() {
  set_has_live_list();
  if (live_list_ == NULL) live_list_ = new ::scidb_msg::PhysicalPlan_InstanceList;
  return live_list_;
}
inline ::scidb_msg::PhysicalPlan_InstanceList* PhysicalPlan::release_live_list() {
  clear_has_live_list();
  ::scidb_msg::PhysicalPlan_InstanceList* temp = live_list_;
  live_list_ = NULL;
  return temp;
}

// required string cluster_uuid = 6;
inline bool PhysicalPlan::has_cluster_uuid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PhysicalPlan::set_has_cluster_uuid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PhysicalPlan::clear_has_cluster_uuid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PhysicalPlan::clear_cluster_uuid() {
  if (cluster_uuid_ != &::google::protobuf::internal::kEmptyString) {
    cluster_uuid_->clear();
  }
  clear_has_cluster_uuid();
}
inline const ::std::string& PhysicalPlan::cluster_uuid() const {
  return *cluster_uuid_;
}
inline void PhysicalPlan::set_cluster_uuid(const ::std::string& value) {
  set_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::kEmptyString) {
    cluster_uuid_ = new ::std::string;
  }
  cluster_uuid_->assign(value);
}
inline void PhysicalPlan::set_cluster_uuid(const char* value) {
  set_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::kEmptyString) {
    cluster_uuid_ = new ::std::string;
  }
  cluster_uuid_->assign(value);
}
inline void PhysicalPlan::set_cluster_uuid(const char* value, size_t size) {
  set_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::kEmptyString) {
    cluster_uuid_ = new ::std::string;
  }
  cluster_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PhysicalPlan::mutable_cluster_uuid() {
  set_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::kEmptyString) {
    cluster_uuid_ = new ::std::string;
  }
  return cluster_uuid_;
}
inline ::std::string* PhysicalPlan::release_cluster_uuid() {
  clear_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cluster_uuid_;
    cluster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Error_ParsingContext

// required string query_string = 1;
inline bool Error_ParsingContext::has_query_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Error_ParsingContext::set_has_query_string() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Error_ParsingContext::clear_has_query_string() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Error_ParsingContext::clear_query_string() {
  if (query_string_ != &::google::protobuf::internal::kEmptyString) {
    query_string_->clear();
  }
  clear_has_query_string();
}
inline const ::std::string& Error_ParsingContext::query_string() const {
  return *query_string_;
}
inline void Error_ParsingContext::set_query_string(const ::std::string& value) {
  set_has_query_string();
  if (query_string_ == &::google::protobuf::internal::kEmptyString) {
    query_string_ = new ::std::string;
  }
  query_string_->assign(value);
}
inline void Error_ParsingContext::set_query_string(const char* value) {
  set_has_query_string();
  if (query_string_ == &::google::protobuf::internal::kEmptyString) {
    query_string_ = new ::std::string;
  }
  query_string_->assign(value);
}
inline void Error_ParsingContext::set_query_string(const char* value, size_t size) {
  set_has_query_string();
  if (query_string_ == &::google::protobuf::internal::kEmptyString) {
    query_string_ = new ::std::string;
  }
  query_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Error_ParsingContext::mutable_query_string() {
  set_has_query_string();
  if (query_string_ == &::google::protobuf::internal::kEmptyString) {
    query_string_ = new ::std::string;
  }
  return query_string_;
}
inline ::std::string* Error_ParsingContext::release_query_string() {
  clear_has_query_string();
  if (query_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = query_string_;
    query_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 line_start = 2;
inline bool Error_ParsingContext::has_line_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Error_ParsingContext::set_has_line_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Error_ParsingContext::clear_has_line_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Error_ParsingContext::clear_line_start() {
  line_start_ = 0u;
  clear_has_line_start();
}
inline ::google::protobuf::uint32 Error_ParsingContext::line_start() const {
  return line_start_;
}
inline void Error_ParsingContext::set_line_start(::google::protobuf::uint32 value) {
  set_has_line_start();
  line_start_ = value;
}

// required uint32 col_start = 3;
inline bool Error_ParsingContext::has_col_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Error_ParsingContext::set_has_col_start() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Error_ParsingContext::clear_has_col_start() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Error_ParsingContext::clear_col_start() {
  col_start_ = 0u;
  clear_has_col_start();
}
inline ::google::protobuf::uint32 Error_ParsingContext::col_start() const {
  return col_start_;
}
inline void Error_ParsingContext::set_col_start(::google::protobuf::uint32 value) {
  set_has_col_start();
  col_start_ = value;
}

// required uint32 line_end = 4;
inline bool Error_ParsingContext::has_line_end() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Error_ParsingContext::set_has_line_end() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Error_ParsingContext::clear_has_line_end() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Error_ParsingContext::clear_line_end() {
  line_end_ = 0u;
  clear_has_line_end();
}
inline ::google::protobuf::uint32 Error_ParsingContext::line_end() const {
  return line_end_;
}
inline void Error_ParsingContext::set_line_end(::google::protobuf::uint32 value) {
  set_has_line_end();
  line_end_ = value;
}

// required uint32 col_end = 5;
inline bool Error_ParsingContext::has_col_end() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Error_ParsingContext::set_has_col_end() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Error_ParsingContext::clear_has_col_end() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Error_ParsingContext::clear_col_end() {
  col_end_ = 0u;
  clear_has_col_end();
}
inline ::google::protobuf::uint32 Error_ParsingContext::col_end() const {
  return col_end_;
}
inline void Error_ParsingContext::set_col_end(::google::protobuf::uint32 value) {
  set_has_col_end();
  col_end_ = value;
}

// -------------------------------------------------------------------

// Error

// required int32 type = 1;
inline bool Error::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Error::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Error::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Error::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Error::type() const {
  return type_;
}
inline void Error::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string file = 2;
inline bool Error::has_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Error::set_has_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Error::clear_has_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Error::clear_file() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    file_->clear();
  }
  clear_has_file();
}
inline const ::std::string& Error::file() const {
  return *file_;
}
inline void Error::set_file(const ::std::string& value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void Error::set_file(const char* value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void Error::set_file(const char* value, size_t size) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Error::mutable_file() {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  return file_;
}
inline ::std::string* Error::release_file() {
  clear_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_;
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string function = 3;
inline bool Error::has_function() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Error::set_has_function() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Error::clear_has_function() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Error::clear_function() {
  if (function_ != &::google::protobuf::internal::kEmptyString) {
    function_->clear();
  }
  clear_has_function();
}
inline const ::std::string& Error::function() const {
  return *function_;
}
inline void Error::set_function(const ::std::string& value) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::kEmptyString) {
    function_ = new ::std::string;
  }
  function_->assign(value);
}
inline void Error::set_function(const char* value) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::kEmptyString) {
    function_ = new ::std::string;
  }
  function_->assign(value);
}
inline void Error::set_function(const char* value, size_t size) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::kEmptyString) {
    function_ = new ::std::string;
  }
  function_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Error::mutable_function() {
  set_has_function();
  if (function_ == &::google::protobuf::internal::kEmptyString) {
    function_ = new ::std::string;
  }
  return function_;
}
inline ::std::string* Error::release_function() {
  clear_has_function();
  if (function_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = function_;
    function_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 line = 4;
inline bool Error::has_line() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Error::set_has_line() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Error::clear_has_line() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Error::clear_line() {
  line_ = 0;
  clear_has_line();
}
inline ::google::protobuf::int32 Error::line() const {
  return line_;
}
inline void Error::set_line(::google::protobuf::int32 value) {
  set_has_line();
  line_ = value;
}

// optional string what_str = 5;
inline bool Error::has_what_str() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Error::set_has_what_str() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Error::clear_has_what_str() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Error::clear_what_str() {
  if (what_str_ != &::google::protobuf::internal::kEmptyString) {
    what_str_->clear();
  }
  clear_has_what_str();
}
inline const ::std::string& Error::what_str() const {
  return *what_str_;
}
inline void Error::set_what_str(const ::std::string& value) {
  set_has_what_str();
  if (what_str_ == &::google::protobuf::internal::kEmptyString) {
    what_str_ = new ::std::string;
  }
  what_str_->assign(value);
}
inline void Error::set_what_str(const char* value) {
  set_has_what_str();
  if (what_str_ == &::google::protobuf::internal::kEmptyString) {
    what_str_ = new ::std::string;
  }
  what_str_->assign(value);
}
inline void Error::set_what_str(const char* value, size_t size) {
  set_has_what_str();
  if (what_str_ == &::google::protobuf::internal::kEmptyString) {
    what_str_ = new ::std::string;
  }
  what_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Error::mutable_what_str() {
  set_has_what_str();
  if (what_str_ == &::google::protobuf::internal::kEmptyString) {
    what_str_ = new ::std::string;
  }
  return what_str_;
}
inline ::std::string* Error::release_what_str() {
  clear_has_what_str();
  if (what_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = what_str_;
    what_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string errors_namespace = 6;
inline bool Error::has_errors_namespace() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Error::set_has_errors_namespace() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Error::clear_has_errors_namespace() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Error::clear_errors_namespace() {
  if (errors_namespace_ != &::google::protobuf::internal::kEmptyString) {
    errors_namespace_->clear();
  }
  clear_has_errors_namespace();
}
inline const ::std::string& Error::errors_namespace() const {
  return *errors_namespace_;
}
inline void Error::set_errors_namespace(const ::std::string& value) {
  set_has_errors_namespace();
  if (errors_namespace_ == &::google::protobuf::internal::kEmptyString) {
    errors_namespace_ = new ::std::string;
  }
  errors_namespace_->assign(value);
}
inline void Error::set_errors_namespace(const char* value) {
  set_has_errors_namespace();
  if (errors_namespace_ == &::google::protobuf::internal::kEmptyString) {
    errors_namespace_ = new ::std::string;
  }
  errors_namespace_->assign(value);
}
inline void Error::set_errors_namespace(const char* value, size_t size) {
  set_has_errors_namespace();
  if (errors_namespace_ == &::google::protobuf::internal::kEmptyString) {
    errors_namespace_ = new ::std::string;
  }
  errors_namespace_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Error::mutable_errors_namespace() {
  set_has_errors_namespace();
  if (errors_namespace_ == &::google::protobuf::internal::kEmptyString) {
    errors_namespace_ = new ::std::string;
  }
  return errors_namespace_;
}
inline ::std::string* Error::release_errors_namespace() {
  clear_has_errors_namespace();
  if (errors_namespace_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errors_namespace_;
    errors_namespace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 short_error_code = 7;
inline bool Error::has_short_error_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Error::set_has_short_error_code() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Error::clear_has_short_error_code() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Error::clear_short_error_code() {
  short_error_code_ = 0;
  clear_has_short_error_code();
}
inline ::google::protobuf::int32 Error::short_error_code() const {
  return short_error_code_;
}
inline void Error::set_short_error_code(::google::protobuf::int32 value) {
  set_has_short_error_code();
  short_error_code_ = value;
}

// required int32 long_error_code = 8;
inline bool Error::has_long_error_code() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Error::set_has_long_error_code() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Error::clear_has_long_error_code() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Error::clear_long_error_code() {
  long_error_code_ = 0;
  clear_has_long_error_code();
}
inline ::google::protobuf::int32 Error::long_error_code() const {
  return long_error_code_;
}
inline void Error::set_long_error_code(::google::protobuf::int32 value) {
  set_has_long_error_code();
  long_error_code_ = value;
}

// optional string stringified_short_error_code = 9;
inline bool Error::has_stringified_short_error_code() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Error::set_has_stringified_short_error_code() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Error::clear_has_stringified_short_error_code() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Error::clear_stringified_short_error_code() {
  if (stringified_short_error_code_ != &::google::protobuf::internal::kEmptyString) {
    stringified_short_error_code_->clear();
  }
  clear_has_stringified_short_error_code();
}
inline const ::std::string& Error::stringified_short_error_code() const {
  return *stringified_short_error_code_;
}
inline void Error::set_stringified_short_error_code(const ::std::string& value) {
  set_has_stringified_short_error_code();
  if (stringified_short_error_code_ == &::google::protobuf::internal::kEmptyString) {
    stringified_short_error_code_ = new ::std::string;
  }
  stringified_short_error_code_->assign(value);
}
inline void Error::set_stringified_short_error_code(const char* value) {
  set_has_stringified_short_error_code();
  if (stringified_short_error_code_ == &::google::protobuf::internal::kEmptyString) {
    stringified_short_error_code_ = new ::std::string;
  }
  stringified_short_error_code_->assign(value);
}
inline void Error::set_stringified_short_error_code(const char* value, size_t size) {
  set_has_stringified_short_error_code();
  if (stringified_short_error_code_ == &::google::protobuf::internal::kEmptyString) {
    stringified_short_error_code_ = new ::std::string;
  }
  stringified_short_error_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Error::mutable_stringified_short_error_code() {
  set_has_stringified_short_error_code();
  if (stringified_short_error_code_ == &::google::protobuf::internal::kEmptyString) {
    stringified_short_error_code_ = new ::std::string;
  }
  return stringified_short_error_code_;
}
inline ::std::string* Error::release_stringified_short_error_code() {
  clear_has_stringified_short_error_code();
  if (stringified_short_error_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stringified_short_error_code_;
    stringified_short_error_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string stringified_long_error_code = 10;
inline bool Error::has_stringified_long_error_code() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Error::set_has_stringified_long_error_code() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Error::clear_has_stringified_long_error_code() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Error::clear_stringified_long_error_code() {
  if (stringified_long_error_code_ != &::google::protobuf::internal::kEmptyString) {
    stringified_long_error_code_->clear();
  }
  clear_has_stringified_long_error_code();
}
inline const ::std::string& Error::stringified_long_error_code() const {
  return *stringified_long_error_code_;
}
inline void Error::set_stringified_long_error_code(const ::std::string& value) {
  set_has_stringified_long_error_code();
  if (stringified_long_error_code_ == &::google::protobuf::internal::kEmptyString) {
    stringified_long_error_code_ = new ::std::string;
  }
  stringified_long_error_code_->assign(value);
}
inline void Error::set_stringified_long_error_code(const char* value) {
  set_has_stringified_long_error_code();
  if (stringified_long_error_code_ == &::google::protobuf::internal::kEmptyString) {
    stringified_long_error_code_ = new ::std::string;
  }
  stringified_long_error_code_->assign(value);
}
inline void Error::set_stringified_long_error_code(const char* value, size_t size) {
  set_has_stringified_long_error_code();
  if (stringified_long_error_code_ == &::google::protobuf::internal::kEmptyString) {
    stringified_long_error_code_ = new ::std::string;
  }
  stringified_long_error_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Error::mutable_stringified_long_error_code() {
  set_has_stringified_long_error_code();
  if (stringified_long_error_code_ == &::google::protobuf::internal::kEmptyString) {
    stringified_long_error_code_ = new ::std::string;
  }
  return stringified_long_error_code_;
}
inline ::std::string* Error::release_stringified_long_error_code() {
  clear_has_stringified_long_error_code();
  if (stringified_long_error_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stringified_long_error_code_;
    stringified_long_error_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .scidb_msg.Error.ParsingContext parsing_context = 11;
inline bool Error::has_parsing_context() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Error::set_has_parsing_context() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Error::clear_has_parsing_context() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Error::clear_parsing_context() {
  if (parsing_context_ != NULL) parsing_context_->::scidb_msg::Error_ParsingContext::Clear();
  clear_has_parsing_context();
}
inline const ::scidb_msg::Error_ParsingContext& Error::parsing_context() const {
  return parsing_context_ != NULL ? *parsing_context_ : *default_instance_->parsing_context_;
}
inline ::scidb_msg::Error_ParsingContext* Error::mutable_parsing_context() {
  set_has_parsing_context();
  if (parsing_context_ == NULL) parsing_context_ = new ::scidb_msg::Error_ParsingContext;
  return parsing_context_;
}
inline ::scidb_msg::Error_ParsingContext* Error::release_parsing_context() {
  clear_has_parsing_context();
  ::scidb_msg::Error_ParsingContext* temp = parsing_context_;
  parsing_context_ = NULL;
  return temp;
}

// optional string cluster_uuid = 12;
inline bool Error::has_cluster_uuid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Error::set_has_cluster_uuid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Error::clear_has_cluster_uuid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Error::clear_cluster_uuid() {
  if (cluster_uuid_ != &::google::protobuf::internal::kEmptyString) {
    cluster_uuid_->clear();
  }
  clear_has_cluster_uuid();
}
inline const ::std::string& Error::cluster_uuid() const {
  return *cluster_uuid_;
}
inline void Error::set_cluster_uuid(const ::std::string& value) {
  set_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::kEmptyString) {
    cluster_uuid_ = new ::std::string;
  }
  cluster_uuid_->assign(value);
}
inline void Error::set_cluster_uuid(const char* value) {
  set_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::kEmptyString) {
    cluster_uuid_ = new ::std::string;
  }
  cluster_uuid_->assign(value);
}
inline void Error::set_cluster_uuid(const char* value, size_t size) {
  set_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::kEmptyString) {
    cluster_uuid_ = new ::std::string;
  }
  cluster_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Error::mutable_cluster_uuid() {
  set_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::kEmptyString) {
    cluster_uuid_ = new ::std::string;
  }
  return cluster_uuid_;
}
inline ::std::string* Error::release_cluster_uuid() {
  clear_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cluster_uuid_;
    cluster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DummyQuery

// optional uint64 payload_id = 2;
inline bool DummyQuery::has_payload_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DummyQuery::set_has_payload_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DummyQuery::clear_has_payload_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DummyQuery::clear_payload_id() {
  payload_id_ = GOOGLE_ULONGLONG(0);
  clear_has_payload_id();
}
inline ::google::protobuf::uint64 DummyQuery::payload_id() const {
  return payload_id_;
}
inline void DummyQuery::set_payload_id(::google::protobuf::uint64 value) {
  set_has_payload_id();
  payload_id_ = value;
}

// optional string cluster_uuid = 3;
inline bool DummyQuery::has_cluster_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DummyQuery::set_has_cluster_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DummyQuery::clear_has_cluster_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DummyQuery::clear_cluster_uuid() {
  if (cluster_uuid_ != &::google::protobuf::internal::kEmptyString) {
    cluster_uuid_->clear();
  }
  clear_has_cluster_uuid();
}
inline const ::std::string& DummyQuery::cluster_uuid() const {
  return *cluster_uuid_;
}
inline void DummyQuery::set_cluster_uuid(const ::std::string& value) {
  set_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::kEmptyString) {
    cluster_uuid_ = new ::std::string;
  }
  cluster_uuid_->assign(value);
}
inline void DummyQuery::set_cluster_uuid(const char* value) {
  set_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::kEmptyString) {
    cluster_uuid_ = new ::std::string;
  }
  cluster_uuid_->assign(value);
}
inline void DummyQuery::set_cluster_uuid(const char* value, size_t size) {
  set_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::kEmptyString) {
    cluster_uuid_ = new ::std::string;
  }
  cluster_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DummyQuery::mutable_cluster_uuid() {
  set_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::kEmptyString) {
    cluster_uuid_ = new ::std::string;
  }
  return cluster_uuid_;
}
inline ::std::string* DummyQuery::release_cluster_uuid() {
  clear_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cluster_uuid_;
    cluster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ResourcesFileExistsRequest

// required uint64 resource_request_id = 1;
inline bool ResourcesFileExistsRequest::has_resource_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResourcesFileExistsRequest::set_has_resource_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResourcesFileExistsRequest::clear_has_resource_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResourcesFileExistsRequest::clear_resource_request_id() {
  resource_request_id_ = GOOGLE_ULONGLONG(0);
  clear_has_resource_request_id();
}
inline ::google::protobuf::uint64 ResourcesFileExistsRequest::resource_request_id() const {
  return resource_request_id_;
}
inline void ResourcesFileExistsRequest::set_resource_request_id(::google::protobuf::uint64 value) {
  set_has_resource_request_id();
  resource_request_id_ = value;
}

// required string file_path = 2;
inline bool ResourcesFileExistsRequest::has_file_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResourcesFileExistsRequest::set_has_file_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResourcesFileExistsRequest::clear_has_file_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResourcesFileExistsRequest::clear_file_path() {
  if (file_path_ != &::google::protobuf::internal::kEmptyString) {
    file_path_->clear();
  }
  clear_has_file_path();
}
inline const ::std::string& ResourcesFileExistsRequest::file_path() const {
  return *file_path_;
}
inline void ResourcesFileExistsRequest::set_file_path(const ::std::string& value) {
  set_has_file_path();
  if (file_path_ == &::google::protobuf::internal::kEmptyString) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(value);
}
inline void ResourcesFileExistsRequest::set_file_path(const char* value) {
  set_has_file_path();
  if (file_path_ == &::google::protobuf::internal::kEmptyString) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(value);
}
inline void ResourcesFileExistsRequest::set_file_path(const char* value, size_t size) {
  set_has_file_path();
  if (file_path_ == &::google::protobuf::internal::kEmptyString) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResourcesFileExistsRequest::mutable_file_path() {
  set_has_file_path();
  if (file_path_ == &::google::protobuf::internal::kEmptyString) {
    file_path_ = new ::std::string;
  }
  return file_path_;
}
inline ::std::string* ResourcesFileExistsRequest::release_file_path() {
  clear_has_file_path();
  if (file_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_path_;
    file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ResourcesFileExistsResponse

// required uint64 resource_request_id = 1;
inline bool ResourcesFileExistsResponse::has_resource_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResourcesFileExistsResponse::set_has_resource_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResourcesFileExistsResponse::clear_has_resource_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResourcesFileExistsResponse::clear_resource_request_id() {
  resource_request_id_ = GOOGLE_ULONGLONG(0);
  clear_has_resource_request_id();
}
inline ::google::protobuf::uint64 ResourcesFileExistsResponse::resource_request_id() const {
  return resource_request_id_;
}
inline void ResourcesFileExistsResponse::set_resource_request_id(::google::protobuf::uint64 value) {
  set_has_resource_request_id();
  resource_request_id_ = value;
}

// required bool exits_flag = 2;
inline bool ResourcesFileExistsResponse::has_exits_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResourcesFileExistsResponse::set_has_exits_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResourcesFileExistsResponse::clear_has_exits_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResourcesFileExistsResponse::clear_exits_flag() {
  exits_flag_ = false;
  clear_has_exits_flag();
}
inline bool ResourcesFileExistsResponse::exits_flag() const {
  return exits_flag_;
}
inline void ResourcesFileExistsResponse::set_exits_flag(bool value) {
  set_has_exits_flag();
  exits_flag_ = value;
}

// -------------------------------------------------------------------

// Control_Channel

// required uint32 id = 1;
inline bool Control_Channel::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Control_Channel::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Control_Channel::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Control_Channel::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Control_Channel::id() const {
  return id_;
}
inline void Control_Channel::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint64 available = 2;
inline bool Control_Channel::has_available() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Control_Channel::set_has_available() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Control_Channel::clear_has_available() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Control_Channel::clear_available() {
  available_ = GOOGLE_ULONGLONG(0);
  clear_has_available();
}
inline ::google::protobuf::uint64 Control_Channel::available() const {
  return available_;
}
inline void Control_Channel::set_available(::google::protobuf::uint64 value) {
  set_has_available();
  available_ = value;
}

// required uint64 local_sn = 3;
inline bool Control_Channel::has_local_sn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Control_Channel::set_has_local_sn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Control_Channel::clear_has_local_sn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Control_Channel::clear_local_sn() {
  local_sn_ = GOOGLE_ULONGLONG(0);
  clear_has_local_sn();
}
inline ::google::protobuf::uint64 Control_Channel::local_sn() const {
  return local_sn_;
}
inline void Control_Channel::set_local_sn(::google::protobuf::uint64 value) {
  set_has_local_sn();
  local_sn_ = value;
}

// required uint64 remote_sn = 4;
inline bool Control_Channel::has_remote_sn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Control_Channel::set_has_remote_sn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Control_Channel::clear_has_remote_sn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Control_Channel::clear_remote_sn() {
  remote_sn_ = GOOGLE_ULONGLONG(0);
  clear_has_remote_sn();
}
inline ::google::protobuf::uint64 Control_Channel::remote_sn() const {
  return remote_sn_;
}
inline void Control_Channel::set_remote_sn(::google::protobuf::uint64 value) {
  set_has_remote_sn();
  remote_sn_ = value;
}

// -------------------------------------------------------------------

// Control

// required uint64 local_gen_id = 1;
inline bool Control::has_local_gen_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Control::set_has_local_gen_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Control::clear_has_local_gen_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Control::clear_local_gen_id() {
  local_gen_id_ = GOOGLE_ULONGLONG(0);
  clear_has_local_gen_id();
}
inline ::google::protobuf::uint64 Control::local_gen_id() const {
  return local_gen_id_;
}
inline void Control::set_local_gen_id(::google::protobuf::uint64 value) {
  set_has_local_gen_id();
  local_gen_id_ = value;
}

// required uint64 remote_gen_id = 2;
inline bool Control::has_remote_gen_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Control::set_has_remote_gen_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Control::clear_has_remote_gen_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Control::clear_remote_gen_id() {
  remote_gen_id_ = GOOGLE_ULONGLONG(0);
  clear_has_remote_gen_id();
}
inline ::google::protobuf::uint64 Control::remote_gen_id() const {
  return remote_gen_id_;
}
inline void Control::set_remote_gen_id(::google::protobuf::uint64 value) {
  set_has_remote_gen_id();
  remote_gen_id_ = value;
}

// repeated .scidb_msg.Control.Channel channels = 3;
inline int Control::channels_size() const {
  return channels_.size();
}
inline void Control::clear_channels() {
  channels_.Clear();
}
inline const ::scidb_msg::Control_Channel& Control::channels(int index) const {
  return channels_.Get(index);
}
inline ::scidb_msg::Control_Channel* Control::mutable_channels(int index) {
  return channels_.Mutable(index);
}
inline ::scidb_msg::Control_Channel* Control::add_channels() {
  return channels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::scidb_msg::Control_Channel >&
Control::channels() const {
  return channels_;
}
inline ::google::protobuf::RepeatedPtrField< ::scidb_msg::Control_Channel >*
Control::mutable_channels() {
  return &channels_;
}

// -------------------------------------------------------------------

// MpiSlaveHandshake

// required string cluster_uuid = 1;
inline bool MpiSlaveHandshake::has_cluster_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MpiSlaveHandshake::set_has_cluster_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MpiSlaveHandshake::clear_has_cluster_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MpiSlaveHandshake::clear_cluster_uuid() {
  if (cluster_uuid_ != &::google::protobuf::internal::kEmptyString) {
    cluster_uuid_->clear();
  }
  clear_has_cluster_uuid();
}
inline const ::std::string& MpiSlaveHandshake::cluster_uuid() const {
  return *cluster_uuid_;
}
inline void MpiSlaveHandshake::set_cluster_uuid(const ::std::string& value) {
  set_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::kEmptyString) {
    cluster_uuid_ = new ::std::string;
  }
  cluster_uuid_->assign(value);
}
inline void MpiSlaveHandshake::set_cluster_uuid(const char* value) {
  set_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::kEmptyString) {
    cluster_uuid_ = new ::std::string;
  }
  cluster_uuid_->assign(value);
}
inline void MpiSlaveHandshake::set_cluster_uuid(const char* value, size_t size) {
  set_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::kEmptyString) {
    cluster_uuid_ = new ::std::string;
  }
  cluster_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MpiSlaveHandshake::mutable_cluster_uuid() {
  set_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::kEmptyString) {
    cluster_uuid_ = new ::std::string;
  }
  return cluster_uuid_;
}
inline ::std::string* MpiSlaveHandshake::release_cluster_uuid() {
  clear_has_cluster_uuid();
  if (cluster_uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cluster_uuid_;
    cluster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 instance_id = 2;
inline bool MpiSlaveHandshake::has_instance_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MpiSlaveHandshake::set_has_instance_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MpiSlaveHandshake::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MpiSlaveHandshake::clear_instance_id() {
  instance_id_ = GOOGLE_ULONGLONG(0);
  clear_has_instance_id();
}
inline ::google::protobuf::uint64 MpiSlaveHandshake::instance_id() const {
  return instance_id_;
}
inline void MpiSlaveHandshake::set_instance_id(::google::protobuf::uint64 value) {
  set_has_instance_id();
  instance_id_ = value;
}

// required uint64 launch_id = 3;
inline bool MpiSlaveHandshake::has_launch_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MpiSlaveHandshake::set_has_launch_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MpiSlaveHandshake::clear_has_launch_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MpiSlaveHandshake::clear_launch_id() {
  launch_id_ = GOOGLE_ULONGLONG(0);
  clear_has_launch_id();
}
inline ::google::protobuf::uint64 MpiSlaveHandshake::launch_id() const {
  return launch_id_;
}
inline void MpiSlaveHandshake::set_launch_id(::google::protobuf::uint64 value) {
  set_has_launch_id();
  launch_id_ = value;
}

// required uint64 rank = 4;
inline bool MpiSlaveHandshake::has_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MpiSlaveHandshake::set_has_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MpiSlaveHandshake::clear_has_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MpiSlaveHandshake::clear_rank() {
  rank_ = GOOGLE_ULONGLONG(0);
  clear_has_rank();
}
inline ::google::protobuf::uint64 MpiSlaveHandshake::rank() const {
  return rank_;
}
inline void MpiSlaveHandshake::set_rank(::google::protobuf::uint64 value) {
  set_has_rank();
  rank_ = value;
}

// required int32 pid = 5;
inline bool MpiSlaveHandshake::has_pid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MpiSlaveHandshake::set_has_pid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MpiSlaveHandshake::clear_has_pid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MpiSlaveHandshake::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 MpiSlaveHandshake::pid() const {
  return pid_;
}
inline void MpiSlaveHandshake::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
}

// required int32 ppid = 6;
inline bool MpiSlaveHandshake::has_ppid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MpiSlaveHandshake::set_has_ppid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MpiSlaveHandshake::clear_has_ppid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MpiSlaveHandshake::clear_ppid() {
  ppid_ = 0;
  clear_has_ppid();
}
inline ::google::protobuf::int32 MpiSlaveHandshake::ppid() const {
  return ppid_;
}
inline void MpiSlaveHandshake::set_ppid(::google::protobuf::int32 value) {
  set_has_ppid();
  ppid_ = value;
}

// -------------------------------------------------------------------

// MpiSlaveResult

// required uint64 launch_id = 1;
inline bool MpiSlaveResult::has_launch_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MpiSlaveResult::set_has_launch_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MpiSlaveResult::clear_has_launch_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MpiSlaveResult::clear_launch_id() {
  launch_id_ = GOOGLE_ULONGLONG(0);
  clear_has_launch_id();
}
inline ::google::protobuf::uint64 MpiSlaveResult::launch_id() const {
  return launch_id_;
}
inline void MpiSlaveResult::set_launch_id(::google::protobuf::uint64 value) {
  set_has_launch_id();
  launch_id_ = value;
}

// required int64 status = 3;
inline bool MpiSlaveResult::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MpiSlaveResult::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MpiSlaveResult::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MpiSlaveResult::clear_status() {
  status_ = GOOGLE_LONGLONG(0);
  clear_has_status();
}
inline ::google::protobuf::int64 MpiSlaveResult::status() const {
  return status_;
}
inline void MpiSlaveResult::set_status(::google::protobuf::int64 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// MpiSlaveCommand

// required string command = 1;
inline bool MpiSlaveCommand::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MpiSlaveCommand::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MpiSlaveCommand::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MpiSlaveCommand::clear_command() {
  if (command_ != &::google::protobuf::internal::kEmptyString) {
    command_->clear();
  }
  clear_has_command();
}
inline const ::std::string& MpiSlaveCommand::command() const {
  return *command_;
}
inline void MpiSlaveCommand::set_command(const ::std::string& value) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void MpiSlaveCommand::set_command(const char* value) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void MpiSlaveCommand::set_command(const char* value, size_t size) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  command_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MpiSlaveCommand::mutable_command() {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  return command_;
}
inline ::std::string* MpiSlaveCommand::release_command() {
  clear_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = command_;
    command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string args = 2;
inline int MpiSlaveCommand::args_size() const {
  return args_.size();
}
inline void MpiSlaveCommand::clear_args() {
  args_.Clear();
}
inline const ::std::string& MpiSlaveCommand::args(int index) const {
  return args_.Get(index);
}
inline ::std::string* MpiSlaveCommand::mutable_args(int index) {
  return args_.Mutable(index);
}
inline void MpiSlaveCommand::set_args(int index, const ::std::string& value) {
  args_.Mutable(index)->assign(value);
}
inline void MpiSlaveCommand::set_args(int index, const char* value) {
  args_.Mutable(index)->assign(value);
}
inline void MpiSlaveCommand::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MpiSlaveCommand::add_args() {
  return args_.Add();
}
inline void MpiSlaveCommand::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
}
inline void MpiSlaveCommand::add_args(const char* value) {
  args_.Add()->assign(value);
}
inline void MpiSlaveCommand::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MpiSlaveCommand::args() const {
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MpiSlaveCommand::mutable_args() {
  return &args_;
}

// -------------------------------------------------------------------

// NewClientStart

// -------------------------------------------------------------------

// NewClientComplete

// required bool authenticated = 1;
inline bool NewClientComplete::has_authenticated() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewClientComplete::set_has_authenticated() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewClientComplete::clear_has_authenticated() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewClientComplete::clear_authenticated() {
  authenticated_ = false;
  clear_has_authenticated();
}
inline bool NewClientComplete::authenticated() const {
  return authenticated_;
}
inline void NewClientComplete::set_authenticated(bool value) {
  set_has_authenticated();
  authenticated_ = value;
}

// -------------------------------------------------------------------

// SecurityMessage

// required int32 msg_type = 1;
inline bool SecurityMessage::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SecurityMessage::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SecurityMessage::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SecurityMessage::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
inline ::google::protobuf::int32 SecurityMessage::msg_type() const {
  return msg_type_;
}
inline void SecurityMessage::set_msg_type(::google::protobuf::int32 value) {
  set_has_msg_type();
  msg_type_ = value;
}

// required string msg = 2;
inline bool SecurityMessage::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SecurityMessage::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SecurityMessage::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SecurityMessage::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& SecurityMessage::msg() const {
  return *msg_;
}
inline void SecurityMessage::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void SecurityMessage::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void SecurityMessage::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SecurityMessage::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* SecurityMessage::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SecurityMessageResponse

// required string response = 1;
inline bool SecurityMessageResponse::has_response() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SecurityMessageResponse::set_has_response() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SecurityMessageResponse::clear_has_response() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SecurityMessageResponse::clear_response() {
  if (response_ != &::google::protobuf::internal::kEmptyString) {
    response_->clear();
  }
  clear_has_response();
}
inline const ::std::string& SecurityMessageResponse::response() const {
  return *response_;
}
inline void SecurityMessageResponse::set_response(const ::std::string& value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(value);
}
inline void SecurityMessageResponse::set_response(const char* value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(value);
}
inline void SecurityMessageResponse::set_response(const char* value, size_t size) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SecurityMessageResponse::mutable_response() {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  return response_;
}
inline ::std::string* SecurityMessageResponse::release_response() {
  clear_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = response_;
    response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace scidb_msg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_network_2fproto_2fscidb_5fmsg_2eproto__INCLUDED
