// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "network/proto/scidb_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace scidb_msg {

namespace {

const ::google::protobuf::Descriptor* Query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Query_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fetch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fetch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Chunk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Chunk_reflection_ = NULL;
const ::google::protobuf::Descriptor* Chunk_Warning_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Chunk_Warning_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResult_AttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResult_AttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResult_DimensionDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResult_DimensionDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResult_Warning_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResult_Warning_reflection_ = NULL;
const ::google::protobuf::Descriptor* PhysicalPlan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhysicalPlan_reflection_ = NULL;
const ::google::protobuf::Descriptor* PhysicalPlan_InstanceListEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhysicalPlan_InstanceListEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* PhysicalPlan_InstanceList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhysicalPlan_InstanceList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* Error_ParsingContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_ParsingContext_reflection_ = NULL;
const ::google::protobuf::Descriptor* DummyQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DummyQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourcesFileExistsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourcesFileExistsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourcesFileExistsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourcesFileExistsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Control_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Control_reflection_ = NULL;
const ::google::protobuf::Descriptor* Control_Channel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Control_Channel_reflection_ = NULL;
const ::google::protobuf::Descriptor* MpiSlaveHandshake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MpiSlaveHandshake_reflection_ = NULL;
const ::google::protobuf::Descriptor* MpiSlaveResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MpiSlaveResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MpiSlaveCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MpiSlaveCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewClientStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewClientStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewClientComplete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewClientComplete_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecurityMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecurityMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecurityMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecurityMessageResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto() {
  protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "network/proto/scidb_msg.proto");
  GOOGLE_CHECK(file != NULL);
  Query_descriptor_ = file->message_type(0);
  static const int Query_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, afl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, program_options_),
  };
  Query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Query_descriptor_,
      Query::default_instance_,
      Query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Query));
  Fetch_descriptor_ = file->message_type(1);
  static const int Fetch_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fetch, attribute_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fetch, position_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fetch, obj_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fetch, array_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fetch, prefetch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fetch, fetch_id_),
  };
  Fetch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fetch_descriptor_,
      Fetch::default_instance_,
      Fetch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fetch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fetch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fetch));
  Chunk_descriptor_ = file->message_type(2);
  static const int Chunk_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, compression_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, coordinates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, array_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, attribute_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, eof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, sparse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, rle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, decompressed_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, has_next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, next_coordinates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, obj_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, tombstone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, dest_instance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, next_dest_instance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, fetch_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, warnings_),
  };
  Chunk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Chunk_descriptor_,
      Chunk::default_instance_,
      Chunk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Chunk));
  Chunk_Warning_descriptor_ = Chunk_descriptor_->nested_type(0);
  static const int Chunk_Warning_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk_Warning, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk_Warning, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk_Warning, function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk_Warning, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk_Warning, what_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk_Warning, stringified_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk_Warning, strings_namespace_),
  };
  Chunk_Warning_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Chunk_Warning_descriptor_,
      Chunk_Warning::default_instance_,
      Chunk_Warning_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk_Warning, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk_Warning, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Chunk_Warning));
  QueryResult_descriptor_ = file->message_type(3);
  static const int QueryResult_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, array_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, dimensions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, explain_physical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, execution_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, selective_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, explain_logical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, warnings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, plugins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, exclusive_array_access_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, auto_commit_),
  };
  QueryResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryResult_descriptor_,
      QueryResult::default_instance_,
      QueryResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResult));
  QueryResult_AttributeDesc_descriptor_ = QueryResult_descriptor_->nested_type(0);
  static const int QueryResult_AttributeDesc_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_AttributeDesc, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_AttributeDesc, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_AttributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_AttributeDesc, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_AttributeDesc, default_compression_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_AttributeDesc, default_missing_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_AttributeDesc, default_value_),
  };
  QueryResult_AttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryResult_AttributeDesc_descriptor_,
      QueryResult_AttributeDesc::default_instance_,
      QueryResult_AttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_AttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_AttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResult_AttributeDesc));
  QueryResult_DimensionDesc_descriptor_ = QueryResult_descriptor_->nested_type(1);
  static const int QueryResult_DimensionDesc_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_DimensionDesc, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_DimensionDesc, start_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_DimensionDesc, curr_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_DimensionDesc, curr_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_DimensionDesc, end_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_DimensionDesc, chunk_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_DimensionDesc, chunk_overlap_),
  };
  QueryResult_DimensionDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryResult_DimensionDesc_descriptor_,
      QueryResult_DimensionDesc::default_instance_,
      QueryResult_DimensionDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_DimensionDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_DimensionDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResult_DimensionDesc));
  QueryResult_Warning_descriptor_ = QueryResult_descriptor_->nested_type(2);
  static const int QueryResult_Warning_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Warning, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Warning, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Warning, function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Warning, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Warning, what_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Warning, stringified_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Warning, strings_namespace_),
  };
  QueryResult_Warning_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryResult_Warning_descriptor_,
      QueryResult_Warning::default_instance_,
      QueryResult_Warning_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Warning, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Warning, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResult_Warning));
  PhysicalPlan_descriptor_ = file->message_type(4);
  static const int PhysicalPlan_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicalPlan, physical_plan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicalPlan, membership_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicalPlan, dead_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicalPlan, live_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicalPlan, cluster_uuid_),
  };
  PhysicalPlan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PhysicalPlan_descriptor_,
      PhysicalPlan::default_instance_,
      PhysicalPlan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicalPlan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicalPlan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PhysicalPlan));
  PhysicalPlan_InstanceListEntry_descriptor_ = PhysicalPlan_descriptor_->nested_type(0);
  static const int PhysicalPlan_InstanceListEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicalPlan_InstanceListEntry, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicalPlan_InstanceListEntry, gen_id_),
  };
  PhysicalPlan_InstanceListEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PhysicalPlan_InstanceListEntry_descriptor_,
      PhysicalPlan_InstanceListEntry::default_instance_,
      PhysicalPlan_InstanceListEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicalPlan_InstanceListEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicalPlan_InstanceListEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PhysicalPlan_InstanceListEntry));
  PhysicalPlan_InstanceList_descriptor_ = PhysicalPlan_descriptor_->nested_type(1);
  static const int PhysicalPlan_InstanceList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicalPlan_InstanceList, instance_entry_),
  };
  PhysicalPlan_InstanceList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PhysicalPlan_InstanceList_descriptor_,
      PhysicalPlan_InstanceList::default_instance_,
      PhysicalPlan_InstanceList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicalPlan_InstanceList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicalPlan_InstanceList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PhysicalPlan_InstanceList));
  Error_descriptor_ = file->message_type(5);
  static const int Error_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, what_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, errors_namespace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, short_error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, long_error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, stringified_short_error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, stringified_long_error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, parsing_context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, cluster_uuid_),
  };
  Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Error));
  Error_ParsingContext_descriptor_ = Error_descriptor_->nested_type(0);
  static const int Error_ParsingContext_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_ParsingContext, query_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_ParsingContext, line_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_ParsingContext, col_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_ParsingContext, line_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_ParsingContext, col_end_),
  };
  Error_ParsingContext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Error_ParsingContext_descriptor_,
      Error_ParsingContext::default_instance_,
      Error_ParsingContext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_ParsingContext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_ParsingContext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Error_ParsingContext));
  DummyQuery_descriptor_ = file->message_type(6);
  static const int DummyQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyQuery, payload_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyQuery, cluster_uuid_),
  };
  DummyQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DummyQuery_descriptor_,
      DummyQuery::default_instance_,
      DummyQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DummyQuery));
  ResourcesFileExistsRequest_descriptor_ = file->message_type(7);
  static const int ResourcesFileExistsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourcesFileExistsRequest, resource_request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourcesFileExistsRequest, file_path_),
  };
  ResourcesFileExistsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourcesFileExistsRequest_descriptor_,
      ResourcesFileExistsRequest::default_instance_,
      ResourcesFileExistsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourcesFileExistsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourcesFileExistsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourcesFileExistsRequest));
  ResourcesFileExistsResponse_descriptor_ = file->message_type(8);
  static const int ResourcesFileExistsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourcesFileExistsResponse, resource_request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourcesFileExistsResponse, exits_flag_),
  };
  ResourcesFileExistsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourcesFileExistsResponse_descriptor_,
      ResourcesFileExistsResponse::default_instance_,
      ResourcesFileExistsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourcesFileExistsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourcesFileExistsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourcesFileExistsResponse));
  Control_descriptor_ = file->message_type(9);
  static const int Control_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, local_gen_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, remote_gen_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, channels_),
  };
  Control_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Control_descriptor_,
      Control::default_instance_,
      Control_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Control));
  Control_Channel_descriptor_ = Control_descriptor_->nested_type(0);
  static const int Control_Channel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_Channel, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_Channel, available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_Channel, local_sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_Channel, remote_sn_),
  };
  Control_Channel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Control_Channel_descriptor_,
      Control_Channel::default_instance_,
      Control_Channel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_Channel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_Channel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Control_Channel));
  MpiSlaveHandshake_descriptor_ = file->message_type(10);
  static const int MpiSlaveHandshake_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveHandshake, cluster_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveHandshake, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveHandshake, launch_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveHandshake, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveHandshake, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveHandshake, ppid_),
  };
  MpiSlaveHandshake_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MpiSlaveHandshake_descriptor_,
      MpiSlaveHandshake::default_instance_,
      MpiSlaveHandshake_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveHandshake, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveHandshake, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MpiSlaveHandshake));
  MpiSlaveResult_descriptor_ = file->message_type(11);
  static const int MpiSlaveResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveResult, launch_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveResult, status_),
  };
  MpiSlaveResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MpiSlaveResult_descriptor_,
      MpiSlaveResult::default_instance_,
      MpiSlaveResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MpiSlaveResult));
  MpiSlaveCommand_descriptor_ = file->message_type(12);
  static const int MpiSlaveCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveCommand, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveCommand, args_),
  };
  MpiSlaveCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MpiSlaveCommand_descriptor_,
      MpiSlaveCommand::default_instance_,
      MpiSlaveCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MpiSlaveCommand));
  NewClientStart_descriptor_ = file->message_type(13);
  static const int NewClientStart_offsets_[1] = {
  };
  NewClientStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewClientStart_descriptor_,
      NewClientStart::default_instance_,
      NewClientStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewClientStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewClientStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewClientStart));
  NewClientComplete_descriptor_ = file->message_type(14);
  static const int NewClientComplete_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewClientComplete, authenticated_),
  };
  NewClientComplete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewClientComplete_descriptor_,
      NewClientComplete::default_instance_,
      NewClientComplete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewClientComplete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewClientComplete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewClientComplete));
  SecurityMessage_descriptor_ = file->message_type(15);
  static const int SecurityMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityMessage, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityMessage, msg_),
  };
  SecurityMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecurityMessage_descriptor_,
      SecurityMessage::default_instance_,
      SecurityMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecurityMessage));
  SecurityMessageResponse_descriptor_ = file->message_type(16);
  static const int SecurityMessageResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityMessageResponse, response_),
  };
  SecurityMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecurityMessageResponse_descriptor_,
      SecurityMessageResponse::default_instance_,
      SecurityMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecurityMessageResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_network_2fproto_2fscidb_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Query_descriptor_, &Query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fetch_descriptor_, &Fetch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Chunk_descriptor_, &Chunk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Chunk_Warning_descriptor_, &Chunk_Warning::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResult_descriptor_, &QueryResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResult_AttributeDesc_descriptor_, &QueryResult_AttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResult_DimensionDesc_descriptor_, &QueryResult_DimensionDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResult_Warning_descriptor_, &QueryResult_Warning::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PhysicalPlan_descriptor_, &PhysicalPlan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PhysicalPlan_InstanceListEntry_descriptor_, &PhysicalPlan_InstanceListEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PhysicalPlan_InstanceList_descriptor_, &PhysicalPlan_InstanceList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Error_descriptor_, &Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Error_ParsingContext_descriptor_, &Error_ParsingContext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DummyQuery_descriptor_, &DummyQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourcesFileExistsRequest_descriptor_, &ResourcesFileExistsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourcesFileExistsResponse_descriptor_, &ResourcesFileExistsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Control_descriptor_, &Control::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Control_Channel_descriptor_, &Control_Channel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MpiSlaveHandshake_descriptor_, &MpiSlaveHandshake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MpiSlaveResult_descriptor_, &MpiSlaveResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MpiSlaveCommand_descriptor_, &MpiSlaveCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewClientStart_descriptor_, &NewClientStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewClientComplete_descriptor_, &NewClientComplete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecurityMessage_descriptor_, &SecurityMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecurityMessageResponse_descriptor_, &SecurityMessageResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto() {
  delete Query::default_instance_;
  delete Query_reflection_;
  delete Fetch::default_instance_;
  delete Fetch_reflection_;
  delete Chunk::default_instance_;
  delete Chunk_reflection_;
  delete Chunk_Warning::default_instance_;
  delete Chunk_Warning_reflection_;
  delete QueryResult::default_instance_;
  delete QueryResult_reflection_;
  delete QueryResult_AttributeDesc::default_instance_;
  delete QueryResult_AttributeDesc_reflection_;
  delete QueryResult_DimensionDesc::default_instance_;
  delete QueryResult_DimensionDesc_reflection_;
  delete QueryResult_Warning::default_instance_;
  delete QueryResult_Warning_reflection_;
  delete PhysicalPlan::default_instance_;
  delete PhysicalPlan_reflection_;
  delete PhysicalPlan_InstanceListEntry::default_instance_;
  delete PhysicalPlan_InstanceListEntry_reflection_;
  delete PhysicalPlan_InstanceList::default_instance_;
  delete PhysicalPlan_InstanceList_reflection_;
  delete Error::default_instance_;
  delete Error_reflection_;
  delete Error_ParsingContext::default_instance_;
  delete Error_ParsingContext_reflection_;
  delete DummyQuery::default_instance_;
  delete DummyQuery_reflection_;
  delete ResourcesFileExistsRequest::default_instance_;
  delete ResourcesFileExistsRequest_reflection_;
  delete ResourcesFileExistsResponse::default_instance_;
  delete ResourcesFileExistsResponse_reflection_;
  delete Control::default_instance_;
  delete Control_reflection_;
  delete Control_Channel::default_instance_;
  delete Control_Channel_reflection_;
  delete MpiSlaveHandshake::default_instance_;
  delete MpiSlaveHandshake_reflection_;
  delete MpiSlaveResult::default_instance_;
  delete MpiSlaveResult_reflection_;
  delete MpiSlaveCommand::default_instance_;
  delete MpiSlaveCommand_reflection_;
  delete NewClientStart::default_instance_;
  delete NewClientStart_reflection_;
  delete NewClientComplete::default_instance_;
  delete NewClientComplete_reflection_;
  delete SecurityMessage::default_instance_;
  delete SecurityMessage_reflection_;
  delete SecurityMessageResponse::default_instance_;
  delete SecurityMessageResponse_reflection_;
}

void protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035network/proto/scidb_msg.proto\022\tscidb_m"
    "sg\"L\n\005Query\022\r\n\005query\030\001 \002(\t\022\022\n\003afl\030\002 \002(\010:"
    "\005false\022 \n\017program_options\030\003 \001(\t:\007unknown"
    "\"\203\001\n\005Fetch\022\024\n\014attribute_id\030\002 \001(\r\022\025\n\rposi"
    "tion_only\030\003 \001(\010\022\020\n\010obj_type\030\004 \001(\r\022\022\n\narr"
    "ay_name\030\005 \001(\t\022\025\n\rprefetch_size\030\006 \001(\r\022\020\n\010"
    "fetch_id\030\007 \001(\004\"\214\004\n\005Chunk\022\032\n\022compression_"
    "method\030\001 \001(\005\022\023\n\013coordinates\030\002 \003(\003\022\020\n\010arr"
    "ay_id\030\003 \001(\004\022\024\n\014attribute_id\030\004 \001(\r\022\013\n\003eof"
    "\030\005 \002(\010\022\016\n\006sparse\030\006 \001(\010\022\013\n\003rle\030\007 \001(\010\022\031\n\021d"
    "ecompressed_size\030\010 \001(\004\022\020\n\010has_next\030\t \001(\010"
    "\022\030\n\020next_coordinates\030\n \003(\003\022\020\n\010obj_type\030\013"
    " \001(\r\022\r\n\005count\030\014 \001(\004\022\030\n\ttombstone\030\r \001(\010:\005"
    "false\022\025\n\rdest_instance\030\016 \001(\004\022\032\n\022next_des"
    "t_instance\030\017 \001(\004\022\020\n\010fetch_id\030\020 \001(\004\022*\n\010wa"
    "rnings\030\021 \003(\0132\030.scidb_msg.Chunk.Warning\032\214"
    "\001\n\007Warning\022\014\n\004code\030\001 \002(\005\022\014\n\004file\030\002 \002(\t\022\020"
    "\n\010function\030\003 \002(\t\022\014\n\004line\030\004 \002(\005\022\020\n\010what_s"
    "tr\030\005 \002(\t\022\030\n\020stringified_code\030\006 \002(\t\022\031\n\021st"
    "rings_namespace\030\007 \002(\t\"\267\006\n\013QueryResult\022\022\n"
    "\narray_name\030\002 \001(\t\0228\n\nattributes\030\003 \003(\0132$."
    "scidb_msg.QueryResult.AttributeDesc\0228\n\nd"
    "imensions\030\004 \003(\0132$.scidb_msg.QueryResult."
    "DimensionDesc\022\030\n\020explain_physical\030\005 \001(\t\022"
    "\026\n\016execution_time\030\006 \001(\004\022\021\n\tselective\030\007 \001"
    "(\010\022\027\n\017explain_logical\030\010 \001(\t\0220\n\010warnings\030"
    "\t \003(\0132\036.scidb_msg.QueryResult.Warning\022\017\n"
    "\007plugins\030\n \003(\t\022\036\n\026exclusive_array_access"
    "\030\013 \001(\010\022\023\n\013auto_commit\030\014 \001(\010\032\241\001\n\rAttribut"
    "eDesc\022\n\n\002id\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022\014\n\004type\030"
    "\003 \002(\t\022\r\n\005flags\030\004 \002(\r\022\"\n\032default_compress"
    "ion_method\030\005 \002(\r\022\036\n\026default_missing_reas"
    "on\030\006 \002(\005\022\025\n\rdefault_value\030\007 \002(\014\032\226\001\n\rDime"
    "nsionDesc\022\014\n\004name\030\001 \002(\t\022\021\n\tstart_min\030\002 \002"
    "(\003\022\022\n\ncurr_start\030\003 \002(\003\022\020\n\010curr_end\030\004 \002(\003"
    "\022\017\n\007end_max\030\005 \002(\003\022\026\n\016chunk_interval\030\006 \002("
    "\003\022\025\n\rchunk_overlap\030\007 \002(\003\032\214\001\n\007Warning\022\014\n\004"
    "code\030\001 \002(\005\022\014\n\004file\030\002 \002(\t\022\020\n\010function\030\003 \002"
    "(\t\022\014\n\004line\030\004 \002(\005\022\020\n\010what_str\030\005 \002(\t\022\030\n\020st"
    "ringified_code\030\006 \002(\t\022\031\n\021strings_namespac"
    "e\030\007 \002(\t\"\321\002\n\014PhysicalPlan\022\025\n\rphysical_pla"
    "n\030\002 \002(\t\022\025\n\rmembership_id\030\003 \002(\004\0227\n\tdead_l"
    "ist\030\004 \002(\0132$.scidb_msg.PhysicalPlan.Insta"
    "nceList\0227\n\tlive_list\030\005 \002(\0132$.scidb_msg.P"
    "hysicalPlan.InstanceList\022\024\n\014cluster_uuid"
    "\030\006 \002(\t\0328\n\021InstanceListEntry\022\023\n\013instance_"
    "id\030\002 \002(\004\022\016\n\006gen_id\030\003 \002(\004\032Q\n\014InstanceList"
    "\022A\n\016instance_entry\030\002 \003(\0132).scidb_msg.Phy"
    "sicalPlan.InstanceListEntry\"\257\003\n\005Error\022\014\n"
    "\004type\030\001 \002(\005\022\014\n\004file\030\002 \001(\t\022\020\n\010function\030\003 "
    "\001(\t\022\014\n\004line\030\004 \001(\005\022\020\n\010what_str\030\005 \001(\t\022\030\n\020e"
    "rrors_namespace\030\006 \002(\t\022\030\n\020short_error_cod"
    "e\030\007 \002(\005\022\027\n\017long_error_code\030\010 \002(\005\022$\n\034stri"
    "ngified_short_error_code\030\t \001(\t\022#\n\033string"
    "ified_long_error_code\030\n \001(\t\0228\n\017parsing_c"
    "ontext\030\013 \001(\0132\037.scidb_msg.Error.ParsingCo"
    "ntext\022\024\n\014cluster_uuid\030\014 \001(\t\032p\n\016ParsingCo"
    "ntext\022\024\n\014query_string\030\001 \002(\t\022\022\n\nline_star"
    "t\030\002 \002(\r\022\021\n\tcol_start\030\003 \002(\r\022\020\n\010line_end\030\004"
    " \002(\r\022\017\n\007col_end\030\005 \002(\r\"6\n\nDummyQuery\022\022\n\np"
    "ayload_id\030\002 \001(\004\022\024\n\014cluster_uuid\030\003 \001(\t\"L\n"
    "\032ResourcesFileExistsRequest\022\033\n\023resource_"
    "request_id\030\001 \002(\004\022\021\n\tfile_path\030\002 \002(\t\"N\n\033R"
    "esourcesFileExistsResponse\022\033\n\023resource_r"
    "equest_id\030\001 \002(\004\022\022\n\nexits_flag\030\002 \002(\010\"\263\001\n\007"
    "Control\022\024\n\014local_gen_id\030\001 \002(\004\022\025\n\rremote_"
    "gen_id\030\002 \002(\004\022,\n\010channels\030\003 \003(\0132\032.scidb_m"
    "sg.Control.Channel\032M\n\007Channel\022\n\n\002id\030\001 \002("
    "\r\022\021\n\tavailable\030\002 \002(\004\022\020\n\010local_sn\030\003 \002(\004\022\021"
    "\n\tremote_sn\030\004 \002(\004\"z\n\021MpiSlaveHandshake\022\024"
    "\n\014cluster_uuid\030\001 \002(\t\022\023\n\013instance_id\030\002 \002("
    "\004\022\021\n\tlaunch_id\030\003 \002(\004\022\014\n\004rank\030\004 \002(\004\022\013\n\003pi"
    "d\030\005 \002(\005\022\014\n\004ppid\030\006 \002(\005\"3\n\016MpiSlaveResult\022"
    "\021\n\tlaunch_id\030\001 \002(\004\022\016\n\006status\030\003 \002(\003\"0\n\017Mp"
    "iSlaveCommand\022\017\n\007command\030\001 \002(\t\022\014\n\004args\030\002"
    " \003(\t\"\020\n\016NewClientStart\"*\n\021NewClientCompl"
    "ete\022\025\n\rauthenticated\030\001 \002(\010\"0\n\017SecurityMe"
    "ssage\022\020\n\010msg_type\030\001 \002(\005\022\013\n\003msg\030\002 \002(\t\"+\n\027"
    "SecurityMessageResponse\022\020\n\010response\030\001 \002("
    "\tB\026\n\024org.scidb.io.network", 3185);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "network/proto/scidb_msg.proto", &protobuf_RegisterTypes);
  Query::default_instance_ = new Query();
  Fetch::default_instance_ = new Fetch();
  Chunk::default_instance_ = new Chunk();
  Chunk_Warning::default_instance_ = new Chunk_Warning();
  QueryResult::default_instance_ = new QueryResult();
  QueryResult_AttributeDesc::default_instance_ = new QueryResult_AttributeDesc();
  QueryResult_DimensionDesc::default_instance_ = new QueryResult_DimensionDesc();
  QueryResult_Warning::default_instance_ = new QueryResult_Warning();
  PhysicalPlan::default_instance_ = new PhysicalPlan();
  PhysicalPlan_InstanceListEntry::default_instance_ = new PhysicalPlan_InstanceListEntry();
  PhysicalPlan_InstanceList::default_instance_ = new PhysicalPlan_InstanceList();
  Error::default_instance_ = new Error();
  Error_ParsingContext::default_instance_ = new Error_ParsingContext();
  DummyQuery::default_instance_ = new DummyQuery();
  ResourcesFileExistsRequest::default_instance_ = new ResourcesFileExistsRequest();
  ResourcesFileExistsResponse::default_instance_ = new ResourcesFileExistsResponse();
  Control::default_instance_ = new Control();
  Control_Channel::default_instance_ = new Control_Channel();
  MpiSlaveHandshake::default_instance_ = new MpiSlaveHandshake();
  MpiSlaveResult::default_instance_ = new MpiSlaveResult();
  MpiSlaveCommand::default_instance_ = new MpiSlaveCommand();
  NewClientStart::default_instance_ = new NewClientStart();
  NewClientComplete::default_instance_ = new NewClientComplete();
  SecurityMessage::default_instance_ = new SecurityMessage();
  SecurityMessageResponse::default_instance_ = new SecurityMessageResponse();
  Query::default_instance_->InitAsDefaultInstance();
  Fetch::default_instance_->InitAsDefaultInstance();
  Chunk::default_instance_->InitAsDefaultInstance();
  Chunk_Warning::default_instance_->InitAsDefaultInstance();
  QueryResult::default_instance_->InitAsDefaultInstance();
  QueryResult_AttributeDesc::default_instance_->InitAsDefaultInstance();
  QueryResult_DimensionDesc::default_instance_->InitAsDefaultInstance();
  QueryResult_Warning::default_instance_->InitAsDefaultInstance();
  PhysicalPlan::default_instance_->InitAsDefaultInstance();
  PhysicalPlan_InstanceListEntry::default_instance_->InitAsDefaultInstance();
  PhysicalPlan_InstanceList::default_instance_->InitAsDefaultInstance();
  Error::default_instance_->InitAsDefaultInstance();
  Error_ParsingContext::default_instance_->InitAsDefaultInstance();
  DummyQuery::default_instance_->InitAsDefaultInstance();
  ResourcesFileExistsRequest::default_instance_->InitAsDefaultInstance();
  ResourcesFileExistsResponse::default_instance_->InitAsDefaultInstance();
  Control::default_instance_->InitAsDefaultInstance();
  Control_Channel::default_instance_->InitAsDefaultInstance();
  MpiSlaveHandshake::default_instance_->InitAsDefaultInstance();
  MpiSlaveResult::default_instance_->InitAsDefaultInstance();
  MpiSlaveCommand::default_instance_->InitAsDefaultInstance();
  NewClientStart::default_instance_->InitAsDefaultInstance();
  NewClientComplete::default_instance_->InitAsDefaultInstance();
  SecurityMessage::default_instance_->InitAsDefaultInstance();
  SecurityMessageResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_network_2fproto_2fscidb_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_network_2fproto_2fscidb_5fmsg_2eproto {
  StaticDescriptorInitializer_network_2fproto_2fscidb_5fmsg_2eproto() {
    protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();
  }
} static_descriptor_initializer_network_2fproto_2fscidb_5fmsg_2eproto_;


// ===================================================================

const ::std::string Query::_default_program_options_("unknown");
#ifndef _MSC_VER
const int Query::kQueryFieldNumber;
const int Query::kAflFieldNumber;
const int Query::kProgramOptionsFieldNumber;
#endif  // !_MSC_VER

Query::Query()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Query::InitAsDefaultInstance() {
}

Query::Query(const Query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Query::SharedCtor() {
  _cached_size_ = 0;
  query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  afl_ = false;
  program_options_ = const_cast< ::std::string*>(&_default_program_options_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Query::~Query() {
  SharedDtor();
}

void Query::SharedDtor() {
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    delete query_;
  }
  if (program_options_ != &_default_program_options_) {
    delete program_options_;
  }
  if (this != default_instance_) {
  }
}

void Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Query_descriptor_;
}

const Query& Query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();  return *default_instance_;
}

Query* Query::default_instance_ = NULL;

Query* Query::New() const {
  return new Query;
}

void Query::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_query()) {
      if (query_ != &::google::protobuf::internal::kEmptyString) {
        query_->clear();
      }
    }
    afl_ = false;
    if (has_program_options()) {
      if (program_options_ != &_default_program_options_) {
        program_options_->assign(_default_program_options_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string query = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_afl;
        break;
      }
      
      // required bool afl = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_afl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &afl_)));
          set_has_afl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_program_options;
        break;
      }
      
      // optional string program_options = 3 [default = "unknown"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_program_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_program_options()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->program_options().data(), this->program_options().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->query(), output);
  }
  
  // required bool afl = 2 [default = false];
  if (has_afl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->afl(), output);
  }
  
  // optional string program_options = 3 [default = "unknown"];
  if (has_program_options()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->program_options().data(), this->program_options().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->program_options(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }
  
  // required bool afl = 2 [default = false];
  if (has_afl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->afl(), target);
  }
  
  // optional string program_options = 3 [default = "unknown"];
  if (has_program_options()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->program_options().data(), this->program_options().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->program_options(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Query::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }
    
    // required bool afl = 2 [default = false];
    if (has_afl()) {
      total_size += 1 + 1;
    }
    
    // optional string program_options = 3 [default = "unknown"];
    if (has_program_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->program_options());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Query::MergeFrom(const Query& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query()) {
      set_query(from.query());
    }
    if (from.has_afl()) {
      set_afl(from.afl());
    }
    if (from.has_program_options()) {
      set_program_options(from.program_options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Query::CopyFrom(const Query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Query::Swap(Query* other) {
  if (other != this) {
    std::swap(query_, other->query_);
    std::swap(afl_, other->afl_);
    std::swap(program_options_, other->program_options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Query_descriptor_;
  metadata.reflection = Query_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fetch::kAttributeIdFieldNumber;
const int Fetch::kPositionOnlyFieldNumber;
const int Fetch::kObjTypeFieldNumber;
const int Fetch::kArrayNameFieldNumber;
const int Fetch::kPrefetchSizeFieldNumber;
const int Fetch::kFetchIdFieldNumber;
#endif  // !_MSC_VER

Fetch::Fetch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fetch::InitAsDefaultInstance() {
}

Fetch::Fetch(const Fetch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fetch::SharedCtor() {
  _cached_size_ = 0;
  attribute_id_ = 0u;
  position_only_ = false;
  obj_type_ = 0u;
  array_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prefetch_size_ = 0u;
  fetch_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fetch::~Fetch() {
  SharedDtor();
}

void Fetch::SharedDtor() {
  if (array_name_ != &::google::protobuf::internal::kEmptyString) {
    delete array_name_;
  }
  if (this != default_instance_) {
  }
}

void Fetch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fetch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fetch_descriptor_;
}

const Fetch& Fetch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();  return *default_instance_;
}

Fetch* Fetch::default_instance_ = NULL;

Fetch* Fetch::New() const {
  return new Fetch;
}

void Fetch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attribute_id_ = 0u;
    position_only_ = false;
    obj_type_ = 0u;
    if (has_array_name()) {
      if (array_name_ != &::google::protobuf::internal::kEmptyString) {
        array_name_->clear();
      }
    }
    prefetch_size_ = 0u;
    fetch_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 attribute_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_id_)));
          set_has_attribute_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_position_only;
        break;
      }
      
      // optional bool position_only = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &position_only_)));
          set_has_position_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_obj_type;
        break;
      }
      
      // optional uint32 obj_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obj_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obj_type_)));
          set_has_obj_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_array_name;
        break;
      }
      
      // optional string array_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_array_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_array_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->array_name().data(), this->array_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_prefetch_size;
        break;
      }
      
      // optional uint32 prefetch_size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prefetch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prefetch_size_)));
          set_has_prefetch_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fetch_id;
        break;
      }
      
      // optional uint64 fetch_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetch_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fetch_id_)));
          set_has_fetch_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 attribute_id = 2;
  if (has_attribute_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attribute_id(), output);
  }
  
  // optional bool position_only = 3;
  if (has_position_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->position_only(), output);
  }
  
  // optional uint32 obj_type = 4;
  if (has_obj_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->obj_type(), output);
  }
  
  // optional string array_name = 5;
  if (has_array_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->array_name().data(), this->array_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->array_name(), output);
  }
  
  // optional uint32 prefetch_size = 6;
  if (has_prefetch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->prefetch_size(), output);
  }
  
  // optional uint64 fetch_id = 7;
  if (has_fetch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->fetch_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fetch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 attribute_id = 2;
  if (has_attribute_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attribute_id(), target);
  }
  
  // optional bool position_only = 3;
  if (has_position_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->position_only(), target);
  }
  
  // optional uint32 obj_type = 4;
  if (has_obj_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->obj_type(), target);
  }
  
  // optional string array_name = 5;
  if (has_array_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->array_name().data(), this->array_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->array_name(), target);
  }
  
  // optional uint32 prefetch_size = 6;
  if (has_prefetch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->prefetch_size(), target);
  }
  
  // optional uint64 fetch_id = 7;
  if (has_fetch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->fetch_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fetch::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 attribute_id = 2;
    if (has_attribute_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_id());
    }
    
    // optional bool position_only = 3;
    if (has_position_only()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 obj_type = 4;
    if (has_obj_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->obj_type());
    }
    
    // optional string array_name = 5;
    if (has_array_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->array_name());
    }
    
    // optional uint32 prefetch_size = 6;
    if (has_prefetch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prefetch_size());
    }
    
    // optional uint64 fetch_id = 7;
    if (has_fetch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fetch_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fetch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fetch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fetch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fetch::MergeFrom(const Fetch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attribute_id()) {
      set_attribute_id(from.attribute_id());
    }
    if (from.has_position_only()) {
      set_position_only(from.position_only());
    }
    if (from.has_obj_type()) {
      set_obj_type(from.obj_type());
    }
    if (from.has_array_name()) {
      set_array_name(from.array_name());
    }
    if (from.has_prefetch_size()) {
      set_prefetch_size(from.prefetch_size());
    }
    if (from.has_fetch_id()) {
      set_fetch_id(from.fetch_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fetch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fetch::CopyFrom(const Fetch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fetch::IsInitialized() const {
  
  return true;
}

void Fetch::Swap(Fetch* other) {
  if (other != this) {
    std::swap(attribute_id_, other->attribute_id_);
    std::swap(position_only_, other->position_only_);
    std::swap(obj_type_, other->obj_type_);
    std::swap(array_name_, other->array_name_);
    std::swap(prefetch_size_, other->prefetch_size_);
    std::swap(fetch_id_, other->fetch_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fetch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fetch_descriptor_;
  metadata.reflection = Fetch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Chunk_Warning::kCodeFieldNumber;
const int Chunk_Warning::kFileFieldNumber;
const int Chunk_Warning::kFunctionFieldNumber;
const int Chunk_Warning::kLineFieldNumber;
const int Chunk_Warning::kWhatStrFieldNumber;
const int Chunk_Warning::kStringifiedCodeFieldNumber;
const int Chunk_Warning::kStringsNamespaceFieldNumber;
#endif  // !_MSC_VER

Chunk_Warning::Chunk_Warning()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Chunk_Warning::InitAsDefaultInstance() {
}

Chunk_Warning::Chunk_Warning(const Chunk_Warning& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Chunk_Warning::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  function_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  line_ = 0;
  what_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stringified_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strings_namespace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Chunk_Warning::~Chunk_Warning() {
  SharedDtor();
}

void Chunk_Warning::SharedDtor() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    delete file_;
  }
  if (function_ != &::google::protobuf::internal::kEmptyString) {
    delete function_;
  }
  if (what_str_ != &::google::protobuf::internal::kEmptyString) {
    delete what_str_;
  }
  if (stringified_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stringified_code_;
  }
  if (strings_namespace_ != &::google::protobuf::internal::kEmptyString) {
    delete strings_namespace_;
  }
  if (this != default_instance_) {
  }
}

void Chunk_Warning::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chunk_Warning::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chunk_Warning_descriptor_;
}

const Chunk_Warning& Chunk_Warning::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();  return *default_instance_;
}

Chunk_Warning* Chunk_Warning::default_instance_ = NULL;

Chunk_Warning* Chunk_Warning::New() const {
  return new Chunk_Warning;
}

void Chunk_Warning::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::kEmptyString) {
        file_->clear();
      }
    }
    if (has_function()) {
      if (function_ != &::google::protobuf::internal::kEmptyString) {
        function_->clear();
      }
    }
    line_ = 0;
    if (has_what_str()) {
      if (what_str_ != &::google::protobuf::internal::kEmptyString) {
        what_str_->clear();
      }
    }
    if (has_stringified_code()) {
      if (stringified_code_ != &::google::protobuf::internal::kEmptyString) {
        stringified_code_->clear();
      }
    }
    if (has_strings_namespace()) {
      if (strings_namespace_ != &::google::protobuf::internal::kEmptyString) {
        strings_namespace_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Chunk_Warning::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file;
        break;
      }
      
      // required string file = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_function;
        break;
      }
      
      // required string function = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->function().data(), this->function().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_line;
        break;
      }
      
      // required int32 line = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_what_str;
        break;
      }
      
      // required string what_str = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_what_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_what_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->what_str().data(), this->what_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stringified_code;
        break;
      }
      
      // required string stringified_code = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringified_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringified_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stringified_code().data(), this->stringified_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_strings_namespace;
        break;
      }
      
      // required string strings_namespace = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strings_namespace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strings_namespace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strings_namespace().data(), this->strings_namespace().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Chunk_Warning::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }
  
  // required string file = 2;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file(), output);
  }
  
  // required string function = 3;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->function(), output);
  }
  
  // required int32 line = 4;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->line(), output);
  }
  
  // required string what_str = 5;
  if (has_what_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->what_str().data(), this->what_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->what_str(), output);
  }
  
  // required string stringified_code = 6;
  if (has_stringified_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringified_code().data(), this->stringified_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->stringified_code(), output);
  }
  
  // required string strings_namespace = 7;
  if (has_strings_namespace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strings_namespace().data(), this->strings_namespace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->strings_namespace(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Chunk_Warning::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }
  
  // required string file = 2;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file(), target);
  }
  
  // required string function = 3;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->function(), target);
  }
  
  // required int32 line = 4;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->line(), target);
  }
  
  // required string what_str = 5;
  if (has_what_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->what_str().data(), this->what_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->what_str(), target);
  }
  
  // required string stringified_code = 6;
  if (has_stringified_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringified_code().data(), this->stringified_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->stringified_code(), target);
  }
  
  // required string strings_namespace = 7;
  if (has_strings_namespace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strings_namespace().data(), this->strings_namespace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->strings_namespace(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Chunk_Warning::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }
    
    // required string file = 2;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }
    
    // required string function = 3;
    if (has_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->function());
    }
    
    // required int32 line = 4;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line());
    }
    
    // required string what_str = 5;
    if (has_what_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->what_str());
    }
    
    // required string stringified_code = 6;
    if (has_stringified_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringified_code());
    }
    
    // required string strings_namespace = 7;
    if (has_strings_namespace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strings_namespace());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chunk_Warning::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Chunk_Warning* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Chunk_Warning*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Chunk_Warning::MergeFrom(const Chunk_Warning& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_function()) {
      set_function(from.function());
    }
    if (from.has_line()) {
      set_line(from.line());
    }
    if (from.has_what_str()) {
      set_what_str(from.what_str());
    }
    if (from.has_stringified_code()) {
      set_stringified_code(from.stringified_code());
    }
    if (from.has_strings_namespace()) {
      set_strings_namespace(from.strings_namespace());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Chunk_Warning::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chunk_Warning::CopyFrom(const Chunk_Warning& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chunk_Warning::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void Chunk_Warning::Swap(Chunk_Warning* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(file_, other->file_);
    std::swap(function_, other->function_);
    std::swap(line_, other->line_);
    std::swap(what_str_, other->what_str_);
    std::swap(stringified_code_, other->stringified_code_);
    std::swap(strings_namespace_, other->strings_namespace_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Chunk_Warning::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Chunk_Warning_descriptor_;
  metadata.reflection = Chunk_Warning_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Chunk::kCompressionMethodFieldNumber;
const int Chunk::kCoordinatesFieldNumber;
const int Chunk::kArrayIdFieldNumber;
const int Chunk::kAttributeIdFieldNumber;
const int Chunk::kEofFieldNumber;
const int Chunk::kSparseFieldNumber;
const int Chunk::kRleFieldNumber;
const int Chunk::kDecompressedSizeFieldNumber;
const int Chunk::kHasNextFieldNumber;
const int Chunk::kNextCoordinatesFieldNumber;
const int Chunk::kObjTypeFieldNumber;
const int Chunk::kCountFieldNumber;
const int Chunk::kTombstoneFieldNumber;
const int Chunk::kDestInstanceFieldNumber;
const int Chunk::kNextDestInstanceFieldNumber;
const int Chunk::kFetchIdFieldNumber;
const int Chunk::kWarningsFieldNumber;
#endif  // !_MSC_VER

Chunk::Chunk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Chunk::InitAsDefaultInstance() {
}

Chunk::Chunk(const Chunk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Chunk::SharedCtor() {
  _cached_size_ = 0;
  compression_method_ = 0;
  array_id_ = GOOGLE_ULONGLONG(0);
  attribute_id_ = 0u;
  eof_ = false;
  sparse_ = false;
  rle_ = false;
  decompressed_size_ = GOOGLE_ULONGLONG(0);
  has_next_ = false;
  obj_type_ = 0u;
  count_ = GOOGLE_ULONGLONG(0);
  tombstone_ = false;
  dest_instance_ = GOOGLE_ULONGLONG(0);
  next_dest_instance_ = GOOGLE_ULONGLONG(0);
  fetch_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Chunk::~Chunk() {
  SharedDtor();
}

void Chunk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Chunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chunk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chunk_descriptor_;
}

const Chunk& Chunk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();  return *default_instance_;
}

Chunk* Chunk::default_instance_ = NULL;

Chunk* Chunk::New() const {
  return new Chunk;
}

void Chunk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    compression_method_ = 0;
    array_id_ = GOOGLE_ULONGLONG(0);
    attribute_id_ = 0u;
    eof_ = false;
    sparse_ = false;
    rle_ = false;
    decompressed_size_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    has_next_ = false;
    obj_type_ = 0u;
    count_ = GOOGLE_ULONGLONG(0);
    tombstone_ = false;
    dest_instance_ = GOOGLE_ULONGLONG(0);
    next_dest_instance_ = GOOGLE_ULONGLONG(0);
    fetch_id_ = GOOGLE_ULONGLONG(0);
  }
  coordinates_.Clear();
  next_coordinates_.Clear();
  warnings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Chunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 compression_method = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compression_method_)));
          set_has_compression_method();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coordinates;
        break;
      }
      
      // repeated int64 coordinates = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coordinates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_coordinates())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_coordinates())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coordinates;
        if (input->ExpectTag(24)) goto parse_array_id;
        break;
      }
      
      // optional uint64 array_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_array_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &array_id_)));
          set_has_array_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attribute_id;
        break;
      }
      
      // optional uint32 attribute_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_id_)));
          set_has_attribute_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_eof;
        break;
      }
      
      // required bool eof = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eof_)));
          set_has_eof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sparse;
        break;
      }
      
      // optional bool sparse = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sparse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sparse_)));
          set_has_sparse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rle;
        break;
      }
      
      // optional bool rle = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rle_)));
          set_has_rle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_decompressed_size;
        break;
      }
      
      // optional uint64 decompressed_size = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decompressed_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &decompressed_size_)));
          set_has_decompressed_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_has_next;
        break;
      }
      
      // optional bool has_next = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_next:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_next_)));
          set_has_has_next();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_next_coordinates;
        break;
      }
      
      // repeated int64 next_coordinates = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_coordinates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 80, input, this->mutable_next_coordinates())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_next_coordinates())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_next_coordinates;
        if (input->ExpectTag(88)) goto parse_obj_type;
        break;
      }
      
      // optional uint32 obj_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obj_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obj_type_)));
          set_has_obj_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_count;
        break;
      }
      
      // optional uint64 count = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tombstone;
        break;
      }
      
      // optional bool tombstone = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tombstone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tombstone_)));
          set_has_tombstone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_dest_instance;
        break;
      }
      
      // optional uint64 dest_instance = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_instance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dest_instance_)));
          set_has_dest_instance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_next_dest_instance;
        break;
      }
      
      // optional uint64 next_dest_instance = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_dest_instance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_dest_instance_)));
          set_has_next_dest_instance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_fetch_id;
        break;
      }
      
      // optional uint64 fetch_id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetch_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fetch_id_)));
          set_has_fetch_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_warnings;
        break;
      }
      
      // repeated .scidb_msg.Chunk.Warning warnings = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_warnings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_warnings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_warnings;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Chunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 compression_method = 1;
  if (has_compression_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->compression_method(), output);
  }
  
  // repeated int64 coordinates = 2;
  for (int i = 0; i < this->coordinates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->coordinates(i), output);
  }
  
  // optional uint64 array_id = 3;
  if (has_array_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->array_id(), output);
  }
  
  // optional uint32 attribute_id = 4;
  if (has_attribute_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attribute_id(), output);
  }
  
  // required bool eof = 5;
  if (has_eof()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->eof(), output);
  }
  
  // optional bool sparse = 6;
  if (has_sparse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->sparse(), output);
  }
  
  // optional bool rle = 7;
  if (has_rle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->rle(), output);
  }
  
  // optional uint64 decompressed_size = 8;
  if (has_decompressed_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->decompressed_size(), output);
  }
  
  // optional bool has_next = 9;
  if (has_has_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->has_next(), output);
  }
  
  // repeated int64 next_coordinates = 10;
  for (int i = 0; i < this->next_coordinates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      10, this->next_coordinates(i), output);
  }
  
  // optional uint32 obj_type = 11;
  if (has_obj_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->obj_type(), output);
  }
  
  // optional uint64 count = 12;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->count(), output);
  }
  
  // optional bool tombstone = 13 [default = false];
  if (has_tombstone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->tombstone(), output);
  }
  
  // optional uint64 dest_instance = 14;
  if (has_dest_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->dest_instance(), output);
  }
  
  // optional uint64 next_dest_instance = 15;
  if (has_next_dest_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->next_dest_instance(), output);
  }
  
  // optional uint64 fetch_id = 16;
  if (has_fetch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->fetch_id(), output);
  }
  
  // repeated .scidb_msg.Chunk.Warning warnings = 17;
  for (int i = 0; i < this->warnings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->warnings(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Chunk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 compression_method = 1;
  if (has_compression_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->compression_method(), target);
  }
  
  // repeated int64 coordinates = 2;
  for (int i = 0; i < this->coordinates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->coordinates(i), target);
  }
  
  // optional uint64 array_id = 3;
  if (has_array_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->array_id(), target);
  }
  
  // optional uint32 attribute_id = 4;
  if (has_attribute_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attribute_id(), target);
  }
  
  // required bool eof = 5;
  if (has_eof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->eof(), target);
  }
  
  // optional bool sparse = 6;
  if (has_sparse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->sparse(), target);
  }
  
  // optional bool rle = 7;
  if (has_rle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->rle(), target);
  }
  
  // optional uint64 decompressed_size = 8;
  if (has_decompressed_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->decompressed_size(), target);
  }
  
  // optional bool has_next = 9;
  if (has_has_next()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->has_next(), target);
  }
  
  // repeated int64 next_coordinates = 10;
  for (int i = 0; i < this->next_coordinates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(10, this->next_coordinates(i), target);
  }
  
  // optional uint32 obj_type = 11;
  if (has_obj_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->obj_type(), target);
  }
  
  // optional uint64 count = 12;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->count(), target);
  }
  
  // optional bool tombstone = 13 [default = false];
  if (has_tombstone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->tombstone(), target);
  }
  
  // optional uint64 dest_instance = 14;
  if (has_dest_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->dest_instance(), target);
  }
  
  // optional uint64 next_dest_instance = 15;
  if (has_next_dest_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->next_dest_instance(), target);
  }
  
  // optional uint64 fetch_id = 16;
  if (has_fetch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->fetch_id(), target);
  }
  
  // repeated .scidb_msg.Chunk.Warning warnings = 17;
  for (int i = 0; i < this->warnings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->warnings(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Chunk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 compression_method = 1;
    if (has_compression_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->compression_method());
    }
    
    // optional uint64 array_id = 3;
    if (has_array_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->array_id());
    }
    
    // optional uint32 attribute_id = 4;
    if (has_attribute_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_id());
    }
    
    // required bool eof = 5;
    if (has_eof()) {
      total_size += 1 + 1;
    }
    
    // optional bool sparse = 6;
    if (has_sparse()) {
      total_size += 1 + 1;
    }
    
    // optional bool rle = 7;
    if (has_rle()) {
      total_size += 1 + 1;
    }
    
    // optional uint64 decompressed_size = 8;
    if (has_decompressed_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->decompressed_size());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool has_next = 9;
    if (has_has_next()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 obj_type = 11;
    if (has_obj_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->obj_type());
    }
    
    // optional uint64 count = 12;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count());
    }
    
    // optional bool tombstone = 13 [default = false];
    if (has_tombstone()) {
      total_size += 1 + 1;
    }
    
    // optional uint64 dest_instance = 14;
    if (has_dest_instance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dest_instance());
    }
    
    // optional uint64 next_dest_instance = 15;
    if (has_next_dest_instance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->next_dest_instance());
    }
    
    // optional uint64 fetch_id = 16;
    if (has_fetch_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fetch_id());
    }
    
  }
  // repeated int64 coordinates = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->coordinates_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->coordinates(i));
    }
    total_size += 1 * this->coordinates_size() + data_size;
  }
  
  // repeated int64 next_coordinates = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->next_coordinates_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->next_coordinates(i));
    }
    total_size += 1 * this->next_coordinates_size() + data_size;
  }
  
  // repeated .scidb_msg.Chunk.Warning warnings = 17;
  total_size += 2 * this->warnings_size();
  for (int i = 0; i < this->warnings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->warnings(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chunk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Chunk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Chunk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Chunk::MergeFrom(const Chunk& from) {
  GOOGLE_CHECK_NE(&from, this);
  coordinates_.MergeFrom(from.coordinates_);
  next_coordinates_.MergeFrom(from.next_coordinates_);
  warnings_.MergeFrom(from.warnings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_compression_method()) {
      set_compression_method(from.compression_method());
    }
    if (from.has_array_id()) {
      set_array_id(from.array_id());
    }
    if (from.has_attribute_id()) {
      set_attribute_id(from.attribute_id());
    }
    if (from.has_eof()) {
      set_eof(from.eof());
    }
    if (from.has_sparse()) {
      set_sparse(from.sparse());
    }
    if (from.has_rle()) {
      set_rle(from.rle());
    }
    if (from.has_decompressed_size()) {
      set_decompressed_size(from.decompressed_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_has_next()) {
      set_has_next(from.has_next());
    }
    if (from.has_obj_type()) {
      set_obj_type(from.obj_type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_tombstone()) {
      set_tombstone(from.tombstone());
    }
    if (from.has_dest_instance()) {
      set_dest_instance(from.dest_instance());
    }
    if (from.has_next_dest_instance()) {
      set_next_dest_instance(from.next_dest_instance());
    }
    if (from.has_fetch_id()) {
      set_fetch_id(from.fetch_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Chunk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chunk::CopyFrom(const Chunk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chunk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  
  for (int i = 0; i < warnings_size(); i++) {
    if (!this->warnings(i).IsInitialized()) return false;
  }
  return true;
}

void Chunk::Swap(Chunk* other) {
  if (other != this) {
    std::swap(compression_method_, other->compression_method_);
    coordinates_.Swap(&other->coordinates_);
    std::swap(array_id_, other->array_id_);
    std::swap(attribute_id_, other->attribute_id_);
    std::swap(eof_, other->eof_);
    std::swap(sparse_, other->sparse_);
    std::swap(rle_, other->rle_);
    std::swap(decompressed_size_, other->decompressed_size_);
    std::swap(has_next_, other->has_next_);
    next_coordinates_.Swap(&other->next_coordinates_);
    std::swap(obj_type_, other->obj_type_);
    std::swap(count_, other->count_);
    std::swap(tombstone_, other->tombstone_);
    std::swap(dest_instance_, other->dest_instance_);
    std::swap(next_dest_instance_, other->next_dest_instance_);
    std::swap(fetch_id_, other->fetch_id_);
    warnings_.Swap(&other->warnings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Chunk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Chunk_descriptor_;
  metadata.reflection = Chunk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryResult_AttributeDesc::kIdFieldNumber;
const int QueryResult_AttributeDesc::kNameFieldNumber;
const int QueryResult_AttributeDesc::kTypeFieldNumber;
const int QueryResult_AttributeDesc::kFlagsFieldNumber;
const int QueryResult_AttributeDesc::kDefaultCompressionMethodFieldNumber;
const int QueryResult_AttributeDesc::kDefaultMissingReasonFieldNumber;
const int QueryResult_AttributeDesc::kDefaultValueFieldNumber;
#endif  // !_MSC_VER

QueryResult_AttributeDesc::QueryResult_AttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryResult_AttributeDesc::InitAsDefaultInstance() {
}

QueryResult_AttributeDesc::QueryResult_AttributeDesc(const QueryResult_AttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryResult_AttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flags_ = 0u;
  default_compression_method_ = 0u;
  default_missing_reason_ = 0;
  default_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResult_AttributeDesc::~QueryResult_AttributeDesc() {
  SharedDtor();
}

void QueryResult_AttributeDesc::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (default_value_ != &::google::protobuf::internal::kEmptyString) {
    delete default_value_;
  }
  if (this != default_instance_) {
  }
}

void QueryResult_AttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResult_AttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResult_AttributeDesc_descriptor_;
}

const QueryResult_AttributeDesc& QueryResult_AttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();  return *default_instance_;
}

QueryResult_AttributeDesc* QueryResult_AttributeDesc::default_instance_ = NULL;

QueryResult_AttributeDesc* QueryResult_AttributeDesc::New() const {
  return new QueryResult_AttributeDesc;
}

void QueryResult_AttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    flags_ = 0u;
    default_compression_method_ = 0u;
    default_missing_reason_ = 0;
    if (has_default_value()) {
      if (default_value_ != &::google::protobuf::internal::kEmptyString) {
        default_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryResult_AttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }
      
      // required string type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flags;
        break;
      }
      
      // required uint32 flags = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_default_compression_method;
        break;
      }
      
      // required uint32 default_compression_method = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_compression_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_compression_method_)));
          set_has_default_compression_method();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_default_missing_reason;
        break;
      }
      
      // required int32 default_missing_reason = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_missing_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &default_missing_reason_)));
          set_has_default_missing_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_default_value;
        break;
      }
      
      // required bytes default_value = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_default_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryResult_AttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type(), output);
  }
  
  // required uint32 flags = 4;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flags(), output);
  }
  
  // required uint32 default_compression_method = 5;
  if (has_default_compression_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->default_compression_method(), output);
  }
  
  // required int32 default_missing_reason = 6;
  if (has_default_missing_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->default_missing_reason(), output);
  }
  
  // required bytes default_value = 7;
  if (has_default_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->default_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryResult_AttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }
  
  // required uint32 flags = 4;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flags(), target);
  }
  
  // required uint32 default_compression_method = 5;
  if (has_default_compression_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->default_compression_method(), target);
  }
  
  // required int32 default_missing_reason = 6;
  if (has_default_missing_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->default_missing_reason(), target);
  }
  
  // required bytes default_value = 7;
  if (has_default_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->default_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryResult_AttributeDesc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // required uint32 flags = 4;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }
    
    // required uint32 default_compression_method = 5;
    if (has_default_compression_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->default_compression_method());
    }
    
    // required int32 default_missing_reason = 6;
    if (has_default_missing_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->default_missing_reason());
    }
    
    // required bytes default_value = 7;
    if (has_default_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->default_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResult_AttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryResult_AttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryResult_AttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryResult_AttributeDesc::MergeFrom(const QueryResult_AttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_default_compression_method()) {
      set_default_compression_method(from.default_compression_method());
    }
    if (from.has_default_missing_reason()) {
      set_default_missing_reason(from.default_missing_reason());
    }
    if (from.has_default_value()) {
      set_default_value(from.default_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryResult_AttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult_AttributeDesc::CopyFrom(const QueryResult_AttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult_AttributeDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void QueryResult_AttributeDesc::Swap(QueryResult_AttributeDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(flags_, other->flags_);
    std::swap(default_compression_method_, other->default_compression_method_);
    std::swap(default_missing_reason_, other->default_missing_reason_);
    std::swap(default_value_, other->default_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryResult_AttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResult_AttributeDesc_descriptor_;
  metadata.reflection = QueryResult_AttributeDesc_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QueryResult_DimensionDesc::kNameFieldNumber;
const int QueryResult_DimensionDesc::kStartMinFieldNumber;
const int QueryResult_DimensionDesc::kCurrStartFieldNumber;
const int QueryResult_DimensionDesc::kCurrEndFieldNumber;
const int QueryResult_DimensionDesc::kEndMaxFieldNumber;
const int QueryResult_DimensionDesc::kChunkIntervalFieldNumber;
const int QueryResult_DimensionDesc::kChunkOverlapFieldNumber;
#endif  // !_MSC_VER

QueryResult_DimensionDesc::QueryResult_DimensionDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryResult_DimensionDesc::InitAsDefaultInstance() {
}

QueryResult_DimensionDesc::QueryResult_DimensionDesc(const QueryResult_DimensionDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryResult_DimensionDesc::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_min_ = GOOGLE_LONGLONG(0);
  curr_start_ = GOOGLE_LONGLONG(0);
  curr_end_ = GOOGLE_LONGLONG(0);
  end_max_ = GOOGLE_LONGLONG(0);
  chunk_interval_ = GOOGLE_LONGLONG(0);
  chunk_overlap_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResult_DimensionDesc::~QueryResult_DimensionDesc() {
  SharedDtor();
}

void QueryResult_DimensionDesc::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void QueryResult_DimensionDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResult_DimensionDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResult_DimensionDesc_descriptor_;
}

const QueryResult_DimensionDesc& QueryResult_DimensionDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();  return *default_instance_;
}

QueryResult_DimensionDesc* QueryResult_DimensionDesc::default_instance_ = NULL;

QueryResult_DimensionDesc* QueryResult_DimensionDesc::New() const {
  return new QueryResult_DimensionDesc;
}

void QueryResult_DimensionDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    start_min_ = GOOGLE_LONGLONG(0);
    curr_start_ = GOOGLE_LONGLONG(0);
    curr_end_ = GOOGLE_LONGLONG(0);
    end_max_ = GOOGLE_LONGLONG(0);
    chunk_interval_ = GOOGLE_LONGLONG(0);
    chunk_overlap_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryResult_DimensionDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_min;
        break;
      }
      
      // required int64 start_min = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_min_)));
          set_has_start_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curr_start;
        break;
      }
      
      // required int64 curr_start = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curr_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curr_start_)));
          set_has_curr_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_curr_end;
        break;
      }
      
      // required int64 curr_end = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curr_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curr_end_)));
          set_has_curr_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_end_max;
        break;
      }
      
      // required int64 end_max = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_max_)));
          set_has_end_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_chunk_interval;
        break;
      }
      
      // required int64 chunk_interval = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chunk_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chunk_interval_)));
          set_has_chunk_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_chunk_overlap;
        break;
      }
      
      // required int64 chunk_overlap = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chunk_overlap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chunk_overlap_)));
          set_has_chunk_overlap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryResult_DimensionDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int64 start_min = 2;
  if (has_start_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_min(), output);
  }
  
  // required int64 curr_start = 3;
  if (has_curr_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->curr_start(), output);
  }
  
  // required int64 curr_end = 4;
  if (has_curr_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->curr_end(), output);
  }
  
  // required int64 end_max = 5;
  if (has_end_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->end_max(), output);
  }
  
  // required int64 chunk_interval = 6;
  if (has_chunk_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->chunk_interval(), output);
  }
  
  // required int64 chunk_overlap = 7;
  if (has_chunk_overlap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->chunk_overlap(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryResult_DimensionDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required int64 start_min = 2;
  if (has_start_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start_min(), target);
  }
  
  // required int64 curr_start = 3;
  if (has_curr_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->curr_start(), target);
  }
  
  // required int64 curr_end = 4;
  if (has_curr_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->curr_end(), target);
  }
  
  // required int64 end_max = 5;
  if (has_end_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->end_max(), target);
  }
  
  // required int64 chunk_interval = 6;
  if (has_chunk_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->chunk_interval(), target);
  }
  
  // required int64 chunk_overlap = 7;
  if (has_chunk_overlap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->chunk_overlap(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryResult_DimensionDesc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int64 start_min = 2;
    if (has_start_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_min());
    }
    
    // required int64 curr_start = 3;
    if (has_curr_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curr_start());
    }
    
    // required int64 curr_end = 4;
    if (has_curr_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curr_end());
    }
    
    // required int64 end_max = 5;
    if (has_end_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_max());
    }
    
    // required int64 chunk_interval = 6;
    if (has_chunk_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chunk_interval());
    }
    
    // required int64 chunk_overlap = 7;
    if (has_chunk_overlap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chunk_overlap());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResult_DimensionDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryResult_DimensionDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryResult_DimensionDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryResult_DimensionDesc::MergeFrom(const QueryResult_DimensionDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_start_min()) {
      set_start_min(from.start_min());
    }
    if (from.has_curr_start()) {
      set_curr_start(from.curr_start());
    }
    if (from.has_curr_end()) {
      set_curr_end(from.curr_end());
    }
    if (from.has_end_max()) {
      set_end_max(from.end_max());
    }
    if (from.has_chunk_interval()) {
      set_chunk_interval(from.chunk_interval());
    }
    if (from.has_chunk_overlap()) {
      set_chunk_overlap(from.chunk_overlap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryResult_DimensionDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult_DimensionDesc::CopyFrom(const QueryResult_DimensionDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult_DimensionDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void QueryResult_DimensionDesc::Swap(QueryResult_DimensionDesc* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(start_min_, other->start_min_);
    std::swap(curr_start_, other->curr_start_);
    std::swap(curr_end_, other->curr_end_);
    std::swap(end_max_, other->end_max_);
    std::swap(chunk_interval_, other->chunk_interval_);
    std::swap(chunk_overlap_, other->chunk_overlap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryResult_DimensionDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResult_DimensionDesc_descriptor_;
  metadata.reflection = QueryResult_DimensionDesc_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QueryResult_Warning::kCodeFieldNumber;
const int QueryResult_Warning::kFileFieldNumber;
const int QueryResult_Warning::kFunctionFieldNumber;
const int QueryResult_Warning::kLineFieldNumber;
const int QueryResult_Warning::kWhatStrFieldNumber;
const int QueryResult_Warning::kStringifiedCodeFieldNumber;
const int QueryResult_Warning::kStringsNamespaceFieldNumber;
#endif  // !_MSC_VER

QueryResult_Warning::QueryResult_Warning()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryResult_Warning::InitAsDefaultInstance() {
}

QueryResult_Warning::QueryResult_Warning(const QueryResult_Warning& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryResult_Warning::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  function_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  line_ = 0;
  what_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stringified_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strings_namespace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResult_Warning::~QueryResult_Warning() {
  SharedDtor();
}

void QueryResult_Warning::SharedDtor() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    delete file_;
  }
  if (function_ != &::google::protobuf::internal::kEmptyString) {
    delete function_;
  }
  if (what_str_ != &::google::protobuf::internal::kEmptyString) {
    delete what_str_;
  }
  if (stringified_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stringified_code_;
  }
  if (strings_namespace_ != &::google::protobuf::internal::kEmptyString) {
    delete strings_namespace_;
  }
  if (this != default_instance_) {
  }
}

void QueryResult_Warning::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResult_Warning::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResult_Warning_descriptor_;
}

const QueryResult_Warning& QueryResult_Warning::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();  return *default_instance_;
}

QueryResult_Warning* QueryResult_Warning::default_instance_ = NULL;

QueryResult_Warning* QueryResult_Warning::New() const {
  return new QueryResult_Warning;
}

void QueryResult_Warning::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::kEmptyString) {
        file_->clear();
      }
    }
    if (has_function()) {
      if (function_ != &::google::protobuf::internal::kEmptyString) {
        function_->clear();
      }
    }
    line_ = 0;
    if (has_what_str()) {
      if (what_str_ != &::google::protobuf::internal::kEmptyString) {
        what_str_->clear();
      }
    }
    if (has_stringified_code()) {
      if (stringified_code_ != &::google::protobuf::internal::kEmptyString) {
        stringified_code_->clear();
      }
    }
    if (has_strings_namespace()) {
      if (strings_namespace_ != &::google::protobuf::internal::kEmptyString) {
        strings_namespace_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryResult_Warning::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file;
        break;
      }
      
      // required string file = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_function;
        break;
      }
      
      // required string function = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->function().data(), this->function().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_line;
        break;
      }
      
      // required int32 line = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_what_str;
        break;
      }
      
      // required string what_str = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_what_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_what_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->what_str().data(), this->what_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stringified_code;
        break;
      }
      
      // required string stringified_code = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringified_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringified_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stringified_code().data(), this->stringified_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_strings_namespace;
        break;
      }
      
      // required string strings_namespace = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strings_namespace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strings_namespace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strings_namespace().data(), this->strings_namespace().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryResult_Warning::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }
  
  // required string file = 2;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file(), output);
  }
  
  // required string function = 3;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->function(), output);
  }
  
  // required int32 line = 4;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->line(), output);
  }
  
  // required string what_str = 5;
  if (has_what_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->what_str().data(), this->what_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->what_str(), output);
  }
  
  // required string stringified_code = 6;
  if (has_stringified_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringified_code().data(), this->stringified_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->stringified_code(), output);
  }
  
  // required string strings_namespace = 7;
  if (has_strings_namespace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strings_namespace().data(), this->strings_namespace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->strings_namespace(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryResult_Warning::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }
  
  // required string file = 2;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file(), target);
  }
  
  // required string function = 3;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->function(), target);
  }
  
  // required int32 line = 4;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->line(), target);
  }
  
  // required string what_str = 5;
  if (has_what_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->what_str().data(), this->what_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->what_str(), target);
  }
  
  // required string stringified_code = 6;
  if (has_stringified_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringified_code().data(), this->stringified_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->stringified_code(), target);
  }
  
  // required string strings_namespace = 7;
  if (has_strings_namespace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strings_namespace().data(), this->strings_namespace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->strings_namespace(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryResult_Warning::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }
    
    // required string file = 2;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }
    
    // required string function = 3;
    if (has_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->function());
    }
    
    // required int32 line = 4;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line());
    }
    
    // required string what_str = 5;
    if (has_what_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->what_str());
    }
    
    // required string stringified_code = 6;
    if (has_stringified_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringified_code());
    }
    
    // required string strings_namespace = 7;
    if (has_strings_namespace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strings_namespace());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResult_Warning::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryResult_Warning* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryResult_Warning*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryResult_Warning::MergeFrom(const QueryResult_Warning& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_function()) {
      set_function(from.function());
    }
    if (from.has_line()) {
      set_line(from.line());
    }
    if (from.has_what_str()) {
      set_what_str(from.what_str());
    }
    if (from.has_stringified_code()) {
      set_stringified_code(from.stringified_code());
    }
    if (from.has_strings_namespace()) {
      set_strings_namespace(from.strings_namespace());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryResult_Warning::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult_Warning::CopyFrom(const QueryResult_Warning& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult_Warning::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void QueryResult_Warning::Swap(QueryResult_Warning* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(file_, other->file_);
    std::swap(function_, other->function_);
    std::swap(line_, other->line_);
    std::swap(what_str_, other->what_str_);
    std::swap(stringified_code_, other->stringified_code_);
    std::swap(strings_namespace_, other->strings_namespace_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryResult_Warning::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResult_Warning_descriptor_;
  metadata.reflection = QueryResult_Warning_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QueryResult::kArrayNameFieldNumber;
const int QueryResult::kAttributesFieldNumber;
const int QueryResult::kDimensionsFieldNumber;
const int QueryResult::kExplainPhysicalFieldNumber;
const int QueryResult::kExecutionTimeFieldNumber;
const int QueryResult::kSelectiveFieldNumber;
const int QueryResult::kExplainLogicalFieldNumber;
const int QueryResult::kWarningsFieldNumber;
const int QueryResult::kPluginsFieldNumber;
const int QueryResult::kExclusiveArrayAccessFieldNumber;
const int QueryResult::kAutoCommitFieldNumber;
#endif  // !_MSC_VER

QueryResult::QueryResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryResult::InitAsDefaultInstance() {
}

QueryResult::QueryResult(const QueryResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryResult::SharedCtor() {
  _cached_size_ = 0;
  array_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  explain_physical_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  execution_time_ = GOOGLE_ULONGLONG(0);
  selective_ = false;
  explain_logical_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exclusive_array_access_ = false;
  auto_commit_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResult::~QueryResult() {
  SharedDtor();
}

void QueryResult::SharedDtor() {
  if (array_name_ != &::google::protobuf::internal::kEmptyString) {
    delete array_name_;
  }
  if (explain_physical_ != &::google::protobuf::internal::kEmptyString) {
    delete explain_physical_;
  }
  if (explain_logical_ != &::google::protobuf::internal::kEmptyString) {
    delete explain_logical_;
  }
  if (this != default_instance_) {
  }
}

void QueryResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResult_descriptor_;
}

const QueryResult& QueryResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();  return *default_instance_;
}

QueryResult* QueryResult::default_instance_ = NULL;

QueryResult* QueryResult::New() const {
  return new QueryResult;
}

void QueryResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_array_name()) {
      if (array_name_ != &::google::protobuf::internal::kEmptyString) {
        array_name_->clear();
      }
    }
    if (has_explain_physical()) {
      if (explain_physical_ != &::google::protobuf::internal::kEmptyString) {
        explain_physical_->clear();
      }
    }
    execution_time_ = GOOGLE_ULONGLONG(0);
    selective_ = false;
    if (has_explain_logical()) {
      if (explain_logical_ != &::google::protobuf::internal::kEmptyString) {
        explain_logical_->clear();
      }
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    exclusive_array_access_ = false;
    auto_commit_ = false;
  }
  attributes_.Clear();
  dimensions_.Clear();
  warnings_.Clear();
  plugins_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string array_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_array_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->array_name().data(), this->array_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attributes;
        break;
      }
      
      // repeated .scidb_msg.QueryResult.AttributeDesc attributes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attributes;
        if (input->ExpectTag(34)) goto parse_dimensions;
        break;
      }
      
      // repeated .scidb_msg.QueryResult.DimensionDesc dimensions = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dimensions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dimensions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dimensions;
        if (input->ExpectTag(42)) goto parse_explain_physical;
        break;
      }
      
      // optional string explain_physical = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_explain_physical:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_explain_physical()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->explain_physical().data(), this->explain_physical().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_execution_time;
        break;
      }
      
      // optional uint64 execution_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_execution_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &execution_time_)));
          set_has_execution_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_selective;
        break;
      }
      
      // optional bool selective = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selective:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selective_)));
          set_has_selective();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_explain_logical;
        break;
      }
      
      // optional string explain_logical = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_explain_logical:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_explain_logical()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->explain_logical().data(), this->explain_logical().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_warnings;
        break;
      }
      
      // repeated .scidb_msg.QueryResult.Warning warnings = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_warnings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_warnings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_warnings;
        if (input->ExpectTag(82)) goto parse_plugins;
        break;
      }
      
      // repeated string plugins = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plugins:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_plugins()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->plugins(0).data(), this->plugins(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_plugins;
        if (input->ExpectTag(88)) goto parse_exclusive_array_access;
        break;
      }
      
      // optional bool exclusive_array_access = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exclusive_array_access:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exclusive_array_access_)));
          set_has_exclusive_array_access();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_auto_commit;
        break;
      }
      
      // optional bool auto_commit = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_commit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_commit_)));
          set_has_auto_commit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string array_name = 2;
  if (has_array_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->array_name().data(), this->array_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->array_name(), output);
  }
  
  // repeated .scidb_msg.QueryResult.AttributeDesc attributes = 3;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attributes(i), output);
  }
  
  // repeated .scidb_msg.QueryResult.DimensionDesc dimensions = 4;
  for (int i = 0; i < this->dimensions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dimensions(i), output);
  }
  
  // optional string explain_physical = 5;
  if (has_explain_physical()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->explain_physical().data(), this->explain_physical().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->explain_physical(), output);
  }
  
  // optional uint64 execution_time = 6;
  if (has_execution_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->execution_time(), output);
  }
  
  // optional bool selective = 7;
  if (has_selective()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->selective(), output);
  }
  
  // optional string explain_logical = 8;
  if (has_explain_logical()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->explain_logical().data(), this->explain_logical().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->explain_logical(), output);
  }
  
  // repeated .scidb_msg.QueryResult.Warning warnings = 9;
  for (int i = 0; i < this->warnings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->warnings(i), output);
  }
  
  // repeated string plugins = 10;
  for (int i = 0; i < this->plugins_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->plugins(i).data(), this->plugins(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->plugins(i), output);
  }
  
  // optional bool exclusive_array_access = 11;
  if (has_exclusive_array_access()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->exclusive_array_access(), output);
  }
  
  // optional bool auto_commit = 12;
  if (has_auto_commit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->auto_commit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string array_name = 2;
  if (has_array_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->array_name().data(), this->array_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->array_name(), target);
  }
  
  // repeated .scidb_msg.QueryResult.AttributeDesc attributes = 3;
  for (int i = 0; i < this->attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attributes(i), target);
  }
  
  // repeated .scidb_msg.QueryResult.DimensionDesc dimensions = 4;
  for (int i = 0; i < this->dimensions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dimensions(i), target);
  }
  
  // optional string explain_physical = 5;
  if (has_explain_physical()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->explain_physical().data(), this->explain_physical().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->explain_physical(), target);
  }
  
  // optional uint64 execution_time = 6;
  if (has_execution_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->execution_time(), target);
  }
  
  // optional bool selective = 7;
  if (has_selective()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->selective(), target);
  }
  
  // optional string explain_logical = 8;
  if (has_explain_logical()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->explain_logical().data(), this->explain_logical().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->explain_logical(), target);
  }
  
  // repeated .scidb_msg.QueryResult.Warning warnings = 9;
  for (int i = 0; i < this->warnings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->warnings(i), target);
  }
  
  // repeated string plugins = 10;
  for (int i = 0; i < this->plugins_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plugins(i).data(), this->plugins(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->plugins(i), target);
  }
  
  // optional bool exclusive_array_access = 11;
  if (has_exclusive_array_access()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->exclusive_array_access(), target);
  }
  
  // optional bool auto_commit = 12;
  if (has_auto_commit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->auto_commit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string array_name = 2;
    if (has_array_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->array_name());
    }
    
    // optional string explain_physical = 5;
    if (has_explain_physical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->explain_physical());
    }
    
    // optional uint64 execution_time = 6;
    if (has_execution_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->execution_time());
    }
    
    // optional bool selective = 7;
    if (has_selective()) {
      total_size += 1 + 1;
    }
    
    // optional string explain_logical = 8;
    if (has_explain_logical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->explain_logical());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional bool exclusive_array_access = 11;
    if (has_exclusive_array_access()) {
      total_size += 1 + 1;
    }
    
    // optional bool auto_commit = 12;
    if (has_auto_commit()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .scidb_msg.QueryResult.AttributeDesc attributes = 3;
  total_size += 1 * this->attributes_size();
  for (int i = 0; i < this->attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attributes(i));
  }
  
  // repeated .scidb_msg.QueryResult.DimensionDesc dimensions = 4;
  total_size += 1 * this->dimensions_size();
  for (int i = 0; i < this->dimensions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dimensions(i));
  }
  
  // repeated .scidb_msg.QueryResult.Warning warnings = 9;
  total_size += 1 * this->warnings_size();
  for (int i = 0; i < this->warnings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->warnings(i));
  }
  
  // repeated string plugins = 10;
  total_size += 1 * this->plugins_size();
  for (int i = 0; i < this->plugins_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->plugins(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryResult::MergeFrom(const QueryResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  attributes_.MergeFrom(from.attributes_);
  dimensions_.MergeFrom(from.dimensions_);
  warnings_.MergeFrom(from.warnings_);
  plugins_.MergeFrom(from.plugins_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_array_name()) {
      set_array_name(from.array_name());
    }
    if (from.has_explain_physical()) {
      set_explain_physical(from.explain_physical());
    }
    if (from.has_execution_time()) {
      set_execution_time(from.execution_time());
    }
    if (from.has_selective()) {
      set_selective(from.selective());
    }
    if (from.has_explain_logical()) {
      set_explain_logical(from.explain_logical());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_exclusive_array_access()) {
      set_exclusive_array_access(from.exclusive_array_access());
    }
    if (from.has_auto_commit()) {
      set_auto_commit(from.auto_commit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult::CopyFrom(const QueryResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult::IsInitialized() const {
  
  for (int i = 0; i < attributes_size(); i++) {
    if (!this->attributes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < dimensions_size(); i++) {
    if (!this->dimensions(i).IsInitialized()) return false;
  }
  for (int i = 0; i < warnings_size(); i++) {
    if (!this->warnings(i).IsInitialized()) return false;
  }
  return true;
}

void QueryResult::Swap(QueryResult* other) {
  if (other != this) {
    std::swap(array_name_, other->array_name_);
    attributes_.Swap(&other->attributes_);
    dimensions_.Swap(&other->dimensions_);
    std::swap(explain_physical_, other->explain_physical_);
    std::swap(execution_time_, other->execution_time_);
    std::swap(selective_, other->selective_);
    std::swap(explain_logical_, other->explain_logical_);
    warnings_.Swap(&other->warnings_);
    plugins_.Swap(&other->plugins_);
    std::swap(exclusive_array_access_, other->exclusive_array_access_);
    std::swap(auto_commit_, other->auto_commit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResult_descriptor_;
  metadata.reflection = QueryResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PhysicalPlan_InstanceListEntry::kInstanceIdFieldNumber;
const int PhysicalPlan_InstanceListEntry::kGenIdFieldNumber;
#endif  // !_MSC_VER

PhysicalPlan_InstanceListEntry::PhysicalPlan_InstanceListEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PhysicalPlan_InstanceListEntry::InitAsDefaultInstance() {
}

PhysicalPlan_InstanceListEntry::PhysicalPlan_InstanceListEntry(const PhysicalPlan_InstanceListEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PhysicalPlan_InstanceListEntry::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = GOOGLE_ULONGLONG(0);
  gen_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhysicalPlan_InstanceListEntry::~PhysicalPlan_InstanceListEntry() {
  SharedDtor();
}

void PhysicalPlan_InstanceListEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PhysicalPlan_InstanceListEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhysicalPlan_InstanceListEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhysicalPlan_InstanceListEntry_descriptor_;
}

const PhysicalPlan_InstanceListEntry& PhysicalPlan_InstanceListEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();  return *default_instance_;
}

PhysicalPlan_InstanceListEntry* PhysicalPlan_InstanceListEntry::default_instance_ = NULL;

PhysicalPlan_InstanceListEntry* PhysicalPlan_InstanceListEntry::New() const {
  return new PhysicalPlan_InstanceListEntry;
}

void PhysicalPlan_InstanceListEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_id_ = GOOGLE_ULONGLONG(0);
    gen_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PhysicalPlan_InstanceListEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 instance_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gen_id;
        break;
      }
      
      // required uint64 gen_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gen_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gen_id_)));
          set_has_gen_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PhysicalPlan_InstanceListEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 instance_id = 2;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instance_id(), output);
  }
  
  // required uint64 gen_id = 3;
  if (has_gen_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->gen_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PhysicalPlan_InstanceListEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 instance_id = 2;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instance_id(), target);
  }
  
  // required uint64 gen_id = 3;
  if (has_gen_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->gen_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PhysicalPlan_InstanceListEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 instance_id = 2;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instance_id());
    }
    
    // required uint64 gen_id = 3;
    if (has_gen_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gen_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhysicalPlan_InstanceListEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PhysicalPlan_InstanceListEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PhysicalPlan_InstanceListEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PhysicalPlan_InstanceListEntry::MergeFrom(const PhysicalPlan_InstanceListEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_gen_id()) {
      set_gen_id(from.gen_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PhysicalPlan_InstanceListEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhysicalPlan_InstanceListEntry::CopyFrom(const PhysicalPlan_InstanceListEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhysicalPlan_InstanceListEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PhysicalPlan_InstanceListEntry::Swap(PhysicalPlan_InstanceListEntry* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    std::swap(gen_id_, other->gen_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PhysicalPlan_InstanceListEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhysicalPlan_InstanceListEntry_descriptor_;
  metadata.reflection = PhysicalPlan_InstanceListEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PhysicalPlan_InstanceList::kInstanceEntryFieldNumber;
#endif  // !_MSC_VER

PhysicalPlan_InstanceList::PhysicalPlan_InstanceList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PhysicalPlan_InstanceList::InitAsDefaultInstance() {
}

PhysicalPlan_InstanceList::PhysicalPlan_InstanceList(const PhysicalPlan_InstanceList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PhysicalPlan_InstanceList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhysicalPlan_InstanceList::~PhysicalPlan_InstanceList() {
  SharedDtor();
}

void PhysicalPlan_InstanceList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PhysicalPlan_InstanceList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhysicalPlan_InstanceList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhysicalPlan_InstanceList_descriptor_;
}

const PhysicalPlan_InstanceList& PhysicalPlan_InstanceList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();  return *default_instance_;
}

PhysicalPlan_InstanceList* PhysicalPlan_InstanceList::default_instance_ = NULL;

PhysicalPlan_InstanceList* PhysicalPlan_InstanceList::New() const {
  return new PhysicalPlan_InstanceList;
}

void PhysicalPlan_InstanceList::Clear() {
  instance_entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PhysicalPlan_InstanceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .scidb_msg.PhysicalPlan.InstanceListEntry instance_entry = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instance_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instance_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instance_entry;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PhysicalPlan_InstanceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .scidb_msg.PhysicalPlan.InstanceListEntry instance_entry = 2;
  for (int i = 0; i < this->instance_entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->instance_entry(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PhysicalPlan_InstanceList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .scidb_msg.PhysicalPlan.InstanceListEntry instance_entry = 2;
  for (int i = 0; i < this->instance_entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->instance_entry(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PhysicalPlan_InstanceList::ByteSize() const {
  int total_size = 0;
  
  // repeated .scidb_msg.PhysicalPlan.InstanceListEntry instance_entry = 2;
  total_size += 1 * this->instance_entry_size();
  for (int i = 0; i < this->instance_entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instance_entry(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhysicalPlan_InstanceList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PhysicalPlan_InstanceList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PhysicalPlan_InstanceList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PhysicalPlan_InstanceList::MergeFrom(const PhysicalPlan_InstanceList& from) {
  GOOGLE_CHECK_NE(&from, this);
  instance_entry_.MergeFrom(from.instance_entry_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PhysicalPlan_InstanceList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhysicalPlan_InstanceList::CopyFrom(const PhysicalPlan_InstanceList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhysicalPlan_InstanceList::IsInitialized() const {
  
  for (int i = 0; i < instance_entry_size(); i++) {
    if (!this->instance_entry(i).IsInitialized()) return false;
  }
  return true;
}

void PhysicalPlan_InstanceList::Swap(PhysicalPlan_InstanceList* other) {
  if (other != this) {
    instance_entry_.Swap(&other->instance_entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PhysicalPlan_InstanceList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhysicalPlan_InstanceList_descriptor_;
  metadata.reflection = PhysicalPlan_InstanceList_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PhysicalPlan::kPhysicalPlanFieldNumber;
const int PhysicalPlan::kMembershipIdFieldNumber;
const int PhysicalPlan::kDeadListFieldNumber;
const int PhysicalPlan::kLiveListFieldNumber;
const int PhysicalPlan::kClusterUuidFieldNumber;
#endif  // !_MSC_VER

PhysicalPlan::PhysicalPlan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PhysicalPlan::InitAsDefaultInstance() {
  dead_list_ = const_cast< ::scidb_msg::PhysicalPlan_InstanceList*>(&::scidb_msg::PhysicalPlan_InstanceList::default_instance());
  live_list_ = const_cast< ::scidb_msg::PhysicalPlan_InstanceList*>(&::scidb_msg::PhysicalPlan_InstanceList::default_instance());
}

PhysicalPlan::PhysicalPlan(const PhysicalPlan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PhysicalPlan::SharedCtor() {
  _cached_size_ = 0;
  physical_plan_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  membership_id_ = GOOGLE_ULONGLONG(0);
  dead_list_ = NULL;
  live_list_ = NULL;
  cluster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhysicalPlan::~PhysicalPlan() {
  SharedDtor();
}

void PhysicalPlan::SharedDtor() {
  if (physical_plan_ != &::google::protobuf::internal::kEmptyString) {
    delete physical_plan_;
  }
  if (cluster_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete cluster_uuid_;
  }
  if (this != default_instance_) {
    delete dead_list_;
    delete live_list_;
  }
}

void PhysicalPlan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhysicalPlan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhysicalPlan_descriptor_;
}

const PhysicalPlan& PhysicalPlan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();  return *default_instance_;
}

PhysicalPlan* PhysicalPlan::default_instance_ = NULL;

PhysicalPlan* PhysicalPlan::New() const {
  return new PhysicalPlan;
}

void PhysicalPlan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_physical_plan()) {
      if (physical_plan_ != &::google::protobuf::internal::kEmptyString) {
        physical_plan_->clear();
      }
    }
    membership_id_ = GOOGLE_ULONGLONG(0);
    if (has_dead_list()) {
      if (dead_list_ != NULL) dead_list_->::scidb_msg::PhysicalPlan_InstanceList::Clear();
    }
    if (has_live_list()) {
      if (live_list_ != NULL) live_list_->::scidb_msg::PhysicalPlan_InstanceList::Clear();
    }
    if (has_cluster_uuid()) {
      if (cluster_uuid_ != &::google::protobuf::internal::kEmptyString) {
        cluster_uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PhysicalPlan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string physical_plan = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_physical_plan()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->physical_plan().data(), this->physical_plan().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_membership_id;
        break;
      }
      
      // required uint64 membership_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_membership_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &membership_id_)));
          set_has_membership_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dead_list;
        break;
      }
      
      // required .scidb_msg.PhysicalPlan.InstanceList dead_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dead_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dead_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_live_list;
        break;
      }
      
      // required .scidb_msg.PhysicalPlan.InstanceList live_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_live_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_live_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cluster_uuid;
        break;
      }
      
      // required string cluster_uuid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cluster_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cluster_uuid().data(), this->cluster_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PhysicalPlan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string physical_plan = 2;
  if (has_physical_plan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->physical_plan().data(), this->physical_plan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->physical_plan(), output);
  }
  
  // required uint64 membership_id = 3;
  if (has_membership_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->membership_id(), output);
  }
  
  // required .scidb_msg.PhysicalPlan.InstanceList dead_list = 4;
  if (has_dead_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dead_list(), output);
  }
  
  // required .scidb_msg.PhysicalPlan.InstanceList live_list = 5;
  if (has_live_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->live_list(), output);
  }
  
  // required string cluster_uuid = 6;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->cluster_uuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PhysicalPlan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string physical_plan = 2;
  if (has_physical_plan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->physical_plan().data(), this->physical_plan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->physical_plan(), target);
  }
  
  // required uint64 membership_id = 3;
  if (has_membership_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->membership_id(), target);
  }
  
  // required .scidb_msg.PhysicalPlan.InstanceList dead_list = 4;
  if (has_dead_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dead_list(), target);
  }
  
  // required .scidb_msg.PhysicalPlan.InstanceList live_list = 5;
  if (has_live_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->live_list(), target);
  }
  
  // required string cluster_uuid = 6;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->cluster_uuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PhysicalPlan::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string physical_plan = 2;
    if (has_physical_plan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->physical_plan());
    }
    
    // required uint64 membership_id = 3;
    if (has_membership_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->membership_id());
    }
    
    // required .scidb_msg.PhysicalPlan.InstanceList dead_list = 4;
    if (has_dead_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dead_list());
    }
    
    // required .scidb_msg.PhysicalPlan.InstanceList live_list = 5;
    if (has_live_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->live_list());
    }
    
    // required string cluster_uuid = 6;
    if (has_cluster_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster_uuid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhysicalPlan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PhysicalPlan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PhysicalPlan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PhysicalPlan::MergeFrom(const PhysicalPlan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_physical_plan()) {
      set_physical_plan(from.physical_plan());
    }
    if (from.has_membership_id()) {
      set_membership_id(from.membership_id());
    }
    if (from.has_dead_list()) {
      mutable_dead_list()->::scidb_msg::PhysicalPlan_InstanceList::MergeFrom(from.dead_list());
    }
    if (from.has_live_list()) {
      mutable_live_list()->::scidb_msg::PhysicalPlan_InstanceList::MergeFrom(from.live_list());
    }
    if (from.has_cluster_uuid()) {
      set_cluster_uuid(from.cluster_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PhysicalPlan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhysicalPlan::CopyFrom(const PhysicalPlan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhysicalPlan::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_dead_list()) {
    if (!this->dead_list().IsInitialized()) return false;
  }
  if (has_live_list()) {
    if (!this->live_list().IsInitialized()) return false;
  }
  return true;
}

void PhysicalPlan::Swap(PhysicalPlan* other) {
  if (other != this) {
    std::swap(physical_plan_, other->physical_plan_);
    std::swap(membership_id_, other->membership_id_);
    std::swap(dead_list_, other->dead_list_);
    std::swap(live_list_, other->live_list_);
    std::swap(cluster_uuid_, other->cluster_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PhysicalPlan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhysicalPlan_descriptor_;
  metadata.reflection = PhysicalPlan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Error_ParsingContext::kQueryStringFieldNumber;
const int Error_ParsingContext::kLineStartFieldNumber;
const int Error_ParsingContext::kColStartFieldNumber;
const int Error_ParsingContext::kLineEndFieldNumber;
const int Error_ParsingContext::kColEndFieldNumber;
#endif  // !_MSC_VER

Error_ParsingContext::Error_ParsingContext()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Error_ParsingContext::InitAsDefaultInstance() {
}

Error_ParsingContext::Error_ParsingContext(const Error_ParsingContext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Error_ParsingContext::SharedCtor() {
  _cached_size_ = 0;
  query_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  line_start_ = 0u;
  col_start_ = 0u;
  line_end_ = 0u;
  col_end_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error_ParsingContext::~Error_ParsingContext() {
  SharedDtor();
}

void Error_ParsingContext::SharedDtor() {
  if (query_string_ != &::google::protobuf::internal::kEmptyString) {
    delete query_string_;
  }
  if (this != default_instance_) {
  }
}

void Error_ParsingContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error_ParsingContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_ParsingContext_descriptor_;
}

const Error_ParsingContext& Error_ParsingContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();  return *default_instance_;
}

Error_ParsingContext* Error_ParsingContext::default_instance_ = NULL;

Error_ParsingContext* Error_ParsingContext::New() const {
  return new Error_ParsingContext;
}

void Error_ParsingContext::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_query_string()) {
      if (query_string_ != &::google::protobuf::internal::kEmptyString) {
        query_string_->clear();
      }
    }
    line_start_ = 0u;
    col_start_ = 0u;
    line_end_ = 0u;
    col_end_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Error_ParsingContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string query_string = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->query_string().data(), this->query_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_line_start;
        break;
      }
      
      // required uint32 line_start = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_line_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_start_)));
          set_has_line_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_col_start;
        break;
      }
      
      // required uint32 col_start = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_col_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &col_start_)));
          set_has_col_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_line_end;
        break;
      }
      
      // required uint32 line_end = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_line_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_end_)));
          set_has_line_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_col_end;
        break;
      }
      
      // required uint32 col_end = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_col_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &col_end_)));
          set_has_col_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Error_ParsingContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string query_string = 1;
  if (has_query_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query_string().data(), this->query_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->query_string(), output);
  }
  
  // required uint32 line_start = 2;
  if (has_line_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->line_start(), output);
  }
  
  // required uint32 col_start = 3;
  if (has_col_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->col_start(), output);
  }
  
  // required uint32 line_end = 4;
  if (has_line_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->line_end(), output);
  }
  
  // required uint32 col_end = 5;
  if (has_col_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->col_end(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Error_ParsingContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string query_string = 1;
  if (has_query_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query_string().data(), this->query_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query_string(), target);
  }
  
  // required uint32 line_start = 2;
  if (has_line_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->line_start(), target);
  }
  
  // required uint32 col_start = 3;
  if (has_col_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->col_start(), target);
  }
  
  // required uint32 line_end = 4;
  if (has_line_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->line_end(), target);
  }
  
  // required uint32 col_end = 5;
  if (has_col_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->col_end(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Error_ParsingContext::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string query_string = 1;
    if (has_query_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_string());
    }
    
    // required uint32 line_start = 2;
    if (has_line_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->line_start());
    }
    
    // required uint32 col_start = 3;
    if (has_col_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->col_start());
    }
    
    // required uint32 line_end = 4;
    if (has_line_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->line_end());
    }
    
    // required uint32 col_end = 5;
    if (has_col_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->col_end());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error_ParsingContext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Error_ParsingContext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Error_ParsingContext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error_ParsingContext::MergeFrom(const Error_ParsingContext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query_string()) {
      set_query_string(from.query_string());
    }
    if (from.has_line_start()) {
      set_line_start(from.line_start());
    }
    if (from.has_col_start()) {
      set_col_start(from.col_start());
    }
    if (from.has_line_end()) {
      set_line_end(from.line_end());
    }
    if (from.has_col_end()) {
      set_col_end(from.col_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Error_ParsingContext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error_ParsingContext::CopyFrom(const Error_ParsingContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error_ParsingContext::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void Error_ParsingContext::Swap(Error_ParsingContext* other) {
  if (other != this) {
    std::swap(query_string_, other->query_string_);
    std::swap(line_start_, other->line_start_);
    std::swap(col_start_, other->col_start_);
    std::swap(line_end_, other->line_end_);
    std::swap(col_end_, other->col_end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Error_ParsingContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_ParsingContext_descriptor_;
  metadata.reflection = Error_ParsingContext_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Error::kTypeFieldNumber;
const int Error::kFileFieldNumber;
const int Error::kFunctionFieldNumber;
const int Error::kLineFieldNumber;
const int Error::kWhatStrFieldNumber;
const int Error::kErrorsNamespaceFieldNumber;
const int Error::kShortErrorCodeFieldNumber;
const int Error::kLongErrorCodeFieldNumber;
const int Error::kStringifiedShortErrorCodeFieldNumber;
const int Error::kStringifiedLongErrorCodeFieldNumber;
const int Error::kParsingContextFieldNumber;
const int Error::kClusterUuidFieldNumber;
#endif  // !_MSC_VER

Error::Error()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Error::InitAsDefaultInstance() {
  parsing_context_ = const_cast< ::scidb_msg::Error_ParsingContext*>(&::scidb_msg::Error_ParsingContext::default_instance());
}

Error::Error(const Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Error::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  function_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  line_ = 0;
  what_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  errors_namespace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  short_error_code_ = 0;
  long_error_code_ = 0;
  stringified_short_error_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stringified_long_error_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parsing_context_ = NULL;
  cluster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  SharedDtor();
}

void Error::SharedDtor() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    delete file_;
  }
  if (function_ != &::google::protobuf::internal::kEmptyString) {
    delete function_;
  }
  if (what_str_ != &::google::protobuf::internal::kEmptyString) {
    delete what_str_;
  }
  if (errors_namespace_ != &::google::protobuf::internal::kEmptyString) {
    delete errors_namespace_;
  }
  if (stringified_short_error_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stringified_short_error_code_;
  }
  if (stringified_long_error_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stringified_long_error_code_;
  }
  if (cluster_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete cluster_uuid_;
  }
  if (this != default_instance_) {
    delete parsing_context_;
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New() const {
  return new Error;
}

void Error::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::kEmptyString) {
        file_->clear();
      }
    }
    if (has_function()) {
      if (function_ != &::google::protobuf::internal::kEmptyString) {
        function_->clear();
      }
    }
    line_ = 0;
    if (has_what_str()) {
      if (what_str_ != &::google::protobuf::internal::kEmptyString) {
        what_str_->clear();
      }
    }
    if (has_errors_namespace()) {
      if (errors_namespace_ != &::google::protobuf::internal::kEmptyString) {
        errors_namespace_->clear();
      }
    }
    short_error_code_ = 0;
    long_error_code_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_stringified_short_error_code()) {
      if (stringified_short_error_code_ != &::google::protobuf::internal::kEmptyString) {
        stringified_short_error_code_->clear();
      }
    }
    if (has_stringified_long_error_code()) {
      if (stringified_long_error_code_ != &::google::protobuf::internal::kEmptyString) {
        stringified_long_error_code_->clear();
      }
    }
    if (has_parsing_context()) {
      if (parsing_context_ != NULL) parsing_context_->::scidb_msg::Error_ParsingContext::Clear();
    }
    if (has_cluster_uuid()) {
      if (cluster_uuid_ != &::google::protobuf::internal::kEmptyString) {
        cluster_uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file;
        break;
      }
      
      // optional string file = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_function;
        break;
      }
      
      // optional string function = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->function().data(), this->function().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_line;
        break;
      }
      
      // optional int32 line = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_what_str;
        break;
      }
      
      // optional string what_str = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_what_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_what_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->what_str().data(), this->what_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_errors_namespace;
        break;
      }
      
      // required string errors_namespace = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errors_namespace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errors_namespace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errors_namespace().data(), this->errors_namespace().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_short_error_code;
        break;
      }
      
      // required int32 short_error_code = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_short_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &short_error_code_)));
          set_has_short_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_long_error_code;
        break;
      }
      
      // required int32 long_error_code = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_long_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &long_error_code_)));
          set_has_long_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_stringified_short_error_code;
        break;
      }
      
      // optional string stringified_short_error_code = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringified_short_error_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringified_short_error_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stringified_short_error_code().data(), this->stringified_short_error_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_stringified_long_error_code;
        break;
      }
      
      // optional string stringified_long_error_code = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringified_long_error_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringified_long_error_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stringified_long_error_code().data(), this->stringified_long_error_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_parsing_context;
        break;
      }
      
      // optional .scidb_msg.Error.ParsingContext parsing_context = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parsing_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parsing_context()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_cluster_uuid;
        break;
      }
      
      // optional string cluster_uuid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cluster_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cluster_uuid().data(), this->cluster_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional string file = 2;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file(), output);
  }
  
  // optional string function = 3;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->function(), output);
  }
  
  // optional int32 line = 4;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->line(), output);
  }
  
  // optional string what_str = 5;
  if (has_what_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->what_str().data(), this->what_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->what_str(), output);
  }
  
  // required string errors_namespace = 6;
  if (has_errors_namespace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errors_namespace().data(), this->errors_namespace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->errors_namespace(), output);
  }
  
  // required int32 short_error_code = 7;
  if (has_short_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->short_error_code(), output);
  }
  
  // required int32 long_error_code = 8;
  if (has_long_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->long_error_code(), output);
  }
  
  // optional string stringified_short_error_code = 9;
  if (has_stringified_short_error_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringified_short_error_code().data(), this->stringified_short_error_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->stringified_short_error_code(), output);
  }
  
  // optional string stringified_long_error_code = 10;
  if (has_stringified_long_error_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringified_long_error_code().data(), this->stringified_long_error_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->stringified_long_error_code(), output);
  }
  
  // optional .scidb_msg.Error.ParsingContext parsing_context = 11;
  if (has_parsing_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->parsing_context(), output);
  }
  
  // optional string cluster_uuid = 12;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->cluster_uuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional string file = 2;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file(), target);
  }
  
  // optional string function = 3;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->function(), target);
  }
  
  // optional int32 line = 4;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->line(), target);
  }
  
  // optional string what_str = 5;
  if (has_what_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->what_str().data(), this->what_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->what_str(), target);
  }
  
  // required string errors_namespace = 6;
  if (has_errors_namespace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errors_namespace().data(), this->errors_namespace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->errors_namespace(), target);
  }
  
  // required int32 short_error_code = 7;
  if (has_short_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->short_error_code(), target);
  }
  
  // required int32 long_error_code = 8;
  if (has_long_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->long_error_code(), target);
  }
  
  // optional string stringified_short_error_code = 9;
  if (has_stringified_short_error_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringified_short_error_code().data(), this->stringified_short_error_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->stringified_short_error_code(), target);
  }
  
  // optional string stringified_long_error_code = 10;
  if (has_stringified_long_error_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringified_long_error_code().data(), this->stringified_long_error_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->stringified_long_error_code(), target);
  }
  
  // optional .scidb_msg.Error.ParsingContext parsing_context = 11;
  if (has_parsing_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->parsing_context(), target);
  }
  
  // optional string cluster_uuid = 12;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->cluster_uuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Error::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string file = 2;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }
    
    // optional string function = 3;
    if (has_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->function());
    }
    
    // optional int32 line = 4;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line());
    }
    
    // optional string what_str = 5;
    if (has_what_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->what_str());
    }
    
    // required string errors_namespace = 6;
    if (has_errors_namespace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errors_namespace());
    }
    
    // required int32 short_error_code = 7;
    if (has_short_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->short_error_code());
    }
    
    // required int32 long_error_code = 8;
    if (has_long_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->long_error_code());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string stringified_short_error_code = 9;
    if (has_stringified_short_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringified_short_error_code());
    }
    
    // optional string stringified_long_error_code = 10;
    if (has_stringified_long_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringified_long_error_code());
    }
    
    // optional .scidb_msg.Error.ParsingContext parsing_context = 11;
    if (has_parsing_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parsing_context());
    }
    
    // optional string cluster_uuid = 12;
    if (has_cluster_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster_uuid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_function()) {
      set_function(from.function());
    }
    if (from.has_line()) {
      set_line(from.line());
    }
    if (from.has_what_str()) {
      set_what_str(from.what_str());
    }
    if (from.has_errors_namespace()) {
      set_errors_namespace(from.errors_namespace());
    }
    if (from.has_short_error_code()) {
      set_short_error_code(from.short_error_code());
    }
    if (from.has_long_error_code()) {
      set_long_error_code(from.long_error_code());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stringified_short_error_code()) {
      set_stringified_short_error_code(from.stringified_short_error_code());
    }
    if (from.has_stringified_long_error_code()) {
      set_stringified_long_error_code(from.stringified_long_error_code());
    }
    if (from.has_parsing_context()) {
      mutable_parsing_context()->::scidb_msg::Error_ParsingContext::MergeFrom(from.parsing_context());
    }
    if (from.has_cluster_uuid()) {
      set_cluster_uuid(from.cluster_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000e1) != 0x000000e1) return false;
  
  if (has_parsing_context()) {
    if (!this->parsing_context().IsInitialized()) return false;
  }
  return true;
}

void Error::Swap(Error* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(file_, other->file_);
    std::swap(function_, other->function_);
    std::swap(line_, other->line_);
    std::swap(what_str_, other->what_str_);
    std::swap(errors_namespace_, other->errors_namespace_);
    std::swap(short_error_code_, other->short_error_code_);
    std::swap(long_error_code_, other->long_error_code_);
    std::swap(stringified_short_error_code_, other->stringified_short_error_code_);
    std::swap(stringified_long_error_code_, other->stringified_long_error_code_);
    std::swap(parsing_context_, other->parsing_context_);
    std::swap(cluster_uuid_, other->cluster_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DummyQuery::kPayloadIdFieldNumber;
const int DummyQuery::kClusterUuidFieldNumber;
#endif  // !_MSC_VER

DummyQuery::DummyQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DummyQuery::InitAsDefaultInstance() {
}

DummyQuery::DummyQuery(const DummyQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DummyQuery::SharedCtor() {
  _cached_size_ = 0;
  payload_id_ = GOOGLE_ULONGLONG(0);
  cluster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DummyQuery::~DummyQuery() {
  SharedDtor();
}

void DummyQuery::SharedDtor() {
  if (cluster_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete cluster_uuid_;
  }
  if (this != default_instance_) {
  }
}

void DummyQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DummyQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DummyQuery_descriptor_;
}

const DummyQuery& DummyQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();  return *default_instance_;
}

DummyQuery* DummyQuery::default_instance_ = NULL;

DummyQuery* DummyQuery::New() const {
  return new DummyQuery;
}

void DummyQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    payload_id_ = GOOGLE_ULONGLONG(0);
    if (has_cluster_uuid()) {
      if (cluster_uuid_ != &::google::protobuf::internal::kEmptyString) {
        cluster_uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DummyQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 payload_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &payload_id_)));
          set_has_payload_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cluster_uuid;
        break;
      }
      
      // optional string cluster_uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cluster_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cluster_uuid().data(), this->cluster_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DummyQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 payload_id = 2;
  if (has_payload_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->payload_id(), output);
  }
  
  // optional string cluster_uuid = 3;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cluster_uuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DummyQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 payload_id = 2;
  if (has_payload_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->payload_id(), target);
  }
  
  // optional string cluster_uuid = 3;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_uuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DummyQuery::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 payload_id = 2;
    if (has_payload_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->payload_id());
    }
    
    // optional string cluster_uuid = 3;
    if (has_cluster_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster_uuid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DummyQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DummyQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DummyQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DummyQuery::MergeFrom(const DummyQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payload_id()) {
      set_payload_id(from.payload_id());
    }
    if (from.has_cluster_uuid()) {
      set_cluster_uuid(from.cluster_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DummyQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DummyQuery::CopyFrom(const DummyQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DummyQuery::IsInitialized() const {
  
  return true;
}

void DummyQuery::Swap(DummyQuery* other) {
  if (other != this) {
    std::swap(payload_id_, other->payload_id_);
    std::swap(cluster_uuid_, other->cluster_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DummyQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DummyQuery_descriptor_;
  metadata.reflection = DummyQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourcesFileExistsRequest::kResourceRequestIdFieldNumber;
const int ResourcesFileExistsRequest::kFilePathFieldNumber;
#endif  // !_MSC_VER

ResourcesFileExistsRequest::ResourcesFileExistsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourcesFileExistsRequest::InitAsDefaultInstance() {
}

ResourcesFileExistsRequest::ResourcesFileExistsRequest(const ResourcesFileExistsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourcesFileExistsRequest::SharedCtor() {
  _cached_size_ = 0;
  resource_request_id_ = GOOGLE_ULONGLONG(0);
  file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourcesFileExistsRequest::~ResourcesFileExistsRequest() {
  SharedDtor();
}

void ResourcesFileExistsRequest::SharedDtor() {
  if (file_path_ != &::google::protobuf::internal::kEmptyString) {
    delete file_path_;
  }
  if (this != default_instance_) {
  }
}

void ResourcesFileExistsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourcesFileExistsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourcesFileExistsRequest_descriptor_;
}

const ResourcesFileExistsRequest& ResourcesFileExistsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();  return *default_instance_;
}

ResourcesFileExistsRequest* ResourcesFileExistsRequest::default_instance_ = NULL;

ResourcesFileExistsRequest* ResourcesFileExistsRequest::New() const {
  return new ResourcesFileExistsRequest;
}

void ResourcesFileExistsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resource_request_id_ = GOOGLE_ULONGLONG(0);
    if (has_file_path()) {
      if (file_path_ != &::google::protobuf::internal::kEmptyString) {
        file_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourcesFileExistsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 resource_request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resource_request_id_)));
          set_has_resource_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_path;
        break;
      }
      
      // required string file_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourcesFileExistsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 resource_request_id = 1;
  if (has_resource_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->resource_request_id(), output);
  }
  
  // required string file_path = 2;
  if (has_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourcesFileExistsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 resource_request_id = 1;
  if (has_resource_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->resource_request_id(), target);
  }
  
  // required string file_path = 2;
  if (has_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourcesFileExistsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 resource_request_id = 1;
    if (has_resource_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->resource_request_id());
    }
    
    // required string file_path = 2;
    if (has_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourcesFileExistsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourcesFileExistsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourcesFileExistsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourcesFileExistsRequest::MergeFrom(const ResourcesFileExistsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resource_request_id()) {
      set_resource_request_id(from.resource_request_id());
    }
    if (from.has_file_path()) {
      set_file_path(from.file_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourcesFileExistsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourcesFileExistsRequest::CopyFrom(const ResourcesFileExistsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourcesFileExistsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ResourcesFileExistsRequest::Swap(ResourcesFileExistsRequest* other) {
  if (other != this) {
    std::swap(resource_request_id_, other->resource_request_id_);
    std::swap(file_path_, other->file_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourcesFileExistsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourcesFileExistsRequest_descriptor_;
  metadata.reflection = ResourcesFileExistsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourcesFileExistsResponse::kResourceRequestIdFieldNumber;
const int ResourcesFileExistsResponse::kExitsFlagFieldNumber;
#endif  // !_MSC_VER

ResourcesFileExistsResponse::ResourcesFileExistsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourcesFileExistsResponse::InitAsDefaultInstance() {
}

ResourcesFileExistsResponse::ResourcesFileExistsResponse(const ResourcesFileExistsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourcesFileExistsResponse::SharedCtor() {
  _cached_size_ = 0;
  resource_request_id_ = GOOGLE_ULONGLONG(0);
  exits_flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourcesFileExistsResponse::~ResourcesFileExistsResponse() {
  SharedDtor();
}

void ResourcesFileExistsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResourcesFileExistsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourcesFileExistsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourcesFileExistsResponse_descriptor_;
}

const ResourcesFileExistsResponse& ResourcesFileExistsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();  return *default_instance_;
}

ResourcesFileExistsResponse* ResourcesFileExistsResponse::default_instance_ = NULL;

ResourcesFileExistsResponse* ResourcesFileExistsResponse::New() const {
  return new ResourcesFileExistsResponse;
}

void ResourcesFileExistsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resource_request_id_ = GOOGLE_ULONGLONG(0);
    exits_flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourcesFileExistsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 resource_request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resource_request_id_)));
          set_has_resource_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exits_flag;
        break;
      }
      
      // required bool exits_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exits_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exits_flag_)));
          set_has_exits_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourcesFileExistsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 resource_request_id = 1;
  if (has_resource_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->resource_request_id(), output);
  }
  
  // required bool exits_flag = 2;
  if (has_exits_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->exits_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourcesFileExistsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 resource_request_id = 1;
  if (has_resource_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->resource_request_id(), target);
  }
  
  // required bool exits_flag = 2;
  if (has_exits_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->exits_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourcesFileExistsResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 resource_request_id = 1;
    if (has_resource_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->resource_request_id());
    }
    
    // required bool exits_flag = 2;
    if (has_exits_flag()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourcesFileExistsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourcesFileExistsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourcesFileExistsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourcesFileExistsResponse::MergeFrom(const ResourcesFileExistsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resource_request_id()) {
      set_resource_request_id(from.resource_request_id());
    }
    if (from.has_exits_flag()) {
      set_exits_flag(from.exits_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourcesFileExistsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourcesFileExistsResponse::CopyFrom(const ResourcesFileExistsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourcesFileExistsResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ResourcesFileExistsResponse::Swap(ResourcesFileExistsResponse* other) {
  if (other != this) {
    std::swap(resource_request_id_, other->resource_request_id_);
    std::swap(exits_flag_, other->exits_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourcesFileExistsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourcesFileExistsResponse_descriptor_;
  metadata.reflection = ResourcesFileExistsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Control_Channel::kIdFieldNumber;
const int Control_Channel::kAvailableFieldNumber;
const int Control_Channel::kLocalSnFieldNumber;
const int Control_Channel::kRemoteSnFieldNumber;
#endif  // !_MSC_VER

Control_Channel::Control_Channel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Control_Channel::InitAsDefaultInstance() {
}

Control_Channel::Control_Channel(const Control_Channel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Control_Channel::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  available_ = GOOGLE_ULONGLONG(0);
  local_sn_ = GOOGLE_ULONGLONG(0);
  remote_sn_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Control_Channel::~Control_Channel() {
  SharedDtor();
}

void Control_Channel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Control_Channel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Control_Channel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Control_Channel_descriptor_;
}

const Control_Channel& Control_Channel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();  return *default_instance_;
}

Control_Channel* Control_Channel::default_instance_ = NULL;

Control_Channel* Control_Channel::New() const {
  return new Control_Channel;
}

void Control_Channel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    available_ = GOOGLE_ULONGLONG(0);
    local_sn_ = GOOGLE_ULONGLONG(0);
    remote_sn_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Control_Channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_available;
        break;
      }
      
      // required uint64 available = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &available_)));
          set_has_available();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_local_sn;
        break;
      }
      
      // required uint64 local_sn = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_local_sn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_sn_)));
          set_has_local_sn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_remote_sn;
        break;
      }
      
      // required uint64 remote_sn = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remote_sn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &remote_sn_)));
          set_has_remote_sn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Control_Channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint64 available = 2;
  if (has_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->available(), output);
  }
  
  // required uint64 local_sn = 3;
  if (has_local_sn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->local_sn(), output);
  }
  
  // required uint64 remote_sn = 4;
  if (has_remote_sn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->remote_sn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Control_Channel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint64 available = 2;
  if (has_available()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->available(), target);
  }
  
  // required uint64 local_sn = 3;
  if (has_local_sn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->local_sn(), target);
  }
  
  // required uint64 remote_sn = 4;
  if (has_remote_sn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->remote_sn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Control_Channel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint64 available = 2;
    if (has_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->available());
    }
    
    // required uint64 local_sn = 3;
    if (has_local_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->local_sn());
    }
    
    // required uint64 remote_sn = 4;
    if (has_remote_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->remote_sn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Control_Channel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Control_Channel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Control_Channel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Control_Channel::MergeFrom(const Control_Channel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_available()) {
      set_available(from.available());
    }
    if (from.has_local_sn()) {
      set_local_sn(from.local_sn());
    }
    if (from.has_remote_sn()) {
      set_remote_sn(from.remote_sn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Control_Channel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control_Channel::CopyFrom(const Control_Channel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control_Channel::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void Control_Channel::Swap(Control_Channel* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(available_, other->available_);
    std::swap(local_sn_, other->local_sn_);
    std::swap(remote_sn_, other->remote_sn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Control_Channel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Control_Channel_descriptor_;
  metadata.reflection = Control_Channel_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Control::kLocalGenIdFieldNumber;
const int Control::kRemoteGenIdFieldNumber;
const int Control::kChannelsFieldNumber;
#endif  // !_MSC_VER

Control::Control()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Control::InitAsDefaultInstance() {
}

Control::Control(const Control& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Control::SharedCtor() {
  _cached_size_ = 0;
  local_gen_id_ = GOOGLE_ULONGLONG(0);
  remote_gen_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Control::~Control() {
  SharedDtor();
}

void Control::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Control::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Control::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Control_descriptor_;
}

const Control& Control::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();  return *default_instance_;
}

Control* Control::default_instance_ = NULL;

Control* Control::New() const {
  return new Control;
}

void Control::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    local_gen_id_ = GOOGLE_ULONGLONG(0);
    remote_gen_id_ = GOOGLE_ULONGLONG(0);
  }
  channels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Control::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 local_gen_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_gen_id_)));
          set_has_local_gen_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remote_gen_id;
        break;
      }
      
      // required uint64 remote_gen_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remote_gen_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &remote_gen_id_)));
          set_has_remote_gen_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_channels;
        break;
      }
      
      // repeated .scidb_msg.Control.Channel channels = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_channels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_channels;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Control::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 local_gen_id = 1;
  if (has_local_gen_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_gen_id(), output);
  }
  
  // required uint64 remote_gen_id = 2;
  if (has_remote_gen_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->remote_gen_id(), output);
  }
  
  // repeated .scidb_msg.Control.Channel channels = 3;
  for (int i = 0; i < this->channels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->channels(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Control::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 local_gen_id = 1;
  if (has_local_gen_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_gen_id(), target);
  }
  
  // required uint64 remote_gen_id = 2;
  if (has_remote_gen_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->remote_gen_id(), target);
  }
  
  // repeated .scidb_msg.Control.Channel channels = 3;
  for (int i = 0; i < this->channels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->channels(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Control::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 local_gen_id = 1;
    if (has_local_gen_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->local_gen_id());
    }
    
    // required uint64 remote_gen_id = 2;
    if (has_remote_gen_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->remote_gen_id());
    }
    
  }
  // repeated .scidb_msg.Control.Channel channels = 3;
  total_size += 1 * this->channels_size();
  for (int i = 0; i < this->channels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->channels(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Control::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Control* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Control*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Control::MergeFrom(const Control& from) {
  GOOGLE_CHECK_NE(&from, this);
  channels_.MergeFrom(from.channels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_gen_id()) {
      set_local_gen_id(from.local_gen_id());
    }
    if (from.has_remote_gen_id()) {
      set_remote_gen_id(from.remote_gen_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Control::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control::CopyFrom(const Control& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < channels_size(); i++) {
    if (!this->channels(i).IsInitialized()) return false;
  }
  return true;
}

void Control::Swap(Control* other) {
  if (other != this) {
    std::swap(local_gen_id_, other->local_gen_id_);
    std::swap(remote_gen_id_, other->remote_gen_id_);
    channels_.Swap(&other->channels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Control::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Control_descriptor_;
  metadata.reflection = Control_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MpiSlaveHandshake::kClusterUuidFieldNumber;
const int MpiSlaveHandshake::kInstanceIdFieldNumber;
const int MpiSlaveHandshake::kLaunchIdFieldNumber;
const int MpiSlaveHandshake::kRankFieldNumber;
const int MpiSlaveHandshake::kPidFieldNumber;
const int MpiSlaveHandshake::kPpidFieldNumber;
#endif  // !_MSC_VER

MpiSlaveHandshake::MpiSlaveHandshake()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MpiSlaveHandshake::InitAsDefaultInstance() {
}

MpiSlaveHandshake::MpiSlaveHandshake(const MpiSlaveHandshake& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MpiSlaveHandshake::SharedCtor() {
  _cached_size_ = 0;
  cluster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instance_id_ = GOOGLE_ULONGLONG(0);
  launch_id_ = GOOGLE_ULONGLONG(0);
  rank_ = GOOGLE_ULONGLONG(0);
  pid_ = 0;
  ppid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MpiSlaveHandshake::~MpiSlaveHandshake() {
  SharedDtor();
}

void MpiSlaveHandshake::SharedDtor() {
  if (cluster_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete cluster_uuid_;
  }
  if (this != default_instance_) {
  }
}

void MpiSlaveHandshake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MpiSlaveHandshake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MpiSlaveHandshake_descriptor_;
}

const MpiSlaveHandshake& MpiSlaveHandshake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();  return *default_instance_;
}

MpiSlaveHandshake* MpiSlaveHandshake::default_instance_ = NULL;

MpiSlaveHandshake* MpiSlaveHandshake::New() const {
  return new MpiSlaveHandshake;
}

void MpiSlaveHandshake::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cluster_uuid()) {
      if (cluster_uuid_ != &::google::protobuf::internal::kEmptyString) {
        cluster_uuid_->clear();
      }
    }
    instance_id_ = GOOGLE_ULONGLONG(0);
    launch_id_ = GOOGLE_ULONGLONG(0);
    rank_ = GOOGLE_ULONGLONG(0);
    pid_ = 0;
    ppid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MpiSlaveHandshake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cluster_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cluster_uuid().data(), this->cluster_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instance_id;
        break;
      }
      
      // required uint64 instance_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_launch_id;
        break;
      }
      
      // required uint64 launch_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_launch_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &launch_id_)));
          set_has_launch_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }
      
      // required uint64 rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pid;
        break;
      }
      
      // required int32 pid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ppid;
        break;
      }
      
      // required int32 ppid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ppid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ppid_)));
          set_has_ppid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MpiSlaveHandshake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cluster_uuid = 1;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cluster_uuid(), output);
  }
  
  // required uint64 instance_id = 2;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instance_id(), output);
  }
  
  // required uint64 launch_id = 3;
  if (has_launch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->launch_id(), output);
  }
  
  // required uint64 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->rank(), output);
  }
  
  // required int32 pid = 5;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pid(), output);
  }
  
  // required int32 ppid = 6;
  if (has_ppid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ppid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MpiSlaveHandshake::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cluster_uuid = 1;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster_uuid(), target);
  }
  
  // required uint64 instance_id = 2;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instance_id(), target);
  }
  
  // required uint64 launch_id = 3;
  if (has_launch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->launch_id(), target);
  }
  
  // required uint64 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->rank(), target);
  }
  
  // required int32 pid = 5;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pid(), target);
  }
  
  // required int32 ppid = 6;
  if (has_ppid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ppid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MpiSlaveHandshake::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cluster_uuid = 1;
    if (has_cluster_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster_uuid());
    }
    
    // required uint64 instance_id = 2;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instance_id());
    }
    
    // required uint64 launch_id = 3;
    if (has_launch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->launch_id());
    }
    
    // required uint64 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rank());
    }
    
    // required int32 pid = 5;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
    // required int32 ppid = 6;
    if (has_ppid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ppid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MpiSlaveHandshake::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MpiSlaveHandshake* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MpiSlaveHandshake*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MpiSlaveHandshake::MergeFrom(const MpiSlaveHandshake& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cluster_uuid()) {
      set_cluster_uuid(from.cluster_uuid());
    }
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_launch_id()) {
      set_launch_id(from.launch_id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_ppid()) {
      set_ppid(from.ppid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MpiSlaveHandshake::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpiSlaveHandshake::CopyFrom(const MpiSlaveHandshake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpiSlaveHandshake::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void MpiSlaveHandshake::Swap(MpiSlaveHandshake* other) {
  if (other != this) {
    std::swap(cluster_uuid_, other->cluster_uuid_);
    std::swap(instance_id_, other->instance_id_);
    std::swap(launch_id_, other->launch_id_);
    std::swap(rank_, other->rank_);
    std::swap(pid_, other->pid_);
    std::swap(ppid_, other->ppid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MpiSlaveHandshake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MpiSlaveHandshake_descriptor_;
  metadata.reflection = MpiSlaveHandshake_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MpiSlaveResult::kLaunchIdFieldNumber;
const int MpiSlaveResult::kStatusFieldNumber;
#endif  // !_MSC_VER

MpiSlaveResult::MpiSlaveResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MpiSlaveResult::InitAsDefaultInstance() {
}

MpiSlaveResult::MpiSlaveResult(const MpiSlaveResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MpiSlaveResult::SharedCtor() {
  _cached_size_ = 0;
  launch_id_ = GOOGLE_ULONGLONG(0);
  status_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MpiSlaveResult::~MpiSlaveResult() {
  SharedDtor();
}

void MpiSlaveResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MpiSlaveResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MpiSlaveResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MpiSlaveResult_descriptor_;
}

const MpiSlaveResult& MpiSlaveResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();  return *default_instance_;
}

MpiSlaveResult* MpiSlaveResult::default_instance_ = NULL;

MpiSlaveResult* MpiSlaveResult::New() const {
  return new MpiSlaveResult;
}

void MpiSlaveResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    launch_id_ = GOOGLE_ULONGLONG(0);
    status_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MpiSlaveResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 launch_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &launch_id_)));
          set_has_launch_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }
      
      // required int64 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MpiSlaveResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 launch_id = 1;
  if (has_launch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->launch_id(), output);
  }
  
  // required int64 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MpiSlaveResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 launch_id = 1;
  if (has_launch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->launch_id(), target);
  }
  
  // required int64 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MpiSlaveResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 launch_id = 1;
    if (has_launch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->launch_id());
    }
    
    // required int64 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MpiSlaveResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MpiSlaveResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MpiSlaveResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MpiSlaveResult::MergeFrom(const MpiSlaveResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_launch_id()) {
      set_launch_id(from.launch_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MpiSlaveResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpiSlaveResult::CopyFrom(const MpiSlaveResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpiSlaveResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MpiSlaveResult::Swap(MpiSlaveResult* other) {
  if (other != this) {
    std::swap(launch_id_, other->launch_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MpiSlaveResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MpiSlaveResult_descriptor_;
  metadata.reflection = MpiSlaveResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MpiSlaveCommand::kCommandFieldNumber;
const int MpiSlaveCommand::kArgsFieldNumber;
#endif  // !_MSC_VER

MpiSlaveCommand::MpiSlaveCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MpiSlaveCommand::InitAsDefaultInstance() {
}

MpiSlaveCommand::MpiSlaveCommand(const MpiSlaveCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MpiSlaveCommand::SharedCtor() {
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MpiSlaveCommand::~MpiSlaveCommand() {
  SharedDtor();
}

void MpiSlaveCommand::SharedDtor() {
  if (command_ != &::google::protobuf::internal::kEmptyString) {
    delete command_;
  }
  if (this != default_instance_) {
  }
}

void MpiSlaveCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MpiSlaveCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MpiSlaveCommand_descriptor_;
}

const MpiSlaveCommand& MpiSlaveCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();  return *default_instance_;
}

MpiSlaveCommand* MpiSlaveCommand::default_instance_ = NULL;

MpiSlaveCommand* MpiSlaveCommand::New() const {
  return new MpiSlaveCommand;
}

void MpiSlaveCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_command()) {
      if (command_ != &::google::protobuf::internal::kEmptyString) {
        command_->clear();
      }
    }
  }
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MpiSlaveCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_args;
        break;
      }
      
      // repeated string args = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->args(0).data(), this->args(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MpiSlaveCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->command(), output);
  }
  
  // repeated string args = 2;
  for (int i = 0; i < this->args_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->args(i).data(), this->args(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->args(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MpiSlaveCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }
  
  // repeated string args = 2;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->args(i).data(), this->args(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->args(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MpiSlaveCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }
    
  }
  // repeated string args = 2;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->args(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MpiSlaveCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MpiSlaveCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MpiSlaveCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MpiSlaveCommand::MergeFrom(const MpiSlaveCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MpiSlaveCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpiSlaveCommand::CopyFrom(const MpiSlaveCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpiSlaveCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MpiSlaveCommand::Swap(MpiSlaveCommand* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MpiSlaveCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MpiSlaveCommand_descriptor_;
  metadata.reflection = MpiSlaveCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NewClientStart::NewClientStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewClientStart::InitAsDefaultInstance() {
}

NewClientStart::NewClientStart(const NewClientStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewClientStart::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewClientStart::~NewClientStart() {
  SharedDtor();
}

void NewClientStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewClientStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewClientStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewClientStart_descriptor_;
}

const NewClientStart& NewClientStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();  return *default_instance_;
}

NewClientStart* NewClientStart::default_instance_ = NULL;

NewClientStart* NewClientStart::New() const {
  return new NewClientStart;
}

void NewClientStart::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewClientStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NewClientStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewClientStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewClientStart::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewClientStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewClientStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewClientStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewClientStart::MergeFrom(const NewClientStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewClientStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewClientStart::CopyFrom(const NewClientStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewClientStart::IsInitialized() const {
  
  return true;
}

void NewClientStart::Swap(NewClientStart* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewClientStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewClientStart_descriptor_;
  metadata.reflection = NewClientStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewClientComplete::kAuthenticatedFieldNumber;
#endif  // !_MSC_VER

NewClientComplete::NewClientComplete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewClientComplete::InitAsDefaultInstance() {
}

NewClientComplete::NewClientComplete(const NewClientComplete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewClientComplete::SharedCtor() {
  _cached_size_ = 0;
  authenticated_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewClientComplete::~NewClientComplete() {
  SharedDtor();
}

void NewClientComplete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewClientComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewClientComplete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewClientComplete_descriptor_;
}

const NewClientComplete& NewClientComplete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();  return *default_instance_;
}

NewClientComplete* NewClientComplete::default_instance_ = NULL;

NewClientComplete* NewClientComplete::New() const {
  return new NewClientComplete;
}

void NewClientComplete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    authenticated_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewClientComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool authenticated = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &authenticated_)));
          set_has_authenticated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewClientComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool authenticated = 1;
  if (has_authenticated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->authenticated(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewClientComplete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool authenticated = 1;
  if (has_authenticated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->authenticated(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewClientComplete::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool authenticated = 1;
    if (has_authenticated()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewClientComplete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewClientComplete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewClientComplete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewClientComplete::MergeFrom(const NewClientComplete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_authenticated()) {
      set_authenticated(from.authenticated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewClientComplete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewClientComplete::CopyFrom(const NewClientComplete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewClientComplete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void NewClientComplete::Swap(NewClientComplete* other) {
  if (other != this) {
    std::swap(authenticated_, other->authenticated_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewClientComplete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewClientComplete_descriptor_;
  metadata.reflection = NewClientComplete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecurityMessage::kMsgTypeFieldNumber;
const int SecurityMessage::kMsgFieldNumber;
#endif  // !_MSC_VER

SecurityMessage::SecurityMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecurityMessage::InitAsDefaultInstance() {
}

SecurityMessage::SecurityMessage(const SecurityMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecurityMessage::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecurityMessage::~SecurityMessage() {
  SharedDtor();
}

void SecurityMessage::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void SecurityMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecurityMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityMessage_descriptor_;
}

const SecurityMessage& SecurityMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();  return *default_instance_;
}

SecurityMessage* SecurityMessage::default_instance_ = NULL;

SecurityMessage* SecurityMessage::New() const {
  return new SecurityMessage;
}

void SecurityMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_type_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecurityMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_type_)));
          set_has_msg_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // required string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecurityMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msg_type(), output);
  }
  
  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecurityMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msg_type(), target);
  }
  
  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecurityMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_type());
    }
    
    // required string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecurityMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecurityMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecurityMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecurityMessage::MergeFrom(const SecurityMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecurityMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityMessage::CopyFrom(const SecurityMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SecurityMessage::Swap(SecurityMessage* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecurityMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecurityMessage_descriptor_;
  metadata.reflection = SecurityMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecurityMessageResponse::kResponseFieldNumber;
#endif  // !_MSC_VER

SecurityMessageResponse::SecurityMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecurityMessageResponse::InitAsDefaultInstance() {
}

SecurityMessageResponse::SecurityMessageResponse(const SecurityMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecurityMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecurityMessageResponse::~SecurityMessageResponse() {
  SharedDtor();
}

void SecurityMessageResponse::SharedDtor() {
  if (response_ != &::google::protobuf::internal::kEmptyString) {
    delete response_;
  }
  if (this != default_instance_) {
  }
}

void SecurityMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecurityMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityMessageResponse_descriptor_;
}

const SecurityMessageResponse& SecurityMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2fproto_2fscidb_5fmsg_2eproto();  return *default_instance_;
}

SecurityMessageResponse* SecurityMessageResponse::default_instance_ = NULL;

SecurityMessageResponse* SecurityMessageResponse::New() const {
  return new SecurityMessageResponse;
}

void SecurityMessageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_response()) {
      if (response_ != &::google::protobuf::internal::kEmptyString) {
        response_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecurityMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string response = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->response().data(), this->response().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecurityMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string response = 1;
  if (has_response()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response().data(), this->response().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->response(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecurityMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string response = 1;
  if (has_response()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response().data(), this->response().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->response(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecurityMessageResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecurityMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecurityMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecurityMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecurityMessageResponse::MergeFrom(const SecurityMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      set_response(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecurityMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityMessageResponse::CopyFrom(const SecurityMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SecurityMessageResponse::Swap(SecurityMessageResponse* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecurityMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecurityMessageResponse_descriptor_;
  metadata.reflection = SecurityMessageResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace scidb_msg

// @@protoc_insertion_point(global_scope)
